<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>The Open Graph Drawing Framework</title>
    <filename>main</filename>
    <docanchor file="main">sec_intro</docanchor>
  </compound>
  <compound kind="file">
    <name>DfsMakeBiconnected.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/augmentation/</path>
    <filename>_dfs_make_biconnected_8h</filename>
    <includes id="_augmentation_module_8h" name="AugmentationModule.h" local="no" imported="no">ogdf/module/AugmentationModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DfsMakeBiconnected</class>
  </compound>
  <compound kind="file">
    <name>PlanarAugmentation.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/augmentation/</path>
    <filename>_planar_augmentation_8h</filename>
    <includes id="_augmentation_module_8h" name="AugmentationModule.h" local="no" imported="no">ogdf/module/AugmentationModule.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_dynamic_b_c_tree_8h" name="DynamicBCTree.h" local="no" imported="no">ogdf/decomposition/DynamicBCTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::labelStruct</class>
    <class kind="class">ogdf::PlanarAugmentation</class>
    <member kind="typedef">
      <type>labelStruct *</type>
      <name>label</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b2a3762ee4e8c1b268ff8e6bba123619</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>paStopCause</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paPlanarity</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a00c404f0bed479d12bb9faf174a3dada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paCDegree</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a5f00e6d348cc120b7c071d18ff6755a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paBDegree</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a10b86a49b601bb65eff5e8a897391a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paRoot</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a8ad6d0255909e1432c5691dbbe37db18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PlanarAugmentationFix.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/augmentation/</path>
    <filename>_planar_augmentation_fix_8h</filename>
    <includes id="_augmentation_module_8h" name="AugmentationModule.h" local="no" imported="no">ogdf/module/AugmentationModule.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_dynamic_b_c_tree_8h" name="DynamicBCTree.h" local="no" imported="no">ogdf/decomposition/DynamicBCTree.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <includes id="_planar_augmentation_8h" name="PlanarAugmentation.h" local="no" imported="no">ogdf/augmentation/PlanarAugmentation.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarAugmentationFix</class>
  </compound>
  <compound kind="file">
    <name>AdjEntryArray.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_adj_entry_array_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::AdjEntryArrayBase</class>
    <class kind="class">ogdf::AdjEntryArray</class>
  </compound>
  <compound kind="file">
    <name>Array.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_array_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Array</class>
    <member kind="define">
      <type>#define</type>
      <name>forall_arrayindices</name>
      <anchorfile>_array_8h.html</anchorfile>
      <anchor>b46fbf479fe3525e79d00d74ff5e6bc3</anchor>
      <arglist>(i, A)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_rev_arrayindices</name>
      <anchorfile>_array_8h.html</anchorfile>
      <anchor>ad77bc70cfb296c688f59d0734b1fcdf</anchor>
      <arglist>(i, A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0662dd461adf8dfa30af7035bbaad076</anchor>
      <arglist>(ostream &amp;os, const Array&lt; E, INDEX &gt; &amp;a, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c92b232e203412c3208dc09e9502be20</anchor>
      <arglist>(ostream &amp;os, const ogdf::Array&lt; E, INDEX &gt; &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>maxSizeInsertionSort</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e5a938e97d8a9ee65535987d7e67f67e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Array2D.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_array2_d_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">math.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Array2D</class>
  </compound>
  <compound kind="file">
    <name>ArrayBuffer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_array_buffer_8h</filename>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ArrayBuffer</class>
  </compound>
  <compound kind="file">
    <name>basic.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>basic_8h</filename>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">ogdf/basic/exceptions.h</includes>
    <includes id="memory_8h" name="memory.h" local="no" imported="no">ogdf/basic/memory.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">OgdfInitialization</class>
    <class kind="class">ogdf::Comparer</class>
    <class kind="class">ogdf::DefComparer</class>
    <class kind="class">ogdf::DefComparer&lt; int &gt;</class>
    <class kind="class">ogdf::BucketFunc</class>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_ASSERT</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>ba9188896165f0dc2e3ad0ab69fab97c</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_ASSERT_IF</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>b6604de671117ba22fa29f81ca12bd94</anchor>
      <arglist>(minLevel, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_SET_DEBUG_LEVEL</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>702bb462c4400c9f185596c59ceafee7</anchor>
      <arglist>(level)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_LP_SOLVER</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>478b749c87cb5d4c586f0fb77a3b89af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_FT_ENDING</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>683b203e9f1df24ca9e01d51017d42de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_TYPENAME</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>6ef8dbd44d2b8d53c0b8d8d6000cbe6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOOP_CAT</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>724fc85c96cc15e87c23d960d57e4c34</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_VAR</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>518ef59cdab7457ecdbddf6a6618fef9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="enumeration">
      <name>Direction</name>
      <anchor>c7625914963ce9d09a3e208f02d12f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>before</name>
      <anchor>c7625914963ce9d09a3e208f02d12f2b316bd36a4da63c26954690d7624c4429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>after</name>
      <anchor>c7625914963ce9d09a3e208f02d12f2b4c63159e8c0fde2efcf369d1251e43ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>FileType</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ftEntry</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db66f27df27d55586ddf4337f25fdd986c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ftFile</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db625701f1ef7ac12b6b4a865e38626ef59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ftDirectory</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db6368c783c8457e1212e3fa95f24118cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6fe6663a600bf0a1bfdef96225215577</anchor>
      <arglist>(T &amp;x, T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4bfab25cf505f4f51f92749f85890e95</anchor>
      <arglist>(const T &amp;x, const T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>238c6cd2a698950c08cd2a8843b676e0</anchor>
      <arglist>(const T &amp;x, const T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>randomNumber</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>102a5bb3ad5265abf5fe9c7168490ffc</anchor>
      <arglist>(int low, int high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomDouble</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45ca26f42fd159f5a7f91e6756197777</anchor>
      <arglist>(double low, double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>usedTime</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>569b0889c74ca8cceee1dd1f161c45bd</anchor>
      <arglist>(double &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6dc0dc948edfa757bc15a1c795a2e92b</anchor>
      <arglist>(const E *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a848e725230be3d35ba434adb4aaae7b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; int &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d31d23dc68ed674a5a290213497daea7</anchor>
      <arglist>(const int *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; double &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>98a6f1d35158fc9b65300285afa9e3ee</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFile</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8413d8df63697d3dec04201fa2b88a0b</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>737448818001d3e77c974a229e412f2c</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeDir</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>80fac07cf9bb61c3d78d60dfd6ad87a9</anchor>
      <arglist>(const char *dirName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFiles</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>60139238cf7bf5e11a611042c1140832</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;files, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFilesAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>5afb150669722246b67d2163e7e6c69e</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;files, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSubdirs</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7217150acb0b5c0f64b42fc39aabe694</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;subdirs, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSubdirsAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>dbf65ca4ec35cdcce90bb02e7acfe6db</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;subdirs, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntries</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>473ad41aaa75cd49457d51f6f12ec2b9</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntriesAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9cca2679158849910d55f4ad45cdfb98</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntries</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>907537f4f960d4eba92f4d39441c0fad</anchor>
      <arglist>(const char *dirName, FileType t, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntriesAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6e917ecb61320626468e6471bb14e930</anchor>
      <arglist>(const char *dirName, FileType t, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sprintf</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>84fd73f1d4571c3cd265b1d01321bce4</anchor>
      <arglist>(char *buffer, size_t sizeOfBuffer, const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vsprintf</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f7a839a59253b9d34c1d021999894b39</anchor>
      <arglist>(char *buffer, size_t sizeInBytes, const char *format, va_list argptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strcat</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4125bb2696378fd31ca2dadf88188be2</anchor>
      <arglist>(char *strDest, size_t sizeOfDest, const char *strSource)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strcpy</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f6d4333f38b3d79b0abc5257acebdb34</anchor>
      <arglist>(char *strDest, size_t sizeOfDest, const char *strSource)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strncpy</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>80531ef5712c6555e69b1d2c923274c7</anchor>
      <arglist>(char *strDest, size_t sizeOfDest, const char *strSource, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localtime</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>61aa85c9ff04c75257017b6b2146792a</anchor>
      <arglist>(struct tm *ptm, const time_t *timer)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OgdfInitialization</type>
      <name>s_ogdfInitializer</name>
      <anchorfile>basic_8h.html</anchorfile>
      <anchor>954f1c38edd9e846894832d709e7574f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>pi</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>512d1e2360acdbc1e3b8ec9c24ae6258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>euler</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0a0f10a9d8a09dfbd08da96349fcaedc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BinaryHeap.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_binary_heap_8h</filename>
    <includes id="_heap_base_8h" name="HeapBase.h" local="no" imported="no">ogdf/basic/HeapBase.h</includes>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BinaryHeap</class>
    <class kind="struct">ogdf::BinaryHeap::HeapEntry</class>
  </compound>
  <compound kind="file">
    <name>BoundedQueue.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_bounded_queue_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BoundedQueue</class>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>de7f126408070951fce6350f80de38a2</anchor>
      <arglist>(ostream &amp;os, const BoundedQueue&lt; E, INDEX &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>04d643f153b25092ace8402748c79628</anchor>
      <arglist>(ostream &amp;os, const BoundedQueue&lt; E, INDEX &gt; &amp;Q)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundedStack.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_bounded_stack_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BoundedStack</class>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c6c286557ec38e73dec58ce1676f91e8</anchor>
      <arglist>(ostream &amp;os, const BoundedStack&lt; E, INDEX &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>5ef1c9444c56c48607ebec1ecd99150e</anchor>
      <arglist>(ostream &amp;os, const BoundedStack&lt; E, INDEX &gt; &amp;S)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CombinatorialEmbedding.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_combinatorial_embedding_8h</filename>
    <includes id="_adj_entry_array_8h" name="AdjEntryArray.h" local="no" imported="no">ogdf/basic/AdjEntryArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FaceElement</class>
    <class kind="class">ogdf::ConstCombinatorialEmbedding</class>
    <class kind="class">ogdf::CombinatorialEmbedding</class>
    <member kind="define">
      <type>#define</type>
      <name>forall_faces</name>
      <anchorfile>_combinatorial_embedding_8h.html</anchorfile>
      <anchor>39e211a208a96b003303a0fc51973be0</anchor>
      <arglist>(f, E)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_rev_faces</name>
      <anchorfile>_combinatorial_embedding_8h.html</anchorfile>
      <anchor>5ab2232c877edd3fb518dd702885df90</anchor>
      <arglist>(f, E)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_face_adj</name>
      <anchorfile>_combinatorial_embedding_8h.html</anchorfile>
      <anchor>6fe737de75afd0c3c4c6c19bcf0d7433</anchor>
      <arglist>(adj, f)</arglist>
    </member>
    <member kind="typedef">
      <type>FaceElement *</type>
      <name>face</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>fc2cdb02913f6019e953897ef0c0b2d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DualGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_dual_graph_8h</filename>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DualGraph</class>
  </compound>
  <compound kind="file">
    <name>EdgeArray.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_edge_array_8h</filename>
    <includes id="_graph__d_8h" name="Graph_d.h" local="no" imported="no">ogdf/basic/Graph_d.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EdgeArrayBase</class>
    <class kind="class">ogdf::EdgeArray</class>
    <class kind="class">ogdf::BucketEdgeArray</class>
  </compound>
  <compound kind="file">
    <name>EdgeComparer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_edge_comparer_8h</filename>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EdgeComparer</class>
  </compound>
  <compound kind="file">
    <name>exceptions.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>exceptions_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Exception</class>
    <class kind="class">ogdf::DynamicCastFailedException</class>
    <class kind="class">ogdf::InsufficientMemoryException</class>
    <class kind="class">ogdf::PreconditionViolatedException</class>
    <class kind="class">ogdf::AlgorithmFailureException</class>
    <class kind="class">ogdf::LibraryNotSupportedException</class>
    <member kind="define">
      <type>#define</type>
      <name>THROW_PARAM</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>629d59ceeff027434ce6d8f651d143cb</anchor>
      <arglist>(CLASS, PARAM)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>THROW</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>509e315d00c89da9bb3a23a475ec510e</anchor>
      <arglist>(CLASS)</arglist>
    </member>
    <member kind="enumeration">
      <name>PreconditionViolatedCode</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcUnknown</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b897c771333552d4fcb84b170b3b793194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcSelfLoop</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b841967e3afb65e57092c93cda34d08e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcTreeHierarchies</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8287bfbf467e89ec99a7a6a31a7400e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcAcyclicHierarchies</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8267c7e33088ead608def5d17f0e024ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcSingleSource</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8e2a969783265d1f7b99998e5ab02619e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcUpwardPlanar</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b83f68e1250fb50d52b480621b946f4eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcTree</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b83e1d12e489d752aecf56f320adfa6742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcForest</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b883f39e77ee5be9b6369a0ee91d406418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcOrthogonal</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8c955499d6aeca842125368d047ab16e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcPlanar</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8d38b354c53e86ef587e12458655637a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcClusterPlanar</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b87da4e94cdb25cd10537fe64b0e37db1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcNoCopy</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b834d12405a3cfac33d3b6365be739246b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcConnected</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8b37504547101a8765d9335724f53af94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcBiconnected</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b849788b8304fd579f04e144d72eea6f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcSTOP</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8e815392bc9bdce25e3ea0fd37fef998e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AlgorithmFailureCode</name>
      <anchor>1fca16209583971af6d681f7bee9863e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcUnknown</name>
      <anchor>1fca16209583971af6d681f7bee9863e0a2868f69254cc37b2ef4f9a437893ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcIllegalParameter</name>
      <anchor>1fca16209583971af6d681f7bee9863e7dcf43efb29c203b924f8de4f24348b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcNoFlow</name>
      <anchor>1fca16209583971af6d681f7bee9863e3bc8ba48ea0941a7d45d05b6e444f811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcSort</name>
      <anchor>1fca16209583971af6d681f7bee9863e2266d401f882a51e62124ed19c062dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcLabel</name>
      <anchor>1fca16209583971af6d681f7bee9863e8f0f6583bd9a5e00235f12f47e023cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcExternalFace</name>
      <anchor>1fca16209583971af6d681f7bee9863e4cbf7a942b16b7e435b4934ac270d52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcForbiddenCrossing</name>
      <anchor>1fca16209583971af6d681f7bee9863e5b5c96977c38ac8b2db553558cafe346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcTimelimitExceeded</name>
      <anchor>1fca16209583971af6d681f7bee9863ea993ed874adfeaf3afeebcc81a71c9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcNoSolutionFound</name>
      <anchor>1fca16209583971af6d681f7bee9863e6467e080493d552274e587c95c6cd668</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcSTOP</name>
      <anchor>1fca16209583971af6d681f7bee9863e36429f7673c1781b3e6bdd4f449dba2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LibraryNotSupportedCode</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscUnknown</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc445aa2eb7dc4cdc606139fe5ffd4c8e39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscCoin</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc44ca6c5d6da756b8a19f4b00198e959736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscAbacus</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc446310f06f4656085183b6f83adc6e9ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscFunctionNotImplemented</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc4439d8c3b48f5d823137165bc58c80e7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscMissingCallbackImplementation</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc44dfc28858ec2193c0996803468b268b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscSTOP</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc448d693c4b4daf3b4cc518fd7813c1084f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>extended_graph_alg.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>extended__graph__alg_8h</filename>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <namespace>ogdf</namespace>
    <member kind="function">
      <type>void</type>
      <name>inducedSubGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45e73bbc1678fcf1bb8acccf5ba64624</anchor>
      <arglist>(const Graph &amp;G, LISTITERATOR start, Graph &amp;subGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inducedSubGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e03e35f80fabff9dc62fe9c6afca6aa5</anchor>
      <arglist>(const Graph &amp;G, LISTITERATOR start, Graph &amp;subGraph, NodeArray&lt; node &gt; &amp;nodeTableOrig2New)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inducedSubGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>32526c66fb0632ffefd71edd94c9c852</anchor>
      <arglist>(const Graph &amp;G, LISTITERATOR start, Graph &amp;subGraph, NodeArray&lt; node &gt; &amp;nodeTableOrig2New, EdgeArray&lt; edge &gt; &amp;edgeTableOrig2New)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inducedSubgraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d0ff9ec23b2b21211a4dc299d648082f</anchor>
      <arglist>(Graph &amp;G, NODELISTITERATOR &amp;it, EDGELIST &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7227ebc320e3c9c4375755167d82cf1a</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>aab84ef9c819f37a528e373b577fe626</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;GG, List&lt; edge &gt; &amp;addedEdges, bool simple=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stNumber</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0b4ce44e1d48946958555fc4501935bc</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;numbering, node s=0, node t=0, bool randomized=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testSTnumber</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>97febba79e2c23a5925cb8d62a94cb8d</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;st_no, int max)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceArray.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_face_array_8h</filename>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FaceArrayBase</class>
    <class kind="class">ogdf::FaceArray</class>
  </compound>
  <compound kind="file">
    <name>FaceSet.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_face_set_8h</filename>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FaceSetSimple</class>
    <class kind="class">ogdf::FaceSetPure</class>
    <class kind="class">ogdf::FaceSet</class>
  </compound>
  <compound kind="file">
    <name>geometry.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>geometry_8h</filename>
    <includes id="math_8h" name="math.h" local="no" imported="no">math.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_hashing_8h" name="Hashing.h" local="no" imported="no">ogdf/basic/Hashing.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GenericPoint</class>
    <class kind="class">ogdf::IPoint</class>
    <class kind="class">ogdf::DefHashFunc&lt; IPoint &gt;</class>
    <class kind="class">ogdf::IPolyline</class>
    <class kind="class">ogdf::DPoint</class>
    <class kind="class">ogdf::DVector</class>
    <class kind="class">ogdf::DPolyline</class>
    <class kind="class">ogdf::DLine</class>
    <class kind="class">ogdf::DRect</class>
    <class kind="class">ogdf::DScaler</class>
    <class kind="class">ogdf::DSegment</class>
    <class kind="class">ogdf::DPolygon</class>
    <member kind="define">
      <type>#define</type>
      <name>GEOMETRIC_CMP_EPS</name>
      <anchorfile>geometry_8h.html</anchorfile>
      <anchor>c65c9a72b2e3e7313494008591c920c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Orientation</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>topToBottom</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2eabfc7ba02afcecd0813a45d57ff68fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottomToTop</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2331e545853b0102965447f7574cd46f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>leftToRight</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe225f4540477c893ff9daa8524a659490f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rightToLeft</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2f84578dd40360f99554225c80bd1ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsEqual</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>59bbd435bb4c3f8b02a0401da7761c42</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsGreaterEqual</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4bf2ae7ef17e24e350567ccd5cd0b5e6</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsGreater</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>71cd0b9970cefea8dd2505564148ee13</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsLessEqual</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>15fdfeb1bbce8a66610c186eeb727bea</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsLess</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f5dfd64310bd20f5c0e7de880f95f996</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DRound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1954747c130923179d8934979bacd170</anchor>
      <arglist>(const double &amp;d, int prec=0)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7c26c2f3e33b5afbb2ac858a54b073f7</anchor>
      <arglist>(ostream &amp;os, const IPoint &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>74293f3de5b097474232ed3c7d5db6d7</anchor>
      <arglist>(ostream &amp;os, const DPoint &amp;dp)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8627d241bee12511bd5622b3474a00e2</anchor>
      <arglist>(ostream &amp;os, const DLine &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>490ff557f9aefb776e415c08946e37fb</anchor>
      <arglist>(ostream &amp;os, const DRect &amp;dr)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>189c37fe60b7e73945029f7fd93924f5</anchor>
      <arglist>(ostream &amp;os, const DScaler &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>75563d57025c0c398c1202408275dd20</anchor>
      <arglist>(ostream &amp;os, const DPolygon &amp;dop)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Graph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_graph_8h</filename>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <namespace>ogdf</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9d17159e4a18c5e4a7ed0c370c1e7372</anchor>
      <arglist>(ostream &amp;os, ogdf::node v)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>62eaac7e86b02f8e765bb1be8ccaff19</anchor>
      <arglist>(ostream &amp;os, ogdf::edge e)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b94cc57aa648f3b8684903c1442f3b14</anchor>
      <arglist>(ostream &amp;os, ogdf::adjEntry adj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Graph_d.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_graph__d_8h</filename>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GraphElement</class>
    <class kind="class">ogdf::GraphListBase</class>
    <class kind="class">ogdf::GraphList</class>
    <class kind="class">ogdf::AdjElement</class>
    <class kind="class">ogdf::NodeElement</class>
    <class kind="class">ogdf::EdgeElement</class>
    <class kind="class">ogdf::Graph</class>
    <class kind="class">ogdf::BucketSourceIndex</class>
    <class kind="class">ogdf::BucketTargetIndex</class>
    <member kind="define">
      <type>#define</type>
      <name>forall_nodes</name>
      <anchorfile>_graph__d_8h.html</anchorfile>
      <anchor>cf173c50cb212d30f1f4ee984c4a272f</anchor>
      <arglist>(v, G)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_rev_nodes</name>
      <anchorfile>_graph__d_8h.html</anchorfile>
      <anchor>363d9001eb038b2c23955fcb6218d84f</anchor>
      <arglist>(v, G)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_edges</name>
      <anchorfile>_graph__d_8h.html</anchorfile>
      <anchor>fc9702d5b7ae5aadc9fc846ae9297719</anchor>
      <arglist>(e, G)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_rev_edges</name>
      <anchorfile>_graph__d_8h.html</anchorfile>
      <anchor>6bac53a8c9167e61d06e2b073eabcbc6</anchor>
      <arglist>(e, G)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_adj</name>
      <anchorfile>_graph__d_8h.html</anchorfile>
      <anchor>54cc929b5c1b25b94a9ff9417f2a6195</anchor>
      <arglist>(adj, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_rev_adj</name>
      <anchorfile>_graph__d_8h.html</anchorfile>
      <anchor>c4db610114bc26d5a803c74c64c8680e</anchor>
      <arglist>(adj, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_adj_edges</name>
      <anchorfile>_graph__d_8h.html</anchorfile>
      <anchor>e53910b86f6343c6d82c56aad0107e0b</anchor>
      <arglist>(e, v)</arglist>
    </member>
    <member kind="typedef">
      <type>NodeElement *</type>
      <name>node</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ab7fa381c31d9d41aaeec9046392b323</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeElement *</type>
      <name>edge</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b994e376393ed171d84732d377289881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AdjElement *</type>
      <name>adjEntry</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>47dc56138d60ee98d8ceb8f4ea3a3848</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_edges</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>5dd203013f645cad7a7ad7534bb6b979</anchor>
      <arglist>(adjEntry &amp;adj, edge &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; node &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c0e4f8a9b69d1f08ecdcd04b4ffd77e4</anchor>
      <arglist>(const node *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; edge &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4c88969c99fd69fdee0a44928685d7fe</anchor>
      <arglist>(const edge *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; adjEntry &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8c318b6ad97a40440aaa87de342fe2b2</anchor>
      <arglist>(const adjEntry *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graph_generators.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>graph__generators_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <namespace>ogdf</namespace>
    <member kind="function">
      <type>void</type>
      <name>randomGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0feff1b510864aba8b73a1b34e5f2ca1</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomSimpleGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c6991a8ef695dc1ce1c320aeb843856d</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomBiconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e84cb709f5fcb098528bc0474d1a55b2</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarBiconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>12a6c6c7d7a99b18a5d7144bc9a9ee1d</anchor>
      <arglist>(Graph &amp;G, int n, int m, bool multiEdges=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarCNBGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>96e017ffba996249254e58c9e330d112</anchor>
      <arglist>(Graph &amp;G, int n, int m, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomTriconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>dad6b837cade23898f3dc0ae68239274</anchor>
      <arglist>(Graph &amp;G, int n, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarTriconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>181c070c885d02d1611cd83efd529611</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarTriconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2921ef7352d86abb984e01300e323c38</anchor>
      <arglist>(Graph &amp;G, int n, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d83c1576fee773abf95334f842f6849b</anchor>
      <arglist>(Graph &amp;G, int n, int maxDeg, int maxWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomHierarchy</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a4f8e06a35368a8ce24efcbb71bf1e36</anchor>
      <arglist>(Graph &amp;G, int n, int m, bool planar, bool singleSource, bool longEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomClusterPlanarGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>85a79853e408557d003de19d0034614e</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G, int cNum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomClusterGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>519fee82a5b4ee56b07e74f32e1ff7d9</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G, int cNum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a3f3de8e779cf75d10d3784c8da491fc</anchor>
      <arglist>(Graph &amp;G, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeBipartiteGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9d8c6b9ec7744fc50a48678666bb9f76</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wheelGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8cf4c76cee9dcb8bf4dbc3a13b401e2f</anchor>
      <arglist>(Graph &amp;G, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cubeGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b7c85da1b67c5f397be073826a532f39</anchor>
      <arglist>(Graph &amp;G, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspension</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3b6fc792acfc6697de0ae62c01df372b</anchor>
      <arglist>(Graph &amp;G, int s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GraphAttributes.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_graph_attributes_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_string_8h" name="String.h" local="no" imported="no">ogdf/basic/String.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GraphAttributes</class>
  </compound>
  <compound kind="file">
    <name>GraphCopy.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_graph_copy_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GraphCopySimple</class>
    <class kind="class">ogdf::GraphCopy</class>
  </compound>
  <compound kind="file">
    <name>GraphCopyAttributes.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_graph_copy_attributes_8h</filename>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GraphCopyAttributes</class>
  </compound>
  <compound kind="file">
    <name>GraphObserver.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_graph_observer_8h</filename>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GraphObserver</class>
  </compound>
  <compound kind="file">
    <name>GridLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_grid_layout_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GridLayout</class>
  </compound>
  <compound kind="file">
    <name>GridLayoutMapped.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_grid_layout_mapped_8h</filename>
    <includes id="_grid_layout_8h" name="GridLayout.h" local="no" imported="no">ogdf/basic/GridLayout.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GridLayoutMapped</class>
    <member kind="variable">
      <type>const int</type>
      <name>l_gridScale</name>
      <anchorfile>_grid_layout_mapped_8h.html</anchorfile>
      <anchor>001ef441504bef21a8e3e79baf099899</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HashArray.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_hash_array_8h</filename>
    <includes id="_hashing_8h" name="Hashing.h" local="no" imported="no">ogdf/basic/Hashing.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::HashArray</class>
  </compound>
  <compound kind="file">
    <name>HashArray2D.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_hash_array2_d_8h</filename>
    <includes id="_hash_array_8h" name="HashArray.h" local="no" imported="no">ogdf/basic/HashArray.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <includes id="_hash_iterator2_d_8h" name="HashIterator2D.h" local="no" imported="no">ogdf/basic/HashIterator2D.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::HashArray2D</class>
  </compound>
  <compound kind="file">
    <name>Hashing.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_hashing_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">math.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::HashElementBase</class>
    <class kind="class">ogdf::HashingBase</class>
    <class kind="class">ogdf::HashElement</class>
    <class kind="class">ogdf::DefHashFunc</class>
    <class kind="class">ogdf::DefHashFunc&lt; void * &gt;</class>
    <class kind="class">ogdf::DefHashFunc&lt; double &gt;</class>
    <class kind="class">ogdf::Hashing</class>
    <class kind="class">ogdf::HashConstIterator</class>
  </compound>
  <compound kind="file">
    <name>HashIterator2D.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_hash_iterator2_d_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::HashConstIterator2D</class>
  </compound>
  <compound kind="file">
    <name>HeapBase.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_heap_base_8h</filename>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::HeapBase</class>
  </compound>
  <compound kind="file">
    <name>IncNodeInserter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_inc_node_inserter_8h</filename>
    <includes id="_plan_rep_inc_8h" name="PlanRepInc.h" local="no" imported="no">ogdf/planarity/PlanRepInc.h</includes>
    <includes id="_u_m_l_graph_8h" name="UMLGraph.h" local="no" imported="no">ogdf/basic/UMLGraph.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_graph_observer_8h" name="GraphObserver.h" local="no" imported="no">ogdf/basic/GraphObserver.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::IncNodeInserter</class>
  </compound>
  <compound kind="file">
    <name>Layout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_layout_8h</filename>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Layout</class>
  </compound>
  <compound kind="file">
    <name>List.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_list_8h</filename>
    <includes id="list__templates_8h" name="list_templates.h" local="no" imported="no">ogdf/internal/basic/list_templates.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ListElement</class>
    <class kind="class">ogdf::ListIterator</class>
    <class kind="class">ogdf::ListConstIterator</class>
    <class kind="class">ogdf::ListPure</class>
    <class kind="class">ogdf::List</class>
    <member kind="define">
      <type>#define</type>
      <name>forall_listiterators</name>
      <anchorfile>_list_8h.html</anchorfile>
      <anchor>6db96c2637572916f61ecbdbdc4e4dad</anchor>
      <arglist>(type, it, L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_rev_listiterators</name>
      <anchorfile>_list_8h.html</anchorfile>
      <anchor>e3a0f61bcb8625d351e9929522179b57</anchor>
      <arglist>(type, it, L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_nonconst_listiterators</name>
      <anchorfile>_list_8h.html</anchorfile>
      <anchor>9b0a1079b1aae05337315bd032d671f3</anchor>
      <arglist>(type, it, L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_rev_nonconst_listiterators</name>
      <anchorfile>_list_8h.html</anchorfile>
      <anchor>cbf5892eda77727eb58af2710a58fd40</anchor>
      <arglist>(type, it, L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f85e7675537034944e0c189869bfd8fc</anchor>
      <arglist>(ostream &amp;os, const ListPure&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>fc971e928a1e85b7e01277b46fe4d7ae</anchor>
      <arglist>(ostream &amp;os, const List&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2df6874f6c6ebeab4a5e473fc730eb99</anchor>
      <arglist>(ostream &amp;os, const ListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f40d7c4d0cd37b4db428880bda225efc</anchor>
      <arglist>(ostream &amp;os, const List&lt; E &gt; &amp;L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logger.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_logger_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Logger</class>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>math_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Math</class>
    <member kind="define">
      <type>#define</type>
      <name>DOUBLE_EPS</name>
      <anchorfile>math_8h.html</anchorfile>
      <anchor>ed65897bc877635b104e2ce04397f5c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memory.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>memory_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="struct">ogdf::MemElem</class>
    <class kind="class">ogdf::MemoryManager</class>
    <class kind="class">ogdf::SimpleMemoryManager</class>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_AVOID_MEMORY_CHECKING</name>
      <anchorfile>memory_8h.html</anchorfile>
      <anchor>df26db818919eabb825e272a74e06245</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_MAXMEM_SIZE</name>
      <anchorfile>memory_8h.html</anchorfile>
      <anchor>e750637453186e31f02b51f6c718431e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_NEW</name>
      <anchorfile>memory_8h.html</anchorfile>
      <anchor>df3d509e0c012c6757ee9206e0fc3804</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_NEW_DELETE</name>
      <anchorfile>memory_8h.html</anchorfile>
      <anchor>d2fabdf4321f9f5518b2f984a2349c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_MALLOC_NEW_DELETE</name>
      <anchorfile>memory_8h.html</anchorfile>
      <anchor>975f789ae251f8e19dd3d835f091ec89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MemElem *</type>
      <name>MemElemPtr</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>563f0e0c64215824126ba6c1e653dcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MemoryManager</type>
      <name>g_memory</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b827d9362ea54ea2ff9dc9a0ea5ee9f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MinHeap.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_min_heap_8h</filename>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Valued</class>
    <class kind="class">ogdf::MinHeap</class>
    <class kind="class">ogdf::Top10Heap</class>
  </compound>
  <compound kind="file">
    <name>Module.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_module_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Module</class>
  </compound>
  <compound kind="file">
    <name>ModuleOption.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_module_option_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ModuleOption</class>
  </compound>
  <compound kind="file">
    <name>NearestRectangleFinder.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_nearest_rectangle_finder_8h</filename>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NearestRectangleFinder</class>
    <class kind="struct">ogdf::NearestRectangleFinder::RectRegion</class>
    <class kind="struct">ogdf::NearestRectangleFinder::PairRectDist</class>
  </compound>
  <compound kind="file">
    <name>NodeArray.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_node_array_8h</filename>
    <includes id="_graph__d_8h" name="Graph_d.h" local="no" imported="no">ogdf/basic/Graph_d.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NodeArrayBase</class>
    <class kind="class">ogdf::NodeArray</class>
  </compound>
  <compound kind="file">
    <name>NodeComparer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_node_comparer_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NodeComparer</class>
  </compound>
  <compound kind="file">
    <name>NodeSet.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_node_set_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NodeSetSimple</class>
    <class kind="class">ogdf::NodeSetPure</class>
    <class kind="class">ogdf::NodeSet</class>
  </compound>
  <compound kind="file">
    <name>precondition.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>precondition_8h</filename>
    <includes id="_edge_router_8h" name="EdgeRouter.h" local="no" imported="no">ogdf/orthogonal/EdgeRouter.h</includes>
    <namespace>ogdf</namespace>
    <member kind="function">
      <type>bool</type>
      <name>dfsGenTreeRec</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f6ee2150aaf09aac5cd387e47db0bd7a</anchor>
      <arglist>(UMLGraph &amp;UG, EdgeArray&lt; bool &gt; &amp;used, NodeArray&lt; int &gt; &amp;hierNumber, int hierNum, node v, List&lt; edge &gt; &amp;fakedGens, bool fakeTree)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>firstOutGen</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4188afdc21631eee08e89084923f1786</anchor>
      <arglist>(UMLGraph &amp;UG, node v, EdgeArray&lt; bool &gt; &amp;used)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dfsGenTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3d41690c264fc2441f388ff6b61befed</anchor>
      <arglist>(UMLGraph &amp;UG, List&lt; edge &gt; &amp;fakedGens, bool fakeTree)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Queue.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_queue_8h</filename>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::QueuePure</class>
    <class kind="class">ogdf::Queue</class>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d0210e921399f4025d7dfc7d8f14599e</anchor>
      <arglist>(ostream &amp;os, const QueuePure&lt; E &gt; &amp;Q, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0a0118af79fc3f7b183c046cfe9bbcdf</anchor>
      <arglist>(ostream &amp;os, const Queue&lt; E &gt; &amp;Q, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8831020d7e61da3bcadbd2736c836986</anchor>
      <arglist>(ostream &amp;os, const QueuePure&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1f56f684f08505da35777bba5a92ac90</anchor>
      <arglist>(ostream &amp;os, const Queue&lt; E &gt; &amp;Q)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simple_graph_alg.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>simple__graph__alg_8h</filename>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_stack_8h" name="Stack.h" local="no" imported="no">ogdf/basic/Stack.h</includes>
    <namespace>ogdf</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isLoopFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>635b08778f71b22bfe54e97731c335e6</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLoopFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c121413fd1b922cef65a6872b56d1a23</anchor>
      <arglist>(Graph &amp;G, NODELIST &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLoopFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f847be4652fe332110999d0d9d1751a2</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallelFreeSort</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6dde8fe4b58e0aa47a33a469937ede63</anchor>
      <arglist>(const Graph &amp;G, SListPure&lt; edge &gt; &amp;edges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallelFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>20070ca58c7ecd22f6382eae50674c62</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParallelEdges</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45cbd7c8e6ed90a40bdd61efe1161e8a</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>60313b0ed11e766f1d22e0b4893e2d03</anchor>
      <arglist>(Graph &amp;G, EDGELIST &amp;parallelEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d4412ce4c5cc2df1bbfc961c7129a682</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallelFreeSortUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7019c6e183fa2084a33b9c0e90f8359c</anchor>
      <arglist>(const Graph &amp;G, SListPure&lt; edge &gt; &amp;edges, EdgeArray&lt; int &gt; &amp;minIndex, EdgeArray&lt; int &gt; &amp;maxIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>045ca949ad54197c383a02c5b69b7d30</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParallelEdgesUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6a1c50ef11f22ddf3512044e81f455e5</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>71cb022f4a7b73921f7fa9488b0e9f38</anchor>
      <arglist>(Graph &amp;G, EDGELIST &amp;parallelEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>49c6516ddc2a7fced4318e372209fe4c</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>690da8797ff65cd27448de8fbb0e553a</anchor>
      <arglist>(Graph &amp;G, EDGELIST &amp;parallelEdges, EdgeArray&lt; int &gt; &amp;cardPositive, EdgeArray&lt; int &gt; &amp;cardNegative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b074ea9d5aeed62384055b2ae08a6598</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; EDGELIST &gt; &amp;parallelEdges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimple</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9f6828cc879f647de3254e0444ebd5cf</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSimple</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3f31b389ffb08b4a2df7525152c80bb1</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimpleUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9c303747c8447bffef52c67eb94597df</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSimpleUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e8923c939cd710fd01aebcbed9246610</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>58d3a541294790f845eedb3f67040a6d</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45ad040cb847b7c90e477a380133bf1a</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;added)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1957f900d61dfd83c7e7caf651008233</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectedComponents</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0504711e547b0febf00a261ce27ae5f1</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectedIsolatedComponents</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c63c344ed6d409cea63bdf7e1043bc1e</anchor>
      <arglist>(const Graph &amp;G, List&lt; node &gt; &amp;isolated, NodeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>17796203f9633f8ccb1055fd07f17d3f</anchor>
      <arglist>(const Graph &amp;G, node &amp;cutVertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>fd4e07c4a9cd4f47ce1c8d8d90ab1251</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2dce4d57d715ebfa824144260ef304c9</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;added)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6eee1a780cacf210168b173fb365454e</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biconnectedComponents</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>af2c637d8c661da9bd055c341755f782</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7ac1a5296c11fe2e3f78c532b1795a2c</anchor>
      <arglist>(const Graph &amp;G, node &amp;s1, node &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e85e75170e805acdcffc9db7f1d1a589</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnectedPrimitive</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d2e9d27668720ede5601267651af09f6</anchor>
      <arglist>(const Graph &amp;G, node &amp;s1, node &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnectedPrimitive</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3a72f1e5aa47d941cdaf5453c3f0a139</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclic</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0c1fa6da476915d4ed472b9981cbf7e4</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;backedges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclic</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>86fb35f1b4a467eca431d16bd0b74dbf</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclicUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e3a13393936c7d2d89acc8c8a5ccdcba</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;backedges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclicUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0a9d98170d26d6e272e296097ba93bb7</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAcyclic</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d4149a9f4ab6828c1c247b635186533f</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAcyclicByReverse</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6528736a9011b4183baccc1e7dc0b997</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSource</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9a078b620b0f3fd05431360cba9ca8df</anchor>
      <arglist>(const Graph &amp;G, node &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSource</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1093534f778c44baac34cfbe15fc065f</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSink</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b9d243c70b5df0eebd2ffb9361726f30</anchor>
      <arglist>(const Graph &amp;G, node &amp;sink)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSink</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>016223e16b83facc7f4d370fd1c9e52e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b58bd776a9214de06afa95773c7cd916</anchor>
      <arglist>(const Graph &amp;G, node &amp;s, node &amp;t, edge &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8de32e861029feba3e1097ab8a048701</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>topologicalNumbering</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>de15a6badfff6a85e0f8bcd7cdeb7cb1</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeForest</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>07fa8e31ee16a5c08919b7f072219142</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForest</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4f18a35b415469dc04609034408c8b77</anchor>
      <arglist>(const Graph &amp;G, List&lt; node &gt; &amp;roots)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForest</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>db239ab1dc490cda86a8831a25fee026</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e05f3d6a608007a3c38ec1e8d038fccd</anchor>
      <arglist>(const Graph &amp;G, node &amp;root)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b70eeb4c70de173d2156b0b31f9064f5</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Skiplist.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_skiplist_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Skiplist</class>
    <class kind="class">ogdf::Skiplist::Element</class>
    <class kind="class">ogdf::SkiplistIterator</class>
  </compound>
  <compound kind="file">
    <name>SList.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_s_list_8h</filename>
    <includes id="list__templates_8h" name="list_templates.h" local="no" imported="no">ogdf/internal/basic/list_templates.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SListElement</class>
    <class kind="class">ogdf::SListIterator</class>
    <class kind="class">ogdf::SListConstIterator</class>
    <class kind="class">ogdf::SListPure</class>
    <class kind="class">ogdf::SList</class>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a83028aee00eca47375a64e8e69f4519</anchor>
      <arglist>(ostream &amp;os, const SListPure&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9b6dc89cb3dd48d5af226d1a619eb7b1</anchor>
      <arglist>(ostream &amp;os, const SList&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c1d0ae4f4c3d5197f2d88306cae4ca44</anchor>
      <arglist>(ostream &amp;os, const SListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7a4ac582355a302cb113718e0879b4e2</anchor>
      <arglist>(ostream &amp;os, const SList&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f88f8925170eacddeb60fa6f17ee8643</anchor>
      <arglist>(Array&lt; E &gt; &amp;a, int min, int max, BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Stack.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_stack_8h</filename>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::StackPure</class>
    <class kind="class">ogdf::Stack</class>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>59ac2816707760145f1505d3d9b3f561</anchor>
      <arglist>(ostream &amp;os, const StackPure&lt; E &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>81f3fa74d192b905bc0461c2a9c613b8</anchor>
      <arglist>(ostream &amp;os, const Stack&lt; E &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a07ba0c59ce34b9a0baf1faf430280c5</anchor>
      <arglist>(ostream &amp;os, const StackPure&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d8e2506d376b2302d15e37cdc1383536</anchor>
      <arglist>(ostream &amp;os, const Stack&lt; E &gt; &amp;S)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>String.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_string_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <includes id="_hashing_8h" name="Hashing.h" local="no" imported="no">ogdf/basic/Hashing.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::String</class>
    <class kind="class">ogdf::DefHashFunc&lt; String &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>OGDF_STRING_BUFFER_SIZE</name>
      <anchorfile>_string_8h.html</anchorfile>
      <anchor>4819640c8984a47bc51fe38824e17cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2f6fce75560bd9f66a536cfc6d4198ff</anchor>
      <arglist>(ostream &amp;os, const String &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timeouter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_timeouter_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Timeouter</class>
  </compound>
  <compound kind="file">
    <name>TopologyModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_topology_module_8h</filename>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_edge_comparer_8h" name="EdgeComparer.h" local="no" imported="no">ogdf/basic/EdgeComparer.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::TopologyModule</class>
    <class kind="class">ogdf::PointComparer</class>
    <class kind="class">ogdf::EdgeLeg</class>
  </compound>
  <compound kind="file">
    <name>tuples.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>tuples_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <includes id="_hashing_8h" name="Hashing.h" local="no" imported="no">ogdf/basic/Hashing.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Tuple2</class>
    <class kind="class">ogdf::Tuple3</class>
    <class kind="class">ogdf::Tuple4</class>
    <class kind="class">ogdf::HashFuncTuple</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>00bdc719cb500a10ab5c5fa86fff1541</anchor>
      <arglist>(const Tuple2&lt; E1, E2 &gt; &amp;t1, const Tuple2&lt; E1, E2 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b7e5b65e96a4c1932d481734047464dd</anchor>
      <arglist>(const Tuple2&lt; E1, E2 &gt; &amp;t1, const Tuple2&lt; E1, E2 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>135ce7ce29b9ce4b1317e94d2c5d29d5</anchor>
      <arglist>(ostream &amp;os, const Tuple2&lt; E1, E2 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>251e8a73adf2aa3c45b76b3a2e6c39a4</anchor>
      <arglist>(const Tuple3&lt; E1, E2, E3 &gt; &amp;t1, const Tuple3&lt; E1, E2, E3 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f879e4b5ec2efd49add82bf1072dfae9</anchor>
      <arglist>(const Tuple3&lt; E1, E2, E3 &gt; &amp;t1, const Tuple3&lt; E1, E2, E3 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>47f449db652c71d21f2751462793d2e0</anchor>
      <arglist>(ostream &amp;os, const Tuple3&lt; E1, E2, E3 &gt; &amp;t3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>58445c86e214c3c201e83a7facc184bb</anchor>
      <arglist>(const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t1, const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e871f9cd9f5899800f75c88c7ca16b05</anchor>
      <arglist>(const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t1, const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d42b3de800a179837d9128bc939d4990</anchor>
      <arglist>(ostream &amp;os, const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t4)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UMLGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>_u_m_l_graph_8h</filename>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_adj_entry_array_8h" name="AdjEntryArray.h" local="no" imported="no">ogdf/basic/AdjEntryArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::UMLGraph</class>
    <class kind="class">ogdf::UMLGraph::AssociationClass</class>
    <class kind="class">ogdf::UMLGraph::CliqueInfo</class>
  </compound>
  <compound kind="file">
    <name>CconnectClusterPlanar.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cconnect_cluster_planar_8h</filename>
    <includes id="_planar_p_q_tree_8h" name="PlanarPQTree.h" local="no" imported="no">ogdf/internal/planarity/PlanarPQTree.h</includes>
    <includes id="_cluster_array_8h" name="ClusterArray.h" local="no" imported="no">ogdf/cluster/ClusterArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CconnectClusterPlanar</class>
  </compound>
  <compound kind="file">
    <name>CconnectClusterPlanarEmbed.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cconnect_cluster_planar_embed_8h</filename>
    <includes id="_embed_p_q_tree_8h" name="EmbedPQTree.h" local="no" imported="no">ogdf/internal/planarity/EmbedPQTree.h</includes>
    <includes id="_cluster_array_8h" name="ClusterArray.h" local="no" imported="no">ogdf/cluster/ClusterArray.h</includes>
    <includes id="_stack_8h" name="Stack.h" local="no" imported="no">ogdf/basic/Stack.h</includes>
    <includes id="_cluster_p_q_container_8h" name="ClusterPQContainer.h" local="no" imported="no">ogdf/internal/cluster/ClusterPQContainer.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CconnectClusterPlanarEmbed</class>
  </compound>
  <compound kind="file">
    <name>ClusterArray.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_array_8h</filename>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterArrayBase</class>
    <class kind="class">ogdf::ClusterArray</class>
  </compound>
  <compound kind="file">
    <name>ClusterGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_graph_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_stack_8h" name="Stack.h" local="no" imported="no">ogdf/basic/Stack.h</includes>
    <includes id="_graph_observer_8h" name="GraphObserver.h" local="no" imported="no">ogdf/basic/GraphObserver.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterElement</class>
    <class kind="class">ogdf::ClusterGraph</class>
    <member kind="define">
      <type>#define</type>
      <name>forall_cluster_adj</name>
      <anchorfile>_cluster_graph_8h.html</anchorfile>
      <anchor>271001265c1d1427ca1a9ae202c1677d</anchor>
      <arglist>(adj, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_cluster_rev_adj</name>
      <anchorfile>_cluster_graph_8h.html</anchorfile>
      <anchor>412f16659dbb255c5e63d4c52e38f90b</anchor>
      <arglist>(adj, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_cluster_adj_edges</name>
      <anchorfile>_cluster_graph_8h.html</anchorfile>
      <anchor>9d12289293121a5c8c55b392f1ce3335</anchor>
      <arglist>(e, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_clusters</name>
      <anchorfile>_cluster_graph_8h.html</anchorfile>
      <anchor>bcd4c74f454d781828ce6322b4e86e96</anchor>
      <arglist>(c, C)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forall_postOrderClusters</name>
      <anchorfile>_cluster_graph_8h.html</anchorfile>
      <anchor>49ae24c8fab3140a84c359291c84b09c</anchor>
      <arglist>(c, C)</arglist>
    </member>
    <member kind="typedef">
      <type>ClusterElement *</type>
      <name>cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4cc62da82e411458d24d4dc76c9261c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_entries_of_cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>85acbf9c05831043f0b283176e3453b7</anchor>
      <arglist>(ListIterator&lt; adjEntry &gt; &amp;it, adjEntry &amp;adj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_edges_of_cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>743d43b4bf399cdf151b097e0d193bf4</anchor>
      <arglist>(ListIterator&lt; adjEntry &gt; &amp;it, edge &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_edges_of_cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f65e491cbb9378df721b7d95f61d5e14</anchor>
      <arglist>(adjEntry &amp;adj, edge &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c61c61e8b4d4978934167b59a12f4840</anchor>
      <arglist>(ostream &amp;os, ogdf::cluster c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterGraphAttributes.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_graph_attributes_8h</filename>
    <includes id="_hash_array_8h" name="HashArray.h" local="no" imported="no">ogdf/basic/HashArray.h</includes>
    <includes id="_cluster_array_8h" name="ClusterArray.h" local="no" imported="no">ogdf/cluster/ClusterArray.h</includes>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterInfo</class>
    <class kind="class">ogdf::ClusterGraphAttributes</class>
  </compound>
  <compound kind="file">
    <name>ClusterGraphCopyAttributes.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_graph_copy_attributes_8h</filename>
    <includes id="_extended_nesting_graph_8h" name="ExtendedNestingGraph.h" local="no" imported="no">ogdf/layered/ExtendedNestingGraph.h</includes>
    <includes id="_cluster_graph_attributes_8h" name="ClusterGraphAttributes.h" local="no" imported="no">ogdf/cluster/ClusterGraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterGraphCopyAttributes</class>
  </compound>
  <compound kind="file">
    <name>ClusterGraphObserver.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_graph_observer_8h</filename>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterGraphObserver</class>
  </compound>
  <compound kind="file">
    <name>ClusterOrthoLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_ortho_layout_8h</filename>
    <includes id="_layout_cluster_plan_rep_module_8h" name="LayoutClusterPlanRepModule.h" local="no" imported="no">ogdf/module/LayoutClusterPlanRepModule.h</includes>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_cluster_plan_rep_8h" name="ClusterPlanRep.h" local="no" imported="no">ogdf/cluster/ClusterPlanRep.h</includes>
    <includes id="_c_planar_edge_inserter_8h" name="CPlanarEdgeInserter.h" local="no" imported="no">ogdf/cluster/CPlanarEdgeInserter.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterOrthoLayout</class>
  </compound>
  <compound kind="file">
    <name>ClusterOrthoShaper.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_ortho_shaper_8h</filename>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_cluster_plan_rep_8h" name="ClusterPlanRep.h" local="no" imported="no">ogdf/cluster/ClusterPlanRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterOrthoShaper</class>
    <member kind="enumeration">
      <name>bendCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b138f8d9773bc3a5c58241981f8a1ac97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>topDownCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b9eda9f92d026e06bf69fe958fc1e8ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottomUpCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b4d0ccba118d2ea2873096feb4d04670e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMaxBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2bdaf1df0113efb6495859be9f7f913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMinBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c78d47ee21a412a562aede4da602acc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterPlanarizationLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_planarization_layout_8h</filename>
    <includes id="_layout_cluster_plan_rep_module_8h" name="LayoutClusterPlanRepModule.h" local="no" imported="no">ogdf/module/LayoutClusterPlanRepModule.h</includes>
    <includes id="_c_c_layout_pack_module_8h" name="CCLayoutPackModule.h" local="no" imported="no">ogdf/module/CCLayoutPackModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterPlanarizationLayout</class>
    <class kind="struct">ogdf::ClusterPlanarizationLayout::ClusterPosition</class>
  </compound>
  <compound kind="file">
    <name>ClusterPlanRep.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_plan_rep_8h</filename>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <includes id="_cluster_graph_attributes_8h" name="ClusterGraphAttributes.h" local="no" imported="no">ogdf/cluster/ClusterGraphAttributes.h</includes>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <includes id="_cluster_array_8h" name="ClusterArray.h" local="no" imported="no">ogdf/cluster/ClusterArray.h</includes>
    <includes id="_hash_array_8h" name="HashArray.h" local="no" imported="no">ogdf/basic/HashArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterPlanRep</class>
  </compound>
  <compound kind="file">
    <name>ClusterSet.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_cluster_set_8h</filename>
    <includes id="_cluster_array_8h" name="ClusterArray.h" local="no" imported="no">ogdf/cluster/ClusterArray.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterSetSimple</class>
    <class kind="class">ogdf::ClusterSetPure</class>
    <class kind="class">ogdf::ClusterSet</class>
  </compound>
  <compound kind="file">
    <name>CPlanarEdgeInserter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_c_planar_edge_inserter_8h</filename>
    <includes id="_cluster_plan_rep_8h" name="ClusterPlanRep.h" local="no" imported="no">ogdf/cluster/ClusterPlanRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NodePair</class>
    <class kind="class">ogdf::CPlanarEdgeInserter</class>
  </compound>
  <compound kind="file">
    <name>CPlanarSubClusteredGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>_c_planar_sub_clustered_graph_8h</filename>
    <includes id="_cluster_plan_rep_8h" name="ClusterPlanRep.h" local="no" imported="no">ogdf/cluster/ClusterPlanRep.h</includes>
    <includes id="_c_planar_sub_clustered_s_t_8h" name="CPlanarSubClusteredST.h" local="no" imported="no">ogdf/internal/cluster/CPlanarSubClusteredST.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CPlanarSubClusteredGraph</class>
  </compound>
  <compound kind="file">
    <name>BCTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_b_c_tree_8h</filename>
    <includes id="_bounded_stack_8h" name="BoundedStack.h" local="no" imported="no">ogdf/basic/BoundedStack.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BCTree</class>
  </compound>
  <compound kind="file">
    <name>DynamicBCTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_dynamic_b_c_tree_8h</filename>
    <includes id="_b_c_tree_8h" name="BCTree.h" local="no" imported="no">ogdf/decomposition/BCTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DynamicBCTree</class>
  </compound>
  <compound kind="file">
    <name>DynamicPlanarSPQRTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_dynamic_planar_s_p_q_r_tree_8h</filename>
    <includes id="_planar_s_p_q_r_tree_8h" name="PlanarSPQRTree.h" local="no" imported="no">ogdf/decomposition/PlanarSPQRTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DynamicPlanarSPQRTree</class>
  </compound>
  <compound kind="file">
    <name>DynamicSkeleton.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_dynamic_skeleton_8h</filename>
    <includes id="_skeleton_8h" name="Skeleton.h" local="no" imported="no">ogdf/decomposition/Skeleton.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DynamicSkeleton</class>
  </compound>
  <compound kind="file">
    <name>DynamicSPQRForest.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_dynamic_s_p_q_r_forest_8h</filename>
    <includes id="_dynamic_b_c_tree_8h" name="DynamicBCTree.h" local="no" imported="no">ogdf/decomposition/DynamicBCTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DynamicSPQRForest</class>
  </compound>
  <compound kind="file">
    <name>DynamicSPQRTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_dynamic_s_p_q_r_tree_8h</filename>
    <includes id="_s_p_q_r_tree_8h" name="SPQRTree.h" local="no" imported="no">ogdf/decomposition/SPQRTree.h</includes>
    <includes id="_dynamic_s_p_q_r_forest_8h" name="DynamicSPQRForest.h" local="no" imported="no">ogdf/decomposition/DynamicSPQRForest.h</includes>
    <includes id="_dynamic_skeleton_8h" name="DynamicSkeleton.h" local="no" imported="no">ogdf/decomposition/DynamicSkeleton.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DynamicSPQRTree</class>
  </compound>
  <compound kind="file">
    <name>PertinentGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_pertinent_graph_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PertinentGraph</class>
  </compound>
  <compound kind="file">
    <name>PlanarSPQRTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_planar_s_p_q_r_tree_8h</filename>
    <includes id="_s_p_q_r_tree_8h" name="SPQRTree.h" local="no" imported="no">ogdf/decomposition/SPQRTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarSPQRTree</class>
  </compound>
  <compound kind="file">
    <name>Skeleton.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_skeleton_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Skeleton</class>
  </compound>
  <compound kind="file">
    <name>SPQRTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_s_p_q_r_tree_8h</filename>
    <includes id="_skeleton_8h" name="Skeleton.h" local="no" imported="no">ogdf/decomposition/Skeleton.h</includes>
    <includes id="_pertinent_graph_8h" name="PertinentGraph.h" local="no" imported="no">ogdf/decomposition/PertinentGraph.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SPQRTree</class>
  </compound>
  <compound kind="file">
    <name>StaticPlanarSPQRTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_static_planar_s_p_q_r_tree_8h</filename>
    <includes id="_static_s_p_q_r_tree_8h" name="StaticSPQRTree.h" local="no" imported="no">ogdf/decomposition/StaticSPQRTree.h</includes>
    <includes id="_planar_s_p_q_r_tree_8h" name="PlanarSPQRTree.h" local="no" imported="no">ogdf/decomposition/PlanarSPQRTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::StaticPlanarSPQRTree</class>
  </compound>
  <compound kind="file">
    <name>StaticSkeleton.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_static_skeleton_8h</filename>
    <includes id="_skeleton_8h" name="Skeleton.h" local="no" imported="no">ogdf/decomposition/Skeleton.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::StaticSkeleton</class>
  </compound>
  <compound kind="file">
    <name>StaticSPQRTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>_static_s_p_q_r_tree_8h</filename>
    <includes id="_s_p_q_r_tree_8h" name="SPQRTree.h" local="no" imported="no">ogdf/decomposition/SPQRTree.h</includes>
    <includes id="_static_skeleton_8h" name="StaticSkeleton.h" local="no" imported="no">ogdf/decomposition/StaticSkeleton.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::StaticSPQRTree</class>
  </compound>
  <compound kind="file">
    <name>CoinTutteLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/energybased/</path>
    <filename>_coin_tutte_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">ogdf/basic/exceptions.h</includes>
    <includes id="coin_8h" name="coin.h" local="no" imported="no">ogdf/external/coin.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::TutteLayout</class>
  </compound>
  <compound kind="file">
    <name>DavidsonHarel.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/energybased/</path>
    <filename>_davidson_harel_8h</filename>
    <includes id="_energy_function_8h" name="EnergyFunction.h" local="no" imported="no">ogdf/internal/energybased/EnergyFunction.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DavidsonHarel</class>
  </compound>
  <compound kind="file">
    <name>DavidsonHarelLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/energybased/</path>
    <filename>_davidson_harel_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_davidson_harel_8h" name="DavidsonHarel.h" local="no" imported="no">ogdf/energybased/DavidsonHarel.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DavidsonHarelLayout</class>
  </compound>
  <compound kind="file">
    <name>FMMMLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/energybased/</path>
    <filename>_f_m_m_m_layout_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_fruchterman_reingold_8h" name="FruchtermanReingold.h" local="no" imported="no">ogdf/internal/energybased/FruchtermanReingold.h</includes>
    <includes id="_n_m_m_8h" name="NMM.h" local="no" imported="no">ogdf/internal/energybased/NMM.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FMMMLayout</class>
  </compound>
  <compound kind="file">
    <name>GEMLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/energybased/</path>
    <filename>_g_e_m_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GEMLayout</class>
  </compound>
  <compound kind="file">
    <name>SpringEmbedderFR.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/energybased/</path>
    <filename>_spring_embedder_f_r_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_array2_d_8h" name="Array2D.h" local="no" imported="no">ogdf/basic/Array2D.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SpringEmbedderFR</class>
  </compound>
  <compound kind="file">
    <name>abacus.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/external/</path>
    <filename>abacus_8h</filename>
  </compound>
  <compound kind="file">
    <name>coin.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/external/</path>
    <filename>coin_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CoinCallbacks</class>
    <class kind="class">ogdf::CoinManager</class>
    <member kind="define">
      <type>#define</type>
      <name>THROW_NO_CALLBACK_EXCEPTION</name>
      <anchorfile>coin_8h.html</anchorfile>
      <anchor>9a109098631417be4410355bc3c11a7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DinoLineBuffer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_dino_line_buffer_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DinoLineBufferPosition</class>
    <class kind="class">ogdf::DinoLineBuffer</class>
  </compound>
  <compound kind="file">
    <name>DinoTools.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_dino_tools_8h</filename>
    <includes id="_string_8h" name="String.h" local="no" imported="no">ogdf/basic/String.h</includes>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DinoTools</class>
  </compound>
  <compound kind="file">
    <name>DinoUmlDiagramGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_dino_uml_diagram_graph_8h</filename>
    <includes id="_dino_uml_model_graph_8h" name="DinoUmlModelGraph.h" local="no" imported="no">ogdf/fileformats/DinoUmlModelGraph.h</includes>
    <includes id="_string_8h" name="String.h" local="no" imported="no">ogdf/basic/String.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DinoUmlDiagramGraph</class>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7cd52bbdd721eed5cd314d7b53cd11b3</anchor>
      <arglist>(ostream &amp;os, const DinoUmlDiagramGraph &amp;diagramGraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DinoUmlModelGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_dino_uml_model_graph_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_string_8h" name="String.h" local="no" imported="no">ogdf/basic/String.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DinoUmlModelGraph</class>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>75afa72afd85792aa565e43d434b1066</anchor>
      <arglist>(ostream &amp;os, const DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DinoUmlToGraphConverter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_dino_uml_to_graph_converter_8h</filename>
    <includes id="_dino_xml_parser_8h" name="DinoXmlParser.h" local="no" imported="no">ogdf/fileformats/DinoXmlParser.h</includes>
    <includes id="_dino_uml_model_graph_8h" name="DinoUmlModelGraph.h" local="no" imported="no">ogdf/fileformats/DinoUmlModelGraph.h</includes>
    <includes id="_dino_uml_diagram_graph_8h" name="DinoUmlDiagramGraph.h" local="no" imported="no">ogdf/fileformats/DinoUmlDiagramGraph.h</includes>
    <includes id="_u_m_l_graph_8h" name="UMLGraph.h" local="no" imported="no">ogdf/basic/UMLGraph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DinoUmlToGraphConverter</class>
  </compound>
  <compound kind="file">
    <name>DinoXmlParser.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_dino_xml_parser_8h</filename>
    <includes id="_string_8h" name="String.h" local="no" imported="no">ogdf/basic/String.h</includes>
    <includes id="_hashing_8h" name="Hashing.h" local="no" imported="no">ogdf/basic/Hashing.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_dino_xml_scanner_8h" name="DinoXmlScanner.h" local="no" imported="no">ogdf/fileformats/DinoXmlScanner.h</includes>
    <namespace>ogdf</namespace>
    <class kind="struct">ogdf::XmlAttributeObject</class>
    <class kind="struct">ogdf::XmlTagObject</class>
    <class kind="class">ogdf::DinoXmlParser</class>
    <member kind="typedef">
      <type>HashElement&lt; String, int &gt;</type>
      <name>HashedString</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3a68abefed1296cc3e60abfe9a74df2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>40827d8e8c446de90edb8b0f721b12ce</anchor>
      <arglist>(ostream &amp;os, const DinoXmlParser &amp;parser)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DinoXmlScanner.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_dino_xml_scanner_8h</filename>
    <includes id="_dino_line_buffer_8h" name="DinoLineBuffer.h" local="no" imported="no">ogdf/fileformats/DinoLineBuffer.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DinoXmlScanner</class>
    <member kind="enumeration">
      <name>XmlToken</name>
      <anchor>822fe23411206276c7065c10a6689b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>openingBracket</name>
      <anchor>822fe23411206276c7065c10a6689b6c219a2212ec1ba0fdf94d52bb0554d18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>closingBracket</name>
      <anchor>822fe23411206276c7065c10a6689b6c08d3c0ae2e9f378b20038541b2238b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>questionMark</name>
      <anchor>822fe23411206276c7065c10a6689b6cf47cb6b5da8850ca599bd3b1d6c94587</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exclamationMark</name>
      <anchor>822fe23411206276c7065c10a6689b6ccd8ed505eb4dbe5c8213676550c240f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minus</name>
      <anchor>822fe23411206276c7065c10a6689b6ce7104b46d019abe16a02bf0b1e9d7fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>slash</name>
      <anchor>822fe23411206276c7065c10a6689b6c3f802a8add6aa8d3f188fe735e2a2462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>equalSign</name>
      <anchor>822fe23411206276c7065c10a6689b6c6d1f0bb601b497c768f006177b782bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>identifier</name>
      <anchor>822fe23411206276c7065c10a6689b6cbc5910090fa3a645dad67c17fc5d4278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>attributeValue</name>
      <anchor>822fe23411206276c7065c10a6689b6ce6d0b5dd9bf6b12473f6b0c385cd4e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quotedValue</name>
      <anchor>822fe23411206276c7065c10a6689b6c476f9b42fee48ed9d7abfed3b603634e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>endOfFile</name>
      <anchor>822fe23411206276c7065c10a6689b6cbaca55a3d517ebfd535ae54afc689d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidToken</name>
      <anchor>822fe23411206276c7065c10a6689b6c70f5a62fd7a8b628b796af8a87024b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noToken</name>
      <anchor>822fe23411206276c7065c10a6689b6c6f18c1c390af96ba6da01a5b73aef6de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GmlParser.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_gml_parser_8h</filename>
    <includes id="_hashing_8h" name="Hashing.h" local="no" imported="no">ogdf/basic/Hashing.h</includes>
    <includes id="_string_8h" name="String.h" local="no" imported="no">ogdf/basic/String.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <includes id="_cluster_graph_attributes_8h" name="ClusterGraphAttributes.h" local="no" imported="no">ogdf/cluster/ClusterGraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="struct">ogdf::GmlObject</class>
    <class kind="class">ogdf::GmlParser</class>
    <member kind="typedef">
      <type>HashElement&lt; String, int &gt; *</type>
      <name>GmlKey</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b78b4a76e5f947017e1cd6e60b4be1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GmlObjectType</name>
      <anchor>13e68833971aca99db78ac2d5f502428</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlIntValue</name>
      <anchor>13e68833971aca99db78ac2d5f50242896271babe3e09dd197dea3ea1706326f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlDoubleValue</name>
      <anchor>13e68833971aca99db78ac2d5f502428b7ae245ff0c0375bb5e1b1d7bc79af2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlStringValue</name>
      <anchor>13e68833971aca99db78ac2d5f502428b5dc7d42a2c3c4ec284ae304efc37994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlListBegin</name>
      <anchor>13e68833971aca99db78ac2d5f502428d86447f502f2ac91a955dc3e3f7c9be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlListEnd</name>
      <anchor>13e68833971aca99db78ac2d5f5024283e2d37726523f90951aebf23ae72cb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlKey</name>
      <anchor>13e68833971aca99db78ac2d5f502428e4dadf43c0c5b705873e67e76c6f6e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlEOF</name>
      <anchor>13e68833971aca99db78ac2d5f50242865851ccc44d28b116b1b017d980ef42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlError</name>
      <anchor>13e68833971aca99db78ac2d5f5024288cb6650ac092838f5dff61374bf98f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simple_graph_load.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>simple__graph__load_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <member kind="function">
      <type>bool</type>
      <name>loadRomeGraphStream</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0251deca0c357f1adb224a7662673c8a</anchor>
      <arglist>(Graph &amp;G, std::istream &amp;fileStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRomeGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f35ffbd30f1ae2d33eac287b386b8253</anchor>
      <arglist>(Graph &amp;G, const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadYGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>dee9d214a75eff6865c8931ca50f25df</anchor>
      <arglist>(Graph &amp;G, FILE *lineStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBenchHypergraphStream</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>950fc49911a45b32f5a5f03368155007</anchor>
      <arglist>(Graph &amp;G, List&lt; node &gt; &amp;hypernodes, List&lt; edge &gt; *shell, std::istream &amp;fileStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBenchHypergraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2af2966f8bbec24b4a1869bdd97e1ae8</anchor>
      <arglist>(Graph &amp;G, List&lt; node &gt; &amp;hypernodes, List&lt; edge &gt; *shell, const char *fileName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlObject.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_xml_object_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="struct">ogdf::XmlObject</class>
    <member kind="typedef">
      <type>HashElement&lt; String, int &gt; *</type>
      <name>XmlKey</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>91ca5a7e44559937ed7df5dc09ad8b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>XmlObjectType</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlIntValue</name>
      <anchor>ceff084728c3836eb417fc5c96d8eebabaad016e6b903469f8da1c415b67521f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlDoubleValue</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba38fa204b84ca75207c48cae0ccc87427</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlStringValue</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba831df7e94ba90705d3bcd16283e66b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlListBegin</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba0daddfc49ed31ee45aa81e4006e03411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlListEnd</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba4eef6fc45f920ecf5fa084c35f4505b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlBody</name>
      <anchor>ceff084728c3836eb417fc5c96d8eebaecb9b647e565888c0cde020b4ff9ace3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlKey</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba22187adc6e404064a0c3670a0db33a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlEOF</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba6b2e5559579a2614797c05886c5d6708</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlError</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba99873d3bbc613db0d484a67ba8431f00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlParser.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>_xml_parser_8h</filename>
    <includes id="_hashing_8h" name="Hashing.h" local="no" imported="no">ogdf/basic/Hashing.h</includes>
    <includes id="_string_8h" name="String.h" local="no" imported="no">ogdf/basic/String.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_xml_object_8h" name="XmlObject.h" local="no" imported="no">ogdf/fileformats/XmlObject.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::XmlParser</class>
  </compound>
  <compound kind="file">
    <name>CliqueFinder.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/graphalg/</path>
    <filename>_clique_finder_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CliqueFinder</class>
  </compound>
  <compound kind="file">
    <name>Clusterer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/graphalg/</path>
    <filename>_clusterer_8h</filename>
    <includes id="_clusterer_module_8h" name="ClustererModule.h" local="no" imported="no">ogdf/module/ClustererModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Clusterer</class>
  </compound>
  <compound kind="file">
    <name>GraphReduction.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/graphalg/</path>
    <filename>_graph_reduction_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GraphReduction</class>
  </compound>
  <compound kind="file">
    <name>MinCostFlowReinelt.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/graphalg/</path>
    <filename>_min_cost_flow_reinelt_8h</filename>
    <includes id="_min_cost_flow_module_8h" name="MinCostFlowModule.h" local="no" imported="no">ogdf/module/MinCostFlowModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MinCostFlowReinelt</class>
    <class kind="struct">ogdf::MinCostFlowReinelt::nodetype</class>
    <class kind="struct">ogdf::MinCostFlowReinelt::arctype</class>
  </compound>
  <compound kind="file">
    <name>MinimumCut.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/graphalg/</path>
    <filename>_minimum_cut_8h</filename>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <includes id="simple__graph__alg_8h" name="simple_graph_alg.h" local="no" imported="no">ogdf/basic/simple_graph_alg.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MinCut</class>
  </compound>
  <compound kind="file">
    <name>ShortestPathWithBFM.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/graphalg/</path>
    <filename>_shortest_path_with_b_f_m_8h</filename>
    <includes id="_shortest_path_module_8h" name="ShortestPathModule.h" local="no" imported="no">ogdf/module/ShortestPathModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ShortestPathWithBFM</class>
  </compound>
  <compound kind="file">
    <name>list_templates.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/basic/</path>
    <filename>list__templates_8h</filename>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <namespace>ogdf</namespace>
    <member kind="function">
      <type>void</type>
      <name>quicksortTemplate</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>82fdfb8f8e8eb3c571d8507cf7973726</anchor>
      <arglist>(LIST &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortTemplate</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>cf29b0a1d261a60b7d21ef472831015a</anchor>
      <arglist>(LIST &amp;L, COMPARER &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCTTemplate</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d991a95f2ba0fc14e6ee00a961cbe28f</anchor>
      <arglist>(LIST &amp;L, COMPARER &amp;comp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClusterPQContainer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/cluster/</path>
    <filename>_cluster_p_q_container_8h</filename>
    <includes id="_cconnect_cluster_planar_embed_8h" name="CconnectClusterPlanarEmbed.h" local="no" imported="no">ogdf/cluster/CconnectClusterPlanarEmbed.h</includes>
    <includes id="_embed_p_q_tree_8h" name="EmbedPQTree.h" local="no" imported="no">ogdf/internal/planarity/EmbedPQTree.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ClusterPQContainer</class>
  </compound>
  <compound kind="file">
    <name>CPlanarSubClusteredST.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/cluster/</path>
    <filename>_c_planar_sub_clustered_s_t_8h</filename>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <includes id="_cluster_array_8h" name="ClusterArray.h" local="no" imported="no">ogdf/cluster/ClusterArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CPlanarSubClusteredST</class>
  </compound>
  <compound kind="file">
    <name>AdjacencyOracle.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_adjacency_oracle_8h</filename>
    <includes id="_energy_function_8h" name="EnergyFunction.h" local="no" imported="no">ogdf/internal/energybased/EnergyFunction.h</includes>
    <includes id="_array2_d_8h" name="Array2D.h" local="no" imported="no">ogdf/basic/Array2D.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::AdjacencyOracle</class>
  </compound>
  <compound kind="file">
    <name>Attraction.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_attraction_8h</filename>
    <includes id="_node_pair_energy_8h" name="NodePairEnergy.h" local="no" imported="no">ogdf/internal/energybased/NodePairEnergy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Attraction</class>
    <member kind="define">
      <type>#define</type>
      <name>MULTIPLIER</name>
      <anchorfile>_attraction_8h.html</anchorfile>
      <anchor>b7ffb5a0ee7b15aecd0b32e84b93e2ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeAttributes.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_edge_attributes_8h</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EdgeAttributes</class>
  </compound>
  <compound kind="file">
    <name>EnergyFunction.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_energy_function_8h</filename>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EnergyFunction</class>
  </compound>
  <compound kind="file">
    <name>FruchtermanReingold.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_fruchterman_reingold_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_node_attributes_8h" name="NodeAttributes.h" local="no" imported="no">ogdf/internal/energybased/NodeAttributes.h</includes>
    <includes id="_edge_attributes_8h" name="EdgeAttributes.h" local="no" imported="no">ogdf/internal/energybased/EdgeAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FruchtermanReingold</class>
  </compound>
  <compound kind="file">
    <name>IntersectionRectangle.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_intersection_rectangle_8h</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">math.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::IntersectionRectangle</class>
    <class kind="class">ogdf::PointComparer</class>
    <member kind="define">
      <type>#define</type>
      <name>RECT_CMP_EPS</name>
      <anchorfile>_intersection_rectangle_8h.html</anchorfile>
      <anchor>ac72e1a74f5cbd64108bb2adb0201631</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NMM.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_n_m_m_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_array2_d_8h" name="Array2D.h" local="no" imported="no">ogdf/basic/Array2D.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_node_attributes_8h" name="NodeAttributes.h" local="no" imported="no">ogdf/internal/energybased/NodeAttributes.h</includes>
    <includes id="_edge_attributes_8h" name="EdgeAttributes.h" local="no" imported="no">ogdf/internal/energybased/EdgeAttributes.h</includes>
    <includes id="_quad_tree_n_m_8h" name="QuadTreeNM.h" local="no" imported="no">ogdf/internal/energybased/QuadTreeNM.h</includes>
    <includes id="_particle_info_8h" name="ParticleInfo.h" local="no" imported="no">ogdf/internal/energybased/ParticleInfo.h</includes>
    <includes id="_fruchterman_reingold_8h" name="FruchtermanReingold.h" local="no" imported="no">ogdf/internal/energybased/FruchtermanReingold.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NMM</class>
  </compound>
  <compound kind="file">
    <name>NodeAttributes.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_node_attributes_8h</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NodeAttributes</class>
  </compound>
  <compound kind="file">
    <name>NodePairEnergy.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_node_pair_energy_8h</filename>
    <includes id="_adjacency_oracle_8h" name="AdjacencyOracle.h" local="no" imported="no">ogdf/internal/energybased/AdjacencyOracle.h</includes>
    <includes id="_energy_function_8h" name="EnergyFunction.h" local="no" imported="no">ogdf/internal/energybased/EnergyFunction.h</includes>
    <includes id="_intersection_rectangle_8h" name="IntersectionRectangle.h" local="no" imported="no">ogdf/internal/energybased/IntersectionRectangle.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NodePairEnergy</class>
  </compound>
  <compound kind="file">
    <name>Overlap.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_overlap_8h</filename>
    <includes id="_node_pair_energy_8h" name="NodePairEnergy.h" local="no" imported="no">ogdf/internal/energybased/NodePairEnergy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Overlap</class>
  </compound>
  <compound kind="file">
    <name>ParticleInfo.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_particle_info_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ParticleInfo</class>
    <class kind="class">ogdf::ParticleInfoComparer</class>
  </compound>
  <compound kind="file">
    <name>Planarity.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_planarity_8h</filename>
    <includes id="_energy_function_8h" name="EnergyFunction.h" local="no" imported="no">ogdf/internal/energybased/EnergyFunction.h</includes>
    <includes id="_array2_d_8h" name="Array2D.h" local="no" imported="no">ogdf/basic/Array2D.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Planarity</class>
    <class kind="struct">ogdf::Planarity::ChangedCrossing</class>
  </compound>
  <compound kind="file">
    <name>PlanarityGrid.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_planarity_grid_8h</filename>
    <includes id="_energy_function_8h" name="EnergyFunction.h" local="no" imported="no">ogdf/internal/energybased/EnergyFunction.h</includes>
    <includes id="_uniform_grid_8h" name="UniformGrid.h" local="no" imported="no">ogdf/internal/energybased/UniformGrid.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarityGrid</class>
  </compound>
  <compound kind="file">
    <name>QuadTreeNM.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_quad_tree_n_m_8h</filename>
    <includes id="_quad_tree_node_n_m_8h" name="QuadTreeNodeNM.h" local="no" imported="no">ogdf/internal/energybased/QuadTreeNodeNM.h</includes>
    <includes id="_particle_info_8h" name="ParticleInfo.h" local="yes" imported="no">ParticleInfo.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::QuadTreeNM</class>
  </compound>
  <compound kind="file">
    <name>QuadTreeNodeNM.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_quad_tree_node_n_m_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_particle_info_8h" name="ParticleInfo.h" local="no" imported="no">ogdf/internal/energybased/ParticleInfo.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::QuadTreeNodeNM</class>
  </compound>
  <compound kind="file">
    <name>Repulsion.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_repulsion_8h</filename>
    <includes id="_node_pair_energy_8h" name="NodePairEnergy.h" local="no" imported="no">ogdf/internal/energybased/NodePairEnergy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Repulsion</class>
  </compound>
  <compound kind="file">
    <name>UniformGrid.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>_uniform_grid_8h</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="_array2_d_8h" name="Array2D.h" local="no" imported="no">ogdf/basic/Array2D.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_hash_array2_d_8h" name="HashArray2D.h" local="no" imported="no">ogdf/basic/HashArray2D.h</includes>
    <includes id="_intersection_rectangle_8h" name="IntersectionRectangle.h" local="no" imported="no">ogdf/internal/energybased/IntersectionRectangle.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::UniformGrid</class>
  </compound>
  <compound kind="file">
    <name>LPSolver_coin.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/lpsolver/</path>
    <filename>_l_p_solver__coin_8h</filename>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <includes id="coin_8h" name="coin.h" local="no" imported="no">ogdf/external/coin.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::LPSolver</class>
  </compound>
  <compound kind="file">
    <name>NodeInfo.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/orthogonal/</path>
    <filename>_node_info_8h</filename>
    <includes id="math_8h" name="math.h" local="no" imported="no">math.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">ogdf/basic/exceptions.h</includes>
    <includes id="_routing_channel_8h" name="RoutingChannel.h" local="no" imported="no">ogdf/internal/orthogonal/RoutingChannel.h</includes>
    <includes id="_minimum_edge_distances_8h" name="MinimumEdgeDistances.h" local="no" imported="no">ogdf/orthogonal/MinimumEdgeDistances.h</includes>
    <includes id="_adj_entry_array_8h" name="AdjEntryArray.h" local="no" imported="no">ogdf/basic/AdjEntryArray.h</includes>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_grid_layout_8h" name="GridLayout.h" local="no" imported="no">ogdf/basic/GridLayout.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NodeInfo</class>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6940e7da87d1e85aea44889f78a0a41e</anchor>
      <arglist>(ostream &amp;O, const NodeInfo &amp;inf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RoutingChannel.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/orthogonal/</path>
    <filename>_routing_channel_8h</filename>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::RoutingChannel</class>
    <class kind="struct">ogdf::RoutingChannel::vInfo</class>
  </compound>
  <compound kind="file">
    <name>BoyerMyrvoldInit.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_boyer_myrvold_init_8h</filename>
    <includes id="_boyer_myrvold_planar_8h" name="BoyerMyrvoldPlanar.h" local="no" imported="no">ogdf/internal/planarity/BoyerMyrvoldPlanar.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BoyerMyrvoldInit</class>
    <class kind="class">ogdf::BucketLowPoint</class>
  </compound>
  <compound kind="file">
    <name>BoyerMyrvoldPlanar.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_boyer_myrvold_planar_8h</filename>
    <includes id="_graph__d_8h" name="Graph_d.h" local="no" imported="no">ogdf/basic/Graph_d.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_stack_8h" name="Stack.h" local="no" imported="no">ogdf/basic/Stack.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BoyerMyrvoldPlanar</class>
    <member kind="enumeration">
      <name>enumDirection</name>
      <anchor>4b216693fd93da9ed00497c9f795c79a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCW</name>
      <anchor>4b216693fd93da9ed00497c9f795c79ae7bf42e57859ea732889c78228cb960f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CW</name>
      <anchor>4b216693fd93da9ed00497c9f795c79a668ae5437fe32013130a6310eaae15be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>enumEdgeType</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_UNDEFINED</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71ee8ab991502569243c8a2c55479d08c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_SELFLOOP</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71ec3a2c4196e7564c07c6408bf54427a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_BACK</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71ebaf1cb0d39de7a2eb3927c709b386b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_DFS</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e36af3cc8498e1874f0dbe87a7ba07093</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_DFS_PARALLEL</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e3736282cade7d4d0ce4cb67a61d51455</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_BACK_DELETED</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e7f46c3620545f56b30b233837024c4c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectedSubgraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_connected_subgraph_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ConnectedSubgraph</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMaxFaceBiconnectedGraphs.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_embedder_max_face_biconnected_graphs_8h</filename>
    <includes id="_static_s_p_q_r_tree_8h" name="StaticSPQRTree.h" local="no" imported="no">ogdf/decomposition/StaticSPQRTree.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_planar_module_8h" name="PlanarModule.h" local="no" imported="no">ogdf/planarity/PlanarModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMaxFaceBiconnectedGraphs</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMaxFaceBiconnectedGraphsLayers.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_embedder_max_face_biconnected_graphs_layers_8h</filename>
    <includes id="_static_s_p_q_r_tree_8h" name="StaticSPQRTree.h" local="no" imported="no">ogdf/decomposition/StaticSPQRTree.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_planar_module_8h" name="PlanarModule.h" local="no" imported="no">ogdf/planarity/PlanarModule.h</includes>
    <includes id="_shortest_path_with_b_f_m_8h" name="ShortestPathWithBFM.h" local="no" imported="no">ogdf/graphalg/ShortestPathWithBFM.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMaxFaceBiconnectedGraphsLayers</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMDMFLengthAttribute.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_embedder_m_d_m_f_length_attribute_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::mdmf_la</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>09aee8f3eaa967c65e38ec3165716587</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>25d342877a8ccea103529ebf66f72c73</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d70129ca0fb843ec8664017fc232c53d</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>916ba54c228864960538764af05632cd</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8307d73219e836c28b5e1b4ab20ab8fb</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>20d0a1e3ce57ee17b17b8fdacd0f2389</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator+</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>16edbfa415d3ef7bfb9c521464bd52e3</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator-</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>50aaad3df14194836a0945f4cad39113</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator+=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d4d04dde8ce5e43d849ef23abfce3691</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator-=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a9e3476b537c59717facc895fee5149c</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>69f6f7cf158a40b3385b152ad73926cf</anchor>
      <arglist>(ostream &amp;s, const mdmf_la &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EmbedIndicator.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_embed_indicator_8h</filename>
    <includes id="_p_q_node_8h" name="PQNode.h" local="no" imported="no">ogdf/internal/planarity/PQNode.h</includes>
    <includes id="_p_q_node_key_8h" name="PQNodeKey.h" local="no" imported="no">ogdf/internal/planarity/PQNodeKey.h</includes>
    <includes id="_p_q_internal_key_8h" name="PQInternalKey.h" local="no" imported="no">ogdf/internal/planarity/PQInternalKey.h</includes>
    <includes id="_embed_key_8h" name="EmbedKey.h" local="no" imported="no">ogdf/internal/planarity/EmbedKey.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedIndicator</class>
    <member kind="define">
      <type>#define</type>
      <name>INDICATOR</name>
      <anchorfile>_embed_indicator_8h.html</anchorfile>
      <anchor>a74abc3d3b99b233cc079340e448d266</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IND_CAT</name>
      <anchorfile>_embed_indicator_8h.html</anchorfile>
      <anchor>7b3c0dd3fa1fc37a99ed1aa58f51e5f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EmbedKey.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_embed_key_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::indInfo</class>
    <class kind="class">ogdf::embedKey</class>
  </compound>
  <compound kind="file">
    <name>EmbedPQTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_embed_p_q_tree_8h</filename>
    <includes id="_p_q_tree_8h" name="PQTree.h" local="no" imported="no">ogdf/internal/planarity/PQTree.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="_planar_leaf_key_8h" name="PlanarLeafKey.h" local="no" imported="no">ogdf/internal/planarity/PlanarLeafKey.h</includes>
    <includes id="_embed_indicator_8h" name="EmbedIndicator.h" local="no" imported="no">ogdf/internal/planarity/EmbedIndicator.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedPQTree</class>
    <member kind="typedef">
      <type>PQBasicKey&lt; edge, indInfo *, bool &gt; *</type>
      <name>PtrPQBasicKeyEIB</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>67c807916864c686b00a9458fcbfd64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlanarLeafKey&lt; indInfo * &gt; *</type>
      <name>PtrPlanarLeafKeyI</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ff517b8213ecb8cacbf1c4e337d837ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPQBasicKeyEIB &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0666aac676835169de66dce8ef38f8c8</anchor>
      <arglist>(const PtrPQBasicKeyEIB *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPlanarLeafKeyI &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ec4054bda2c4347e957123ca2649d33a</anchor>
      <arglist>(const PtrPlanarLeafKeyI *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FindKuratowskis.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_find_kuratowskis_8h</filename>
    <includes id="_boyer_myrvold_planar_8h" name="BoyerMyrvoldPlanar.h" local="no" imported="no">ogdf/internal/planarity/BoyerMyrvoldPlanar.h</includes>
    <namespace>ogdf</namespace>
    <class kind="struct">ogdf::ExternE</class>
    <class kind="struct">ogdf::WInfo</class>
    <class kind="class">ogdf::KuratowskiStructure</class>
    <class kind="class">ogdf::FindKuratowskis</class>
    <member kind="define">
      <type>#define</type>
      <name>KURATOWSKI_FILE</name>
      <anchorfile>_find_kuratowskis_8h.html</anchorfile>
      <anchor>d3b30ce8a588bde0ec50b0f00b504997</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MaxSequencePQTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_max_sequence_p_q_tree_8h</filename>
    <includes id="_string_8h" name="String.h" local="no" imported="no">string.h</includes>
    <includes id="_p_q_tree_8h" name="PQTree.h" local="no" imported="no">ogdf/internal/planarity/PQTree.h</includes>
    <includes id="_p_q_leaf_key_8h" name="PQLeafKey.h" local="no" imported="no">ogdf/internal/planarity/PQLeafKey.h</includes>
    <includes id="wha_info_8h" name="whaInfo.h" local="no" imported="no">ogdf/internal/planarity/whaInfo.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MaxSequencePQTree</class>
    <member kind="define">
      <type>#define</type>
      <name>ELIMINATED</name>
      <anchorfile>_max_sequence_p_q_tree_8h.html</anchorfile>
      <anchor>8452349fc697d07a4c89bd8000af9206</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WHA_DELETE</name>
      <anchorfile>_max_sequence_p_q_tree_8h.html</anchorfile>
      <anchor>9788870537a919262d22a05f14a10ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PERTROOT</name>
      <anchorfile>_max_sequence_p_q_tree_8h.html</anchorfile>
      <anchor>b8dfbbcf788690f713ea4bad39bdf16a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PlanarLeafKey.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_planar_leaf_key_8h</filename>
    <includes id="_p_q_leaf_key_8h" name="PQLeafKey.h" local="no" imported="no">ogdf/internal/planarity/PQLeafKey.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarLeafKey</class>
  </compound>
  <compound kind="file">
    <name>PlanarPQTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_planar_p_q_tree_8h</filename>
    <includes id="_p_q_tree_8h" name="PQTree.h" local="no" imported="no">ogdf/internal/planarity/PQTree.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="_planar_leaf_key_8h" name="PlanarLeafKey.h" local="no" imported="no">ogdf/internal/planarity/PlanarLeafKey.h</includes>
    <includes id="_embed_key_8h" name="EmbedKey.h" local="no" imported="no">ogdf/internal/planarity/EmbedKey.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarPQTree</class>
  </compound>
  <compound kind="file">
    <name>PlanarSubgraphPQTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_planar_subgraph_p_q_tree_8h</filename>
    <includes id="_p_q_tree_8h" name="PQTree.h" local="no" imported="no">ogdf/internal/planarity/PQTree.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="_planar_leaf_key_8h" name="PlanarLeafKey.h" local="no" imported="no">ogdf/internal/planarity/PlanarLeafKey.h</includes>
    <includes id="_max_sequence_p_q_tree_8h" name="MaxSequencePQTree.h" local="no" imported="no">ogdf/internal/planarity/MaxSequencePQTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarSubgraphPQTree</class>
    <member kind="typedef">
      <type>PQLeafKey&lt; edge, whaInfo *, bool &gt; *</type>
      <name>PtrPQLeafKeyEWB</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>21cf937583951c19c69c92bd74e05937</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlanarLeafKey&lt; whaInfo * &gt; *</type>
      <name>PtrPlanarLeafKeyW</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2fff5263950481b322b8e013eb98de96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPQLeafKeyEWB &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0637cc19c88130d1aaa95a926e661a3e</anchor>
      <arglist>(const PtrPQLeafKeyEWB *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPlanarLeafKeyW &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ae32d1ea076545e313b6aca915a4fa10</anchor>
      <arglist>(const PtrPlanarLeafKeyW *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PQBasicKey.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_basic_key_8h</filename>
    <includes id="_p_q_basic_key_root_8h" name="PQBasicKeyRoot.h" local="no" imported="no">ogdf/internal/planarity/PQBasicKeyRoot.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQBasicKey</class>
  </compound>
  <compound kind="file">
    <name>PQBasicKeyRoot.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_basic_key_root_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQBasicKeyRoot</class>
  </compound>
  <compound kind="file">
    <name>PQInternalKey.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_internal_key_8h</filename>
    <includes id="_p_q_basic_key_8h" name="PQBasicKey.h" local="no" imported="no">ogdf/internal/planarity/PQBasicKey.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQInternalKey</class>
  </compound>
  <compound kind="file">
    <name>PQInternalNode.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_internal_node_8h</filename>
    <includes id="_p_q_node_8h" name="PQNode.h" local="no" imported="no">ogdf/internal/planarity/PQNode.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQInternalNode</class>
  </compound>
  <compound kind="file">
    <name>PQLeaf.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_leaf_8h</filename>
    <includes id="_p_q_node_8h" name="PQNode.h" local="no" imported="no">ogdf/internal/planarity/PQNode.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQLeaf</class>
  </compound>
  <compound kind="file">
    <name>PQLeafKey.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_leaf_key_8h</filename>
    <includes id="_p_q_basic_key_8h" name="PQBasicKey.h" local="no" imported="no">ogdf/internal/planarity/PQBasicKey.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQLeafKey</class>
  </compound>
  <compound kind="file">
    <name>PQNode.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_node_8h</filename>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_p_q_node_root_8h" name="PQNodeRoot.h" local="no" imported="no">ogdf/internal/planarity/PQNodeRoot.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQNode</class>
    <member kind="define">
      <type>#define</type>
      <name>P_NODE</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>f25a1bbfa0712a6bf624b69697d94bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Q_NODE</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>41aa7a1ef566613807d726353033a150</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEAF</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>62e90d5c1b5aad7ab60823163cc2f2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EMPTY</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>2b7cf2a3641be7b89138615764d60ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARTIAL</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>bf4b6a83d9763fc6ae16c3e15dcf7a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FULL</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>7b05b8118861711fd8573e92759bbc34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PERTINENT</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>2a419848938849c2681897bc51020e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TO_BE_DELETED</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>0dfc74b14613ef2d0add356228e8a68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNMARKED</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>a24991bf5a19de575eb94e529b0bb3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUEUED</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>ebff654fdb9638ed8762863b9b776e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BLOCKED</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>48f6457243719e7031768d4100741159</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNBLOCKED</name>
      <anchorfile>_p_q_node_8h.html</anchorfile>
      <anchor>ca45c293df99218b48d9e242107d79db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SibDirection</name>
      <anchor>82ba1243383d7a4d390329dbddf03171</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODIR</name>
      <anchor>82ba1243383d7a4d390329dbddf03171588e02f97b61d802762753c3be242b0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT</name>
      <anchor>82ba1243383d7a4d390329dbddf03171705615b3d8ecfa91cc3cb251399655ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT</name>
      <anchor>82ba1243383d7a4d390329dbddf03171b2bbd1420e64d1fdeee7224f9505c7e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PQNodeKey.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_node_key_8h</filename>
    <includes id="_p_q_basic_key_8h" name="PQBasicKey.h" local="no" imported="no">ogdf/internal/planarity/PQBasicKey.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQNodeKey</class>
  </compound>
  <compound kind="file">
    <name>PQNodeRoot.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_node_root_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQNodeRoot</class>
  </compound>
  <compound kind="file">
    <name>PQTree.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_tree_8h</filename>
    <includes id="_string_8h" name="String.h" local="no" imported="no">string.h</includes>
    <includes id="_stack_8h" name="Stack.h" local="no" imported="no">ogdf/basic/Stack.h</includes>
    <includes id="_queue_8h" name="Queue.h" local="no" imported="no">ogdf/basic/Queue.h</includes>
    <includes id="_array_8h" name="Array.h" local="no" imported="no">ogdf/basic/Array.h</includes>
    <includes id="_p_q_tree_root_8h" name="PQTreeRoot.h" local="no" imported="no">ogdf/internal/planarity/PQTreeRoot.h</includes>
    <includes id="_p_q_node_8h" name="PQNode.h" local="no" imported="no">ogdf/internal/planarity/PQNode.h</includes>
    <includes id="_p_q_internal_node_8h" name="PQInternalNode.h" local="no" imported="no">ogdf/internal/planarity/PQInternalNode.h</includes>
    <includes id="_p_q_leaf_8h" name="PQLeaf.h" local="no" imported="no">ogdf/internal/planarity/PQLeaf.h</includes>
    <includes id="_p_q_leaf_key_8h" name="PQLeafKey.h" local="no" imported="no">ogdf/internal/planarity/PQLeafKey.h</includes>
    <includes id="_p_q_internal_key_8h" name="PQInternalKey.h" local="no" imported="no">ogdf/internal/planarity/PQInternalKey.h</includes>
    <includes id="_p_q_node_key_8h" name="PQNodeKey.h" local="no" imported="no">ogdf/internal/planarity/PQNodeKey.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQTree</class>
    <member kind="define">
      <type>#define</type>
      <name>INFOSIZE</name>
      <anchorfile>_p_q_tree_8h.html</anchorfile>
      <anchor>9ac1d4b8b1df18ab07c5a0d4fb7e1526</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>P_NODE_CAT</name>
      <anchorfile>_p_q_tree_8h.html</anchorfile>
      <anchor>8f98497181d31d1ad24a84e8acae69c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Q_NODE_CAT</name>
      <anchorfile>_p_q_tree_8h.html</anchorfile>
      <anchor>80f98981de24aeda2b47ba23207b5d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEAF_CAT</name>
      <anchorfile>_p_q_tree_8h.html</anchorfile>
      <anchor>c2d736d3d436f4d76c2a90a0467e4012</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEAF_FULL_CAT</name>
      <anchorfile>_p_q_tree_8h.html</anchorfile>
      <anchor>676d773d761fc81a43407fb203d95bed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PQTreeRoot.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>_p_q_tree_root_8h</filename>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PQTreeRoot</class>
  </compound>
  <compound kind="file">
    <name>whaInfo.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>wha_info_8h</filename>
    <includes id="_p_q_node_root_8h" name="PQNodeRoot.h" local="no" imported="no">ogdf/internal/planarity/PQNodeRoot.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::whaInfo</class>
    <class kind="class">ogdf::whaKey</class>
    <member kind="enumeration">
      <name>whaType</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>W_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e1523feb15e95919178972b2029b3e9e3149</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>B_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e1525fbc043442419bd40e4e5ffb4c941470</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e15299384ecd4cbe1fdc8fad6413e5163bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e15212c672e65a6e0bc79db770402478e446</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeLabel.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/labeling/</path>
    <filename>_edge_label_8h</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">ogdf/basic/geometry.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <includes id="_binary_heap_8h" name="BinaryHeap.h" local="no" imported="no">ogdf/basic/BinaryHeap.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <includes id="_grid_layout_mapped_8h" name="GridLayoutMapped.h" local="no" imported="no">ogdf/basic/GridLayoutMapped.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">ogdf/basic/exceptions.h</includes>
    <includes id="_e_label_interface_8h" name="ELabelInterface.h" local="no" imported="no">ogdf/labeling/ELabelInterface.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ELabelPos</class>
    <class kind="struct">ogdf::ELabelPos::SegmentInfo</class>
    <class kind="struct">ogdf::ELabelPos::FeatureInfo</class>
    <class kind="struct">ogdf::ELabelPos::PosInfo</class>
    <class kind="struct">ogdf::ELabelPos::FeatureLink</class>
    <class kind="struct">ogdf::ELabelPos::LabelInfo</class>
    <class kind="class">ogdf::ELabelPos::FeatureComparer</class>
    <member kind="enumeration">
      <name>OutputParameter</name>
      <anchor>6dc5527490663c8074638e3a0388739d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opStandard</name>
      <anchor>6dc5527490663c8074638e3a0388739d35933a17c58e88413b819f6b2c0b94c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opOmitIntersect</name>
      <anchor>6dc5527490663c8074638e3a0388739d65c6e3b8c3652e0920b61d32739a56ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opOmitFIntersect</name>
      <anchor>6dc5527490663c8074638e3a0388739d5d70ece7c792f113d98b179cc9b37066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opResult</name>
      <anchor>6dc5527490663c8074638e3a0388739dcb9d767aa21290c0124908b3f6be36ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>candStatus</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csAssigned</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66e5b2ea908e742d2e4340bf7d179cc8d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csFIntersect</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66eaf97cc05dcdee4b92cfc8be3683928c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csActive</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66eb146837b48f1adbc37098a887b84e0dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csUsed</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66e32b96dec90c9f7a94668a2cd1c9fe360</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ELabelInterface.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/labeling/</path>
    <filename>_e_label_interface_8h</filename>
    <includes id="_ortho_layout_8h" name="OrthoLayout.h" local="no" imported="no">ogdf/orthogonal/OrthoLayout.h</includes>
    <includes id="_grid_layout_8h" name="GridLayout.h" local="no" imported="no">ogdf/basic/GridLayout.h</includes>
    <includes id="_grid_layout_mapped_8h" name="GridLayoutMapped.h" local="no" imported="no">ogdf/basic/GridLayoutMapped.h</includes>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EdgeLabel</class>
    <class kind="class">ogdf::ELabelInterface</class>
    <member kind="enumeration">
      <name>eLabelTyp</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elEnd1</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b3b955f36b0c66dd7a14a8097ccfb6ed0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elMult1</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b35620667f5d95b5930bbf138661b3d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elName</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b37f94f92f9c727925bf6881c417a3cec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elEnd2</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b317246d0edce72845636849ff4c68c9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elMult2</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b3a3e5990f890497254fdc53953bd2ad48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>eUsedLabels</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lName</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478abb111115d49a74ff4f6ac58f00fb9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lEnd1</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec34784371fc9eb27b046cf7b0bca9f4713e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lMult1</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec34782499a0317e8ed6d5e548a50b58f3de1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lEnd2</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec347859f2d2de09c23483debb7bd4548465ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lMult2</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478786f4a6e04f47658bc14ed065b97ce8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lAll</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478e8b49404d0d63e808ef0a0c13d97d0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>labelNum</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>499017d4acab729ccb49f345f786d91c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ELabelPosSimple.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/labeling/</path>
    <filename>_e_label_pos_simple_8h</filename>
    <includes id="_e_label_interface_8h" name="ELabelInterface.h" local="no" imported="no">ogdf/labeling/ELabelInterface.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ELabelPosSimple</class>
  </compound>
  <compound kind="file">
    <name>BarycenterHeuristic.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_barycenter_heuristic_8h</filename>
    <includes id="_two_layer_cross_min_8h" name="TwoLayerCrossMin.h" local="no" imported="no">ogdf/module/TwoLayerCrossMin.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BarycenterHeuristic</class>
  </compound>
  <compound kind="file">
    <name>CrossingsMatrix.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_crossings_matrix_8h</filename>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_array2_d_8h" name="Array2D.h" local="no" imported="no">ogdf/basic/Array2D.h</includes>
    <includes id="_hierarchy_8h" name="Hierarchy.h" local="no" imported="no">ogdf/layered/Hierarchy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CrossingsMatrix</class>
  </compound>
  <compound kind="file">
    <name>DfsAcyclicSubgraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_dfs_acyclic_subgraph_8h</filename>
    <includes id="_acyclic_subgraph_module_8h" name="AcyclicSubgraphModule.h" local="no" imported="no">ogdf/module/AcyclicSubgraphModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DfsAcyclicSubgraph</class>
  </compound>
  <compound kind="file">
    <name>ExtendedNestingGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_extended_nesting_graph_8h</filename>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_cluster_array_8h" name="ClusterArray.h" local="no" imported="no">ogdf/cluster/ClusterArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="struct">ogdf::RCCrossings</class>
    <class kind="class">ogdf::LHTreeNode</class>
    <class kind="struct">ogdf::LHTreeNode::Adjacency</class>
    <class kind="struct">ogdf::LHTreeNode::ClusterCrossing</class>
    <class kind="class">ogdf::ENGLayer</class>
    <class kind="class">ogdf::ClusterGraphCopy</class>
    <class kind="class">ogdf::ExtendedNestingGraph</class>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>68d84c0f68996d999e6a5dae393f9c4d</anchor>
      <arglist>(ostream &amp;os, const RCCrossings &amp;cr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FastHierarchyLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_fast_hierarchy_layout_8h</filename>
    <includes id="_hierarchy_layout_module_8h" name="HierarchyLayoutModule.h" local="no" imported="no">ogdf/module/HierarchyLayoutModule.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::withKey</class>
    <class kind="class">ogdf::cmpWithKey</class>
    <class kind="class">ogdf::kList</class>
    <class kind="class">ogdf::FastHierarchyLayout</class>
    <member kind="define">
      <type>#define</type>
      <name>ALLOW</name>
      <anchorfile>_fast_hierarchy_layout_8h.html</anchorfile>
      <anchor>983112bf58b39715a5d1142ebc4284dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GreedyCycleRemoval.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_greedy_cycle_removal_8h</filename>
    <includes id="_acyclic_subgraph_module_8h" name="AcyclicSubgraphModule.h" local="no" imported="no">ogdf/module/AcyclicSubgraphModule.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GreedyCycleRemoval</class>
  </compound>
  <compound kind="file">
    <name>Hierarchy.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_hierarchy_8h</filename>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_level_8h" name="Level.h" local="no" imported="no">ogdf/layered/Level.h</includes>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Hierarchy</class>
  </compound>
  <compound kind="file">
    <name>Level.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_level_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::Level</class>
  </compound>
  <compound kind="file">
    <name>LongestPathRanking.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_longest_path_ranking_8h</filename>
    <includes id="_ranking_module_8h" name="RankingModule.h" local="no" imported="no">ogdf/module/RankingModule.h</includes>
    <includes id="_acyclic_subgraph_module_8h" name="AcyclicSubgraphModule.h" local="no" imported="no">ogdf/module/AcyclicSubgraphModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::LongestPathRanking</class>
  </compound>
  <compound kind="file">
    <name>MedianHeuristic.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_median_heuristic_8h</filename>
    <includes id="_two_layer_cross_min_8h" name="TwoLayerCrossMin.h" local="no" imported="no">ogdf/module/TwoLayerCrossMin.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MedianHeuristic</class>
  </compound>
  <compound kind="file">
    <name>OptimalHierarchyClusterLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_optimal_hierarchy_cluster_layout_8h</filename>
    <includes id="_hierarchy_cluster_layout_module_8h" name="HierarchyClusterLayoutModule.h" local="no" imported="no">ogdf/module/HierarchyClusterLayoutModule.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::OptimalHierarchyClusterLayout</class>
  </compound>
  <compound kind="file">
    <name>OptimalHierarchyLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_optimal_hierarchy_layout_8h</filename>
    <includes id="_hierarchy_layout_module_8h" name="HierarchyLayoutModule.h" local="no" imported="no">ogdf/module/HierarchyLayoutModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::OptimalHierarchyLayout</class>
  </compound>
  <compound kind="file">
    <name>OptimalRanking.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_optimal_ranking_8h</filename>
    <includes id="_ranking_module_8h" name="RankingModule.h" local="no" imported="no">ogdf/module/RankingModule.h</includes>
    <includes id="_acyclic_subgraph_module_8h" name="AcyclicSubgraphModule.h" local="no" imported="no">ogdf/module/AcyclicSubgraphModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::OptimalRanking</class>
  </compound>
  <compound kind="file">
    <name>SplitHeuristic.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_split_heuristic_8h</filename>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_crossings_matrix_8h" name="CrossingsMatrix.h" local="no" imported="no">ogdf/layered/CrossingsMatrix.h</includes>
    <includes id="_two_layer_cross_min_sim_draw_8h" name="TwoLayerCrossMinSimDraw.h" local="no" imported="no">ogdf/simultaneous/TwoLayerCrossMinSimDraw.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SplitHeuristic</class>
  </compound>
  <compound kind="file">
    <name>SugiyamaLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>_sugiyama_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_ranking_module_8h" name="RankingModule.h" local="no" imported="no">ogdf/module/RankingModule.h</includes>
    <includes id="_two_layer_cross_min_sim_draw_8h" name="TwoLayerCrossMinSimDraw.h" local="no" imported="no">ogdf/simultaneous/TwoLayerCrossMinSimDraw.h</includes>
    <includes id="_hierarchy_layout_module_8h" name="HierarchyLayoutModule.h" local="no" imported="no">ogdf/module/HierarchyLayoutModule.h</includes>
    <includes id="_hierarchy_cluster_layout_module_8h" name="HierarchyClusterLayoutModule.h" local="no" imported="no">ogdf/module/HierarchyClusterLayoutModule.h</includes>
    <includes id="_c_c_layout_pack_module_8h" name="CCLayoutPackModule.h" local="no" imported="no">ogdf/module/CCLayoutPackModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_cluster_graph_attributes_8h" name="ClusterGraphAttributes.h" local="no" imported="no">ogdf/cluster/ClusterGraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SugiyamaLayout</class>
  </compound>
  <compound kind="file">
    <name>LPSolver.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/lpsolver/</path>
    <filename>_l_p_solver_8h</filename>
    <includes id="_l_p_solver__coin_8h" name="LPSolver_coin.h" local="no" imported="no">ogdf/internal/lpsolver/LPSolver_coin.h</includes>
  </compound>
  <compound kind="file">
    <name>BalloonLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/misclayout/</path>
    <filename>_balloon_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_list_8h" name="List.h" local="no" imported="no">ogdf/basic/List.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BalloonLayout</class>
  </compound>
  <compound kind="file">
    <name>CircularLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/misclayout/</path>
    <filename>_circular_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CircularLayout</class>
  </compound>
  <compound kind="file">
    <name>AcyclicSubgraphModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_acyclic_subgraph_module_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::AcyclicSubgraphModule</class>
  </compound>
  <compound kind="file">
    <name>AugmentationModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_augmentation_module_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::AugmentationModule</class>
  </compound>
  <compound kind="file">
    <name>CCLayoutPackModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_c_c_layout_pack_module_8h</filename>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CCLayoutPackModule</class>
  </compound>
  <compound kind="file">
    <name>ClustererModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_clusterer_module_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_cluster_graph_8h" name="ClusterGraph.h" local="no" imported="no">ogdf/cluster/ClusterGraph.h</includes>
    <includes id="simple__graph__alg_8h" name="simple_graph_alg.h" local="no" imported="no">ogdf/basic/simple_graph_alg.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimpleCluster</class>
    <class kind="class">ogdf::ClustererModule</class>
  </compound>
  <compound kind="file">
    <name>CrossingMinimizationModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_crossing_minimization_module_8h</filename>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_planar_module_8h" name="PlanarModule.h" local="no" imported="no">ogdf/planarity/PlanarModule.h</includes>
    <includes id="_module_8h" name="Module.h" local="no" imported="no">ogdf/basic/Module.h</includes>
    <includes id="_logger_8h" name="Logger.h" local="no" imported="no">ogdf/basic/Logger.h</includes>
    <includes id="_timeouter_8h" name="Timeouter.h" local="no" imported="no">ogdf/basic/Timeouter.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">ogdf/basic/exceptions.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CrossingMinimizationModule</class>
  </compound>
  <compound kind="file">
    <name>EdgeInsertionModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_edge_insertion_module_8h</filename>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <includes id="_logger_8h" name="Logger.h" local="no" imported="no">ogdf/basic/Logger.h</includes>
    <includes id="_module_8h" name="Module.h" local="no" imported="no">ogdf/basic/Module.h</includes>
    <includes id="_timeouter_8h" name="Timeouter.h" local="no" imported="no">ogdf/basic/Timeouter.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EdgeInsertionModule</class>
  </compound>
  <compound kind="file">
    <name>EmbedderModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_embedder_module_8h</filename>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_module_8h" name="Module.h" local="no" imported="no">ogdf/basic/Module.h</includes>
    <includes id="_logger_8h" name="Logger.h" local="no" imported="no">ogdf/basic/Logger.h</includes>
    <includes id="_timeouter_8h" name="Timeouter.h" local="no" imported="no">ogdf/basic/Timeouter.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderModule</class>
  </compound>
  <compound kind="file">
    <name>GridLayoutModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_grid_layout_module_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_grid_layout_8h" name="GridLayout.h" local="no" imported="no">ogdf/basic/GridLayout.h</includes>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::GridLayoutModule</class>
    <class kind="class">ogdf::PlanarGridLayoutModule</class>
    <class kind="class">ogdf::GridLayoutPlanRepModule</class>
  </compound>
  <compound kind="file">
    <name>HierarchyClusterLayoutModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_hierarchy_cluster_layout_module_8h</filename>
    <includes id="_cluster_graph_copy_attributes_8h" name="ClusterGraphCopyAttributes.h" local="no" imported="no">ogdf/cluster/ClusterGraphCopyAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::HierarchyClusterLayoutModule</class>
  </compound>
  <compound kind="file">
    <name>HierarchyLayoutModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_hierarchy_layout_module_8h</filename>
    <includes id="_hierarchy_8h" name="Hierarchy.h" local="no" imported="no">ogdf/layered/Hierarchy.h</includes>
    <includes id="_graph_copy_attributes_8h" name="GraphCopyAttributes.h" local="no" imported="no">ogdf/basic/GraphCopyAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::HierarchyLayoutModule</class>
  </compound>
  <compound kind="file">
    <name>LayoutClusterPlanRepModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_layout_cluster_plan_rep_module_8h</filename>
    <includes id="_cluster_plan_rep_8h" name="ClusterPlanRep.h" local="no" imported="no">ogdf/cluster/ClusterPlanRep.h</includes>
    <includes id="_layout_8h" name="Layout.h" local="no" imported="no">ogdf/basic/Layout.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::LayoutClusterPlanRepModule</class>
  </compound>
  <compound kind="file">
    <name>LayoutModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_layout_module_8h</filename>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::LayoutModule</class>
  </compound>
  <compound kind="file">
    <name>LayoutPlanRepModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_layout_plan_rep_module_8h</filename>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <includes id="_layout_8h" name="Layout.h" local="no" imported="no">ogdf/basic/Layout.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::LayoutPlanRepModule</class>
    <member kind="enumeration">
      <name>UMLOpt</name>
      <anchor>6734cb3912399f2c22c60ecba69144b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlOpAlign</name>
      <anchor>6734cb3912399f2c22c60ecba69144b96ecc8be1f1b0d04685a99980929e937f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlOpScale</name>
      <anchor>6734cb3912399f2c22c60ecba69144b9d74075f8b87faba5cda4d96f89f33310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlOpProg</name>
      <anchor>6734cb3912399f2c22c60ecba69144b93103a90a24d156decf609fa81f5bdef0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MinCostFlowModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_min_cost_flow_module_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MinCostFlowModule</class>
  </compound>
  <compound kind="file">
    <name>MixedModelCrossingsBeautifierModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_mixed_model_crossings_beautifier_module_8h</filename>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_grid_layout_8h" name="GridLayout.h" local="no" imported="no">ogdf/basic/GridLayout.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MixedModelCrossingsBeautifierModule</class>
    <class kind="class">ogdf::MMDummyCrossingsBeautifier</class>
  </compound>
  <compound kind="file">
    <name>MMCrossingMinimizationModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_m_m_crossing_minimization_module_8h</filename>
    <includes id="_plan_rep_expansion_8h" name="PlanRepExpansion.h" local="no" imported="no">ogdf/planarity/PlanRepExpansion.h</includes>
    <includes id="_module_8h" name="Module.h" local="no" imported="no">ogdf/basic/Module.h</includes>
    <includes id="_logger_8h" name="Logger.h" local="no" imported="no">ogdf/basic/Logger.h</includes>
    <includes id="exceptions_8h" name="exceptions.h" local="no" imported="no">ogdf/basic/exceptions.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMCrossingMinimizationModule</class>
  </compound>
  <compound kind="file">
    <name>MMEdgeInsertionModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_m_m_edge_insertion_module_8h</filename>
    <includes id="_plan_rep_expansion_8h" name="PlanRepExpansion.h" local="no" imported="no">ogdf/planarity/PlanRepExpansion.h</includes>
    <includes id="_module_8h" name="Module.h" local="no" imported="no">ogdf/basic/Module.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMEdgeInsertionModule</class>
  </compound>
  <compound kind="file">
    <name>PlanarSubgraphModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_planar_subgraph_module_8h</filename>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <includes id="_module_8h" name="Module.h" local="no" imported="no">ogdf/basic/Module.h</includes>
    <includes id="_logger_8h" name="Logger.h" local="no" imported="no">ogdf/basic/Logger.h</includes>
    <includes id="_timeouter_8h" name="Timeouter.h" local="no" imported="no">ogdf/basic/Timeouter.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarSubgraphModule</class>
  </compound>
  <compound kind="file">
    <name>RankingModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_ranking_module_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::RankingModule</class>
  </compound>
  <compound kind="file">
    <name>ShellingOrderModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_shelling_order_module_8h</filename>
    <includes id="_shelling_order_8h" name="ShellingOrder.h" local="no" imported="no">ogdf/planarlayout/ShellingOrder.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ShellingOrderModule</class>
  </compound>
  <compound kind="file">
    <name>ShortestPathModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_shortest_path_module_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ShortestPathModule</class>
  </compound>
  <compound kind="file">
    <name>TwoLayerCrossMin.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_two_layer_cross_min_8h</filename>
    <includes id="_hierarchy_8h" name="Hierarchy.h" local="no" imported="no">ogdf/layered/Hierarchy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::TwoLayerCrossMin</class>
  </compound>
  <compound kind="file">
    <name>UMLLayoutModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_u_m_l_layout_module_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_u_m_l_graph_8h" name="UMLGraph.h" local="no" imported="no">ogdf/basic/UMLGraph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::UMLLayoutModule</class>
  </compound>
  <compound kind="file">
    <name>UpwardPlanarSubgraphModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>_upward_planar_subgraph_module_8h</filename>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::UpwardPlanarSubgraphModule</class>
  </compound>
  <compound kind="file">
    <name>CompactionConstraintGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_compaction_constraint_graph_8h</filename>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_routing_channel_8h" name="RoutingChannel.h" local="no" imported="no">ogdf/internal/orthogonal/RoutingChannel.h</includes>
    <includes id="_minimum_edge_distances_8h" name="MinimumEdgeDistances.h" local="no" imported="no">ogdf/orthogonal/MinimumEdgeDistances.h</includes>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::CompactionConstraintGraphBase</class>
    <class kind="class">ogdf::CompactionConstraintGraph</class>
    <class kind="struct">ogdf::CompactionConstraintGraph::Interval</class>
    <class kind="class">ogdf::CompactionConstraintGraph::SegmentComparer</class>
    <member kind="enumeration">
      <name>ConstraintEdgeType</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetBasicArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c702f214583b488a98ad769aceec0ea3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetVertexSizeArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7cbc1fc1c88245522020ee8cc69fc11b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetVisibilityArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c4b7ad3849992a4b3e8cafac0ba49fd72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetFixToZeroArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7cfb9f70eee4e18d9b58c752310f17af28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetReducibleArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c2f0013656a404d1dd5fa39d7b415207f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetMedianArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c7d692fe10aa58dcc139ad828a70d004d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeRouter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_edge_router_8h</filename>
    <includes id="_routing_channel_8h" name="RoutingChannel.h" local="no" imported="no">ogdf/internal/orthogonal/RoutingChannel.h</includes>
    <includes id="_minimum_edge_distances_8h" name="MinimumEdgeDistances.h" local="no" imported="no">ogdf/orthogonal/MinimumEdgeDistances.h</includes>
    <includes id="_ortho_layout_8h" name="OrthoLayout.h" local="no" imported="no">ogdf/orthogonal/OrthoLayout.h</includes>
    <includes id="_layout_8h" name="Layout.h" local="no" imported="no">ogdf/basic/Layout.h</includes>
    <includes id="_grid_layout_8h" name="GridLayout.h" local="no" imported="no">ogdf/basic/GridLayout.h</includes>
    <includes id="_grid_layout_mapped_8h" name="GridLayoutMapped.h" local="no" imported="no">ogdf/basic/GridLayoutMapped.h</includes>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_node_info_8h" name="NodeInfo.h" local="no" imported="no">ogdf/internal/orthogonal/NodeInfo.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EdgeRouter</class>
    <member kind="enumeration">
      <name>bend_type</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_free</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fb3864514efc85e6b05db555fbe990850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_1left</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fe9eb4038ce7a9138f4bc0918086b5a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_1right</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fba2b7bba69a992decd18fe92940830c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_2left</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fe53c3ce9fbe0fb745678253f65665366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_2right</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453ff7269a49b87d69662f145335a2bb8841</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_bf</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fadc1e01fe12654a14df48a2873ba50cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b1l</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f98a582fa53f2e16359f64132734d737c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b1r</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f51c1853d339ed1972d9ac39effc7a319</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b2l</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f2b7722bbd9ae4803babb36e0c185cb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b2r</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fb9fad72ac2e043a19ec3665cc9853aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>process_type</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unprocessed</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c6083cc31b034e3ba1251b7f291b4a2c042</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>processed</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c602197be7070b386194b1df86450a31e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>used</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c60fdd5758990a1c290a2a9a0e8112809eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlowCompaction.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_flow_compaction_8h</filename>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_routing_channel_8h" name="RoutingChannel.h" local="no" imported="no">ogdf/internal/orthogonal/RoutingChannel.h</includes>
    <includes id="_minimum_edge_distances_8h" name="MinimumEdgeDistances.h" local="no" imported="no">ogdf/orthogonal/MinimumEdgeDistances.h</includes>
    <includes id="_grid_layout_mapped_8h" name="GridLayoutMapped.h" local="no" imported="no">ogdf/basic/GridLayoutMapped.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FlowCompaction</class>
  </compound>
  <compound kind="file">
    <name>LongestPathCompaction.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_longest_path_compaction_8h</filename>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <includes id="_routing_channel_8h" name="RoutingChannel.h" local="no" imported="no">ogdf/internal/orthogonal/RoutingChannel.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <includes id="_grid_layout_mapped_8h" name="GridLayoutMapped.h" local="no" imported="no">ogdf/basic/GridLayoutMapped.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::LongestPathCompaction</class>
  </compound>
  <compound kind="file">
    <name>MinimumEdgeDistances.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_minimum_edge_distances_8h</filename>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MinimumEdgeDistances</class>
    <class kind="struct">ogdf::MinimumEdgeDistances::InfoType</class>
  </compound>
  <compound kind="file">
    <name>OrthoLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_ortho_layout_8h</filename>
    <includes id="_layout_plan_rep_module_8h" name="LayoutPlanRepModule.h" local="no" imported="no">ogdf/module/LayoutPlanRepModule.h</includes>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::OrthoLayout</class>
    <member kind="enumeration">
      <name>OptionProfile</name>
      <anchor>85b1e82c0214df1dfd2e755da32315ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>standard</name>
      <anchor>85b1e82c0214df1dfd2e755da32315ade6e326ef95dade745c626fc53a5a6a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minBendsperEdge</name>
      <anchor>85b1e82c0214df1dfd2e755da32315ad0832943caddb47921cafabd29d3d8c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fullService</name>
      <anchor>85b1e82c0214df1dfd2e755da32315adfd70967f89074ffd51ea085026fa62f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrthoRep.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_ortho_rep_8h</filename>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <includes id="_stack_8h" name="Stack.h" local="no" imported="no">ogdf/basic/Stack.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BendString</class>
    <class kind="class">ogdf::OrthoRep</class>
    <class kind="struct">ogdf::OrthoRep::SideInfoUML</class>
    <class kind="struct">ogdf::OrthoRep::VertexInfoUML</class>
    <member kind="enumeration">
      <name>BendType</name>
      <anchor>55bdc97d4f6e5c427a8c0e556ddbeca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>convexBend</name>
      <anchor>55bdc97d4f6e5c427a8c0e556ddbeca299a96c14d2d6361ff0823ca7bf8e52c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reflexBend</name>
      <anchor>55bdc97d4f6e5c427a8c0e556ddbeca2207e12fa08fb29c6210576443bcbc8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OrthoDir</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odNorth</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981af3205fa2544cf374a9f84bec39024739</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odEast</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a410b93bb42406d64ed7d829d409d52c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odSouth</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a42bc342f6f7fadee98c0250fd1f7259f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odWest</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a558721cc380674afdf7c68579e4fff73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odUndefined</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a3065f10a673ead34e570f066ada97a54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrthoShaper.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>_ortho_shaper_8h</filename>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::OrthoShaper</class>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMaxBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2bdaf1df0113efb6495859be9f7f913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMinBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c78d47ee21a412a562aede4da602acc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TileToRowsCCPacker.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/packing/</path>
    <filename>_tile_to_rows_c_c_packer_8h</filename>
    <includes id="_c_c_layout_pack_module_8h" name="CCLayoutPackModule.h" local="no" imported="no">ogdf/module/CCLayoutPackModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::TileToRowsCCPacker</class>
  </compound>
  <compound kind="file">
    <name>BoyerMyrvold.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_boyer_myrvold_8h</filename>
    <includes id="_boyer_myrvold_planar_8h" name="BoyerMyrvoldPlanar.h" local="no" imported="no">ogdf/internal/planarity/BoyerMyrvoldPlanar.h</includes>
    <includes id="_extract_kuratowskis_8h" name="ExtractKuratowskis.h" local="no" imported="no">ogdf/planarity/ExtractKuratowskis.h</includes>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <includes id="_kuratowski_subdivision_8h" name="KuratowskiSubdivision.h" local="no" imported="no">ogdf/planarity/KuratowskiSubdivision.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BoyerMyrvold</class>
  </compound>
  <compound kind="file">
    <name>EdgeTypePatterns.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_edge_type_patterns_8h</filename>
    <namespace>ogdf</namespace>
    <member kind="typedef">
      <type>long</type>
      <name>edgeType</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b6b74eedd298fbff718d17e5c51eb7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLEdgeTypePatterns</name>
      <anchor>91d5541ad84001112aa241bf09225501</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpPrimary</name>
      <anchor>91d5541ad84001112aa241bf092255010e8f11bbd33700616d2e8628d327329f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpSecondary</name>
      <anchor>91d5541ad84001112aa241bf09225501f77ae4c2f921522b044455732d6056ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpTertiary</name>
      <anchor>91d5541ad84001112aa241bf0922550137b92a26c0b3bb7b27c73b474b1e95b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpFourth</name>
      <anchor>91d5541ad84001112aa241bf09225501131e4ab57b1facaa1d9abf460f9891ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpUser</name>
      <anchor>91d5541ad84001112aa241bf09225501a2690bc417b0a2f13548930c63effcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpAll</name>
      <anchor>91d5541ad84001112aa241bf09225501e502bb43786cd61f1088a140bf2a1a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLEdgeTypeConstants</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcPrimAssociation</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fc3bca06e29b8e0f2f8a78661311e9028</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcPrimGeneralization</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fcd0a67bae6e46f00bddf900b61c9365d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcPrimDependency</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f7f905125ce64e49ddc2d3aff453e8888</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecExpansion</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f8a79d65efa9f967076d855f881b1deef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecDissect</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5ff4f22e6a5a1b8d83eeed013bd52f71c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecFaceSplitter</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fac53f763faf872d937aac7e448a96132</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecCluster</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fa154aa769b3bb1ef4854555818266df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecClique</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f98335d7f6bfe5e96f897d27635e231c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcMerger</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5ff30efc445a5645a10b5645874988fa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcVertical</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f545a5581c5684d6b3370cb4fbe589dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcAlign</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f5596cda6987afaeaa965de83804bab45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcAssClass</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fa8bfbfb7583fcb7bbe4d3e04e6f1f980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcBrother</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f1f2fb386926870987ec8fb2f0a8ae397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcHalfBrother</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fad81529638fcb4336d4a116b32bfb6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcCousin</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f707772d4959dc7d855e95de817aed86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcFifthToMerger</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fb0a3cf6a471822484ff875333f0c9c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcFifthFromMerger</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f3e1dd883fa36ac6c7ba3d855450bcc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLEdgeTypeOffsets</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoPrimary</name>
      <anchor>68f340087b3cf8a1442b6044c5c98babe70a24359500f5911717436fa0f4e6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoSecondary</name>
      <anchor>68f340087b3cf8a1442b6044c5c98babc2de238323d60049c453f7d1f84ee931</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoTertiary</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab9e108c0a13d62c56f863a2756c830947</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoFourth</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab825bcefe637aed0d8b2766b887284861</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoFifth</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab3a06d46911c6c9392bcace786d3b0fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoUser</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab91a1f49011f21af2a347b416aa8b593f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EmbedderMaxFace.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_embedder_max_face_8h</filename>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_b_c_tree_8h" name="BCTree.h" local="no" imported="no">ogdf/decomposition/BCTree.h</includes>
    <includes id="_static_s_p_q_r_tree_8h" name="StaticSPQRTree.h" local="no" imported="no">ogdf/decomposition/StaticSPQRTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMaxFace</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMaxFaceLayers.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_embedder_max_face_layers_8h</filename>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_b_c_tree_8h" name="BCTree.h" local="no" imported="no">ogdf/decomposition/BCTree.h</includes>
    <includes id="_static_s_p_q_r_tree_8h" name="StaticSPQRTree.h" local="no" imported="no">ogdf/decomposition/StaticSPQRTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMaxFaceLayers</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMinDepth.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_embedder_min_depth_8h</filename>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_b_c_tree_8h" name="BCTree.h" local="no" imported="no">ogdf/decomposition/BCTree.h</includes>
    <includes id="_static_s_p_q_r_tree_8h" name="StaticSPQRTree.h" local="no" imported="no">ogdf/decomposition/StaticSPQRTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMinDepth</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMinDepthMaxFace.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_embedder_min_depth_max_face_8h</filename>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_b_c_tree_8h" name="BCTree.h" local="no" imported="no">ogdf/decomposition/BCTree.h</includes>
    <includes id="_embedder_m_d_m_f_length_attribute_8h" name="EmbedderMDMFLengthAttribute.h" local="no" imported="no">ogdf/internal/planarity/EmbedderMDMFLengthAttribute.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMinDepthMaxFace</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMinDepthMaxFaceLayers.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_embedder_min_depth_max_face_layers_8h</filename>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_b_c_tree_8h" name="BCTree.h" local="no" imported="no">ogdf/decomposition/BCTree.h</includes>
    <includes id="_embedder_m_d_m_f_length_attribute_8h" name="EmbedderMDMFLengthAttribute.h" local="no" imported="no">ogdf/internal/planarity/EmbedderMDMFLengthAttribute.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMinDepthMaxFaceLayers</class>
  </compound>
  <compound kind="file">
    <name>EmbedderMinDepthPiTa.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_embedder_min_depth_pi_ta_8h</filename>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_b_c_tree_8h" name="BCTree.h" local="no" imported="no">ogdf/decomposition/BCTree.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::EmbedderMinDepthPiTa</class>
    <member kind="define">
      <type>#define</type>
      <name>USE_EXTENDED_DEPTH_DEFINITION</name>
      <anchorfile>_embedder_min_depth_pi_ta_8h.html</anchorfile>
      <anchor>268b917f3d19611fb533b44d027b98bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtractKuratowskis.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_extract_kuratowskis_8h</filename>
    <includes id="_boyer_myrvold_planar_8h" name="BoyerMyrvoldPlanar.h" local="no" imported="no">ogdf/internal/planarity/BoyerMyrvoldPlanar.h</includes>
    <includes id="_find_kuratowskis_8h" name="FindKuratowskis.h" local="no" imported="no">ogdf/internal/planarity/FindKuratowskis.h</includes>
    <includes id="_stack_8h" name="Stack.h" local="no" imported="no">ogdf/basic/Stack.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::DynamicBacktrack</class>
    <class kind="class">ogdf::KuratowskiWrapper</class>
    <class kind="class">ogdf::ExtractKuratowskis</class>
  </compound>
  <compound kind="file">
    <name>FastPlanarSubgraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_fast_planar_subgraph_8h</filename>
    <includes id="_planar_subgraph_module_8h" name="PlanarSubgraphModule.h" local="no" imported="no">ogdf/module/PlanarSubgraphModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FastPlanarSubgraph</class>
  </compound>
  <compound kind="file">
    <name>FixedEmbeddingInserter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_fixed_embedding_inserter_8h</filename>
    <includes id="_edge_insertion_module_8h" name="EdgeInsertionModule.h" local="no" imported="no">ogdf/module/EdgeInsertionModule.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FixedEmbeddingInserter</class>
  </compound>
  <compound kind="file">
    <name>KuratowskiSubdivision.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_kuratowski_subdivision_8h</filename>
    <includes id="basic_8h" name="basic.h" local="no" imported="no">ogdf/basic/basic.h</includes>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::KuratowskiSubdivision</class>
  </compound>
  <compound kind="file">
    <name>MaximalPlanarSubgraphSimple.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_maximal_planar_subgraph_simple_8h</filename>
    <includes id="_planar_subgraph_module_8h" name="PlanarSubgraphModule.h" local="no" imported="no">ogdf/module/PlanarSubgraphModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MaximalPlanarSubgraphSimple</class>
  </compound>
  <compound kind="file">
    <name>MMFixedEmbeddingInserter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_m_m_fixed_embedding_inserter_8h</filename>
    <includes id="_m_m_edge_insertion_module_8h" name="MMEdgeInsertionModule.h" local="no" imported="no">ogdf/module/MMEdgeInsertionModule.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMFixedEmbeddingInserter</class>
  </compound>
  <compound kind="file">
    <name>MMSubgraphPlanarizer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_m_m_subgraph_planarizer_8h</filename>
    <includes id="_m_m_crossing_minimization_module_8h" name="MMCrossingMinimizationModule.h" local="no" imported="no">ogdf/module/MMCrossingMinimizationModule.h</includes>
    <includes id="_planar_subgraph_module_8h" name="PlanarSubgraphModule.h" local="no" imported="no">ogdf/module/PlanarSubgraphModule.h</includes>
    <includes id="_m_m_edge_insertion_module_8h" name="MMEdgeInsertionModule.h" local="no" imported="no">ogdf/module/MMEdgeInsertionModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMSubgraphPlanarizer</class>
  </compound>
  <compound kind="file">
    <name>MMVariableEmbeddingInserter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_m_m_variable_embedding_inserter_8h</filename>
    <includes id="_m_m_edge_insertion_module_8h" name="MMEdgeInsertionModule.h" local="no" imported="no">ogdf/module/MMEdgeInsertionModule.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMVariableEmbeddingInserter</class>
    <class kind="struct">ogdf::MMVariableEmbeddingInserter::AnchorNodeInfo</class>
    <class kind="struct">ogdf::MMVariableEmbeddingInserter::Paths</class>
  </compound>
  <compound kind="file">
    <name>NodeTypePatterns.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_node_type_patterns_8h</filename>
    <namespace>ogdf</namespace>
    <member kind="typedef">
      <type>long</type>
      <name>nodeType</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c235dd0ef8c44b38d2acf5e381dd52f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLNodeTypePatterns</name>
      <anchor>c843979b90fd708780ef3dd319af1f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpPrimary</name>
      <anchor>c843979b90fd708780ef3dd319af1f12cbab499f93229f95481f5a66a64b4013</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpSecondary</name>
      <anchor>c843979b90fd708780ef3dd319af1f12fee4d518103a4864c12381cd9bd4f992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpTertiary</name>
      <anchor>c843979b90fd708780ef3dd319af1f12390c44f9d85ccf5e5ecb7aad79897d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpFourth</name>
      <anchor>c843979b90fd708780ef3dd319af1f12c6603644ae4002cd2f1e9ca72ce62b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpUser</name>
      <anchor>c843979b90fd708780ef3dd319af1f124c11d4058c11ed77ac280ba2c95af674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpAll</name>
      <anchor>c843979b90fd708780ef3dd319af1f12aeb9db6922cecdcb97fb3ebdebe05495</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLNodeTypeConstants</name>
      <anchor>5c561541b333bf175cd8c0998309f7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntPrimOriginal</name>
      <anchor>5c561541b333bf175cd8c0998309f7dec7b9e76c9ca1b559d978e30d4dc7c39b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntPrimCopy</name>
      <anchor>5c561541b333bf175cd8c0998309f7de3372cbe70a5491a032a719c935e36c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntSecStructural</name>
      <anchor>5c561541b333bf175cd8c0998309f7decec4e062566711dc9fb524571aab2251</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntSecNonStructural</name>
      <anchor>5c561541b333bf175cd8c0998309f7de71c20fa30be41fc73bc461ffcd26efc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerCrossing</name>
      <anchor>5c561541b333bf175cd8c0998309f7decb91e092047c44718c4d97c382fdc779</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerExpander</name>
      <anchor>5c561541b333bf175cd8c0998309f7de8ee80fd42e522d02329665576c0a798e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerHDExpander</name>
      <anchor>5c561541b333bf175cd8c0998309f7de4d1b21c1710ead329af140ea03592f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerLDExpander</name>
      <anchor>5c561541b333bf175cd8c0998309f7de294eb20e34c8546dce4ec3d97bcce580</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourFlow</name>
      <anchor>5c561541b333bf175cd8c0998309f7de3372b409139e9044e52674f434bbedcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourLabel</name>
      <anchor>5c561541b333bf175cd8c0998309f7de019a87c02e227cfb7e729b948d5d2cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourType</name>
      <anchor>5c561541b333bf175cd8c0998309f7de5e28e562dae49d4e3e37d899795d6793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourCorner</name>
      <anchor>5c561541b333bf175cd8c0998309f7deef6cbe2832e71df75ef8dc6afa17703b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLNodeTypeOffsets</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoPrimary</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd2310f974fa228d1aa3cb48f8e173768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoSecondary</name>
      <anchor>ae56edd638f64b744c9397ede622e0bdf7f16c183019105d51528a34be731c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoTertiary</name>
      <anchor>ae56edd638f64b744c9397ede622e0bdbe4b7ccf8aafc7cabe4f4c3af2dafe5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoFourth</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd47e89a178c81e5e0b3738bca7c570e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoFifth</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd83e4d213697c4f7d8b6eacaf80fffdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoUser</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd78b8e3e3f23e53d942016ec0703af62a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonPlanarCore.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_non_planar_core_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::NonPlanarCore</class>
  </compound>
  <compound kind="file">
    <name>PlanarizationGridLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_planarization_grid_layout_8h</filename>
    <includes id="_grid_layout_module_8h" name="GridLayoutModule.h" local="no" imported="no">ogdf/module/GridLayoutModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_planar_subgraph_module_8h" name="PlanarSubgraphModule.h" local="no" imported="no">ogdf/module/PlanarSubgraphModule.h</includes>
    <includes id="_edge_insertion_module_8h" name="EdgeInsertionModule.h" local="no" imported="no">ogdf/module/EdgeInsertionModule.h</includes>
    <includes id="_c_c_layout_pack_module_8h" name="CCLayoutPackModule.h" local="no" imported="no">ogdf/module/CCLayoutPackModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarizationGridLayout</class>
  </compound>
  <compound kind="file">
    <name>PlanarizationLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_planarization_layout_8h</filename>
    <includes id="_u_m_l_layout_module_8h" name="UMLLayoutModule.h" local="no" imported="no">ogdf/module/UMLLayoutModule.h</includes>
    <includes id="_planar_subgraph_module_8h" name="PlanarSubgraphModule.h" local="no" imported="no">ogdf/module/PlanarSubgraphModule.h</includes>
    <includes id="_edge_insertion_module_8h" name="EdgeInsertionModule.h" local="no" imported="no">ogdf/module/EdgeInsertionModule.h</includes>
    <includes id="_layout_plan_rep_module_8h" name="LayoutPlanRepModule.h" local="no" imported="no">ogdf/module/LayoutPlanRepModule.h</includes>
    <includes id="_c_c_layout_pack_module_8h" name="CCLayoutPackModule.h" local="no" imported="no">ogdf/module/CCLayoutPackModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_hash_array_8h" name="HashArray.h" local="no" imported="no">ogdf/basic/HashArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarizationLayout</class>
    <class kind="class">ogdf::AddNodeComparer</class>
  </compound>
  <compound kind="file">
    <name>PlanarModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_planar_module_8h</filename>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarModule</class>
  </compound>
  <compound kind="file">
    <name>PlanRep.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_plan_rep_8h</filename>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <includes id="_edge_type_patterns_8h" name="EdgeTypePatterns.h" local="no" imported="no">ogdf/planarity/EdgeTypePatterns.h</includes>
    <includes id="_node_type_patterns_8h" name="NodeTypePatterns.h" local="no" imported="no">ogdf/planarity/NodeTypePatterns.h</includes>
    <includes id="_layout_8h" name="Layout.h" local="no" imported="no">ogdf/basic/Layout.h</includes>
    <includes id="_ortho_rep_8h" name="OrthoRep.h" local="no" imported="no">ogdf/orthogonal/OrthoRep.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanRep</class>
    <class kind="struct">ogdf::PlanRep::Deg1RestoreInfo</class>
  </compound>
  <compound kind="file">
    <name>PlanRepExpansion.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_plan_rep_expansion_8h</filename>
    <includes id="_graph_8h" name="Graph.h" local="no" imported="no">ogdf/basic/Graph.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanRepExpansion</class>
    <class kind="struct">ogdf::PlanRepExpansion::Crossing</class>
    <class kind="class">ogdf::PlanRepExpansion::NodeSplit</class>
  </compound>
  <compound kind="file">
    <name>PlanRepInc.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_plan_rep_inc_8h</filename>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_plan_rep_u_m_l_8h" name="PlanRepUML.h" local="no" imported="no">ogdf/planarity/PlanRepUML.h</includes>
    <includes id="_u_m_l_graph_8h" name="UMLGraph.h" local="no" imported="no">ogdf/basic/UMLGraph.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_graph_observer_8h" name="GraphObserver.h" local="no" imported="no">ogdf/basic/GraphObserver.h</includes>
    <includes id="_array2_d_8h" name="Array2D.h" local="no" imported="no">ogdf/basic/Array2D.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanRepInc</class>
  </compound>
  <compound kind="file">
    <name>PlanRepUML.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_plan_rep_u_m_l_8h</filename>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <includes id="_u_m_l_graph_8h" name="UMLGraph.h" local="no" imported="no">ogdf/basic/UMLGraph.h</includes>
    <includes id="_edge_type_patterns_8h" name="EdgeTypePatterns.h" local="no" imported="no">ogdf/planarity/EdgeTypePatterns.h</includes>
    <includes id="_node_type_patterns_8h" name="NodeTypePatterns.h" local="no" imported="no">ogdf/planarity/NodeTypePatterns.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanRepUML</class>
  </compound>
  <compound kind="file">
    <name>SimpleEmbedder.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_simple_embedder_8h</filename>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_planar_module_8h" name="PlanarModule.h" local="no" imported="no">ogdf/planarity/PlanarModule.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_plan_rep_8h" name="PlanRep.h" local="no" imported="no">ogdf/planarity/PlanRep.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimpleEmbedder</class>
  </compound>
  <compound kind="file">
    <name>SimpleIncNodeInserter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_simple_inc_node_inserter_8h</filename>
    <includes id="_plan_rep_inc_8h" name="PlanRepInc.h" local="no" imported="no">ogdf/planarity/PlanRepInc.h</includes>
    <includes id="_u_m_l_graph_8h" name="UMLGraph.h" local="no" imported="no">ogdf/basic/UMLGraph.h</includes>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_graph_observer_8h" name="GraphObserver.h" local="no" imported="no">ogdf/basic/GraphObserver.h</includes>
    <includes id="_inc_node_inserter_8h" name="IncNodeInserter.h" local="no" imported="no">ogdf/basic/IncNodeInserter.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimpleIncNodeInserter</class>
  </compound>
  <compound kind="file">
    <name>SubgraphPlanarizer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_subgraph_planarizer_8h</filename>
    <includes id="_crossing_minimization_module_8h" name="CrossingMinimizationModule.h" local="no" imported="no">ogdf/module/CrossingMinimizationModule.h</includes>
    <includes id="_planar_subgraph_module_8h" name="PlanarSubgraphModule.h" local="no" imported="no">ogdf/module/PlanarSubgraphModule.h</includes>
    <includes id="_edge_insertion_module_8h" name="EdgeInsertionModule.h" local="no" imported="no">ogdf/module/EdgeInsertionModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_logger_8h" name="Logger.h" local="no" imported="no">ogdf/basic/Logger.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SubgraphPlanarizer</class>
    <class kind="class">ogdf::SubgraphPlanarizer::CrossingStructure</class>
  </compound>
  <compound kind="file">
    <name>VariableEmbeddingInserter.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_variable_embedding_inserter_8h</filename>
    <includes id="_edge_insertion_module_8h" name="EdgeInsertionModule.h" local="no" imported="no">ogdf/module/EdgeInsertionModule.h</includes>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_face_array_8h" name="FaceArray.h" local="no" imported="no">ogdf/basic/FaceArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::VariableEmbeddingInserter</class>
  </compound>
  <compound kind="file">
    <name>VariableEmbeddingInserter2.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>_variable_embedding_inserter2_8h</filename>
    <includes id="_edge_insertion_module_8h" name="EdgeInsertionModule.h" local="no" imported="no">ogdf/module/EdgeInsertionModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::VariableEmbeddingInserter2</class>
  </compound>
  <compound kind="file">
    <name>BiconnectedShellingOrder.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_biconnected_shelling_order_8h</filename>
    <includes id="_shelling_order_module_8h" name="ShellingOrderModule.h" local="no" imported="no">ogdf/module/ShellingOrderModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::BiconnectedShellingOrder</class>
  </compound>
  <compound kind="file">
    <name>MixedModelLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_mixed_model_layout_8h</filename>
    <includes id="_grid_layout_module_8h" name="GridLayoutModule.h" local="no" imported="no">ogdf/module/GridLayoutModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_embedder_module_8h" name="EmbedderModule.h" local="no" imported="no">ogdf/module/EmbedderModule.h</includes>
    <includes id="_augmentation_module_8h" name="AugmentationModule.h" local="no" imported="no">ogdf/module/AugmentationModule.h</includes>
    <includes id="_shelling_order_module_8h" name="ShellingOrderModule.h" local="no" imported="no">ogdf/module/ShellingOrderModule.h</includes>
    <includes id="_mixed_model_crossings_beautifier_module_8h" name="MixedModelCrossingsBeautifierModule.h" local="no" imported="no">ogdf/module/MixedModelCrossingsBeautifierModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MixedModelLayout</class>
  </compound>
  <compound kind="file">
    <name>MMCBBase.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_m_m_c_b_base_8h</filename>
    <includes id="_mixed_model_crossings_beautifier_module_8h" name="MixedModelCrossingsBeautifierModule.h" local="no" imported="no">ogdf/module/MixedModelCrossingsBeautifierModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMCBBase</class>
  </compound>
  <compound kind="file">
    <name>MMCBDoubleGrid.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_m_m_c_b_double_grid_8h</filename>
    <includes id="_m_m_c_b_base_8h" name="MMCBBase.h" local="no" imported="no">ogdf/planarlayout/MMCBBase.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMCBDoubleGrid</class>
  </compound>
  <compound kind="file">
    <name>MMCBLocalStretch.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_m_m_c_b_local_stretch_8h</filename>
    <includes id="_m_m_c_b_base_8h" name="MMCBBase.h" local="no" imported="no">ogdf/planarlayout/MMCBBase.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::MMCBLocalStretch</class>
  </compound>
  <compound kind="file">
    <name>PlanarDrawLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_planar_draw_layout_8h</filename>
    <includes id="_grid_layout_module_8h" name="GridLayoutModule.h" local="no" imported="no">ogdf/module/GridLayoutModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_augmentation_module_8h" name="AugmentationModule.h" local="no" imported="no">ogdf/module/AugmentationModule.h</includes>
    <includes id="_shelling_order_module_8h" name="ShellingOrderModule.h" local="no" imported="no">ogdf/module/ShellingOrderModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarDrawLayout</class>
  </compound>
  <compound kind="file">
    <name>PlanarStraightLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_planar_straight_layout_8h</filename>
    <includes id="_grid_layout_module_8h" name="GridLayoutModule.h" local="no" imported="no">ogdf/module/GridLayoutModule.h</includes>
    <includes id="_module_option_8h" name="ModuleOption.h" local="no" imported="no">ogdf/basic/ModuleOption.h</includes>
    <includes id="_augmentation_module_8h" name="AugmentationModule.h" local="no" imported="no">ogdf/module/AugmentationModule.h</includes>
    <includes id="_shelling_order_module_8h" name="ShellingOrderModule.h" local="no" imported="no">ogdf/module/ShellingOrderModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::PlanarStraightLayout</class>
  </compound>
  <compound kind="file">
    <name>ShellingOrder.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_shelling_order_8h</filename>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ShellingOrderSet</class>
    <class kind="class">ogdf::ShellingOrder</class>
  </compound>
  <compound kind="file">
    <name>TriconnectedShellingOrder.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>_triconnected_shelling_order_8h</filename>
    <includes id="_shelling_order_module_8h" name="ShellingOrderModule.h" local="no" imported="no">ogdf/module/ShellingOrderModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::TriconnectedShellingOrder</class>
  </compound>
  <compound kind="file">
    <name>SimDraw.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>_sim_draw_8h</filename>
    <includes id="_graph_attributes_8h" name="GraphAttributes.h" local="no" imported="no">ogdf/basic/GraphAttributes.h</includes>
    <includes id="_graph_copy_8h" name="GraphCopy.h" local="no" imported="no">ogdf/basic/GraphCopy.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimDraw</class>
  </compound>
  <compound kind="file">
    <name>SimDrawCaller.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>_sim_draw_caller_8h</filename>
    <includes id="_sim_draw_manipulator_module_8h" name="SimDrawManipulatorModule.h" local="no" imported="no">ogdf/simultaneous/SimDrawManipulatorModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimDrawCaller</class>
  </compound>
  <compound kind="file">
    <name>SimDrawColorizer.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>_sim_draw_colorizer_8h</filename>
    <includes id="_sim_draw_manipulator_module_8h" name="SimDrawManipulatorModule.h" local="no" imported="no">ogdf/simultaneous/SimDrawManipulatorModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimDrawColorizer</class>
    <class kind="class">ogdf::SimDrawColorizer::SimDrawColorScheme</class>
  </compound>
  <compound kind="file">
    <name>SimDrawCreator.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>_sim_draw_creator_8h</filename>
    <includes id="_sim_draw_manipulator_module_8h" name="SimDrawManipulatorModule.h" local="no" imported="no">ogdf/simultaneous/SimDrawManipulatorModule.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimDrawCreator</class>
  </compound>
  <compound kind="file">
    <name>SimDrawCreatorSimple.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>_sim_draw_creator_simple_8h</filename>
    <includes id="_sim_draw_creator_8h" name="SimDrawCreator.h" local="no" imported="no">ogdf/simultaneous/SimDrawCreator.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimDrawCreatorSimple</class>
  </compound>
  <compound kind="file">
    <name>SimDrawManipulatorModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>_sim_draw_manipulator_module_8h</filename>
    <includes id="_sim_draw_8h" name="SimDraw.h" local="no" imported="no">ogdf/simultaneous/SimDraw.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::SimDrawManipulatorModule</class>
  </compound>
  <compound kind="file">
    <name>TwoLayerCrossMinSimDraw.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>_two_layer_cross_min_sim_draw_8h</filename>
    <includes id="_two_layer_cross_min_8h" name="TwoLayerCrossMin.h" local="no" imported="no">ogdf/module/TwoLayerCrossMin.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::TwoLayerCrossMinSimDraw</class>
  </compound>
  <compound kind="file">
    <name>RadialTreeLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/tree/</path>
    <filename>_radial_tree_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::RadialTreeLayout</class>
    <class kind="struct">ogdf::RadialTreeLayout::Group</class>
    <class kind="class">ogdf::RadialTreeLayout::Grouping</class>
  </compound>
  <compound kind="file">
    <name>TreeLayout.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/tree/</path>
    <filename>_tree_layout_8h</filename>
    <includes id="_layout_module_8h" name="LayoutModule.h" local="no" imported="no">ogdf/module/LayoutModule.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::TreeLayout</class>
  </compound>
  <compound kind="file">
    <name>ExpansionGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/upward/</path>
    <filename>_expansion_graph_8h</filename>
    <includes id="_edge_array_8h" name="EdgeArray.h" local="no" imported="no">ogdf/basic/EdgeArray.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::ExpansionGraph</class>
  </compound>
  <compound kind="file">
    <name>FaceSinkGraph.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/upward/</path>
    <filename>_face_sink_graph_8h</filename>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::FaceSinkGraph</class>
  </compound>
  <compound kind="file">
    <name>UpwardPlanarModule.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/upward/</path>
    <filename>_upward_planar_module_8h</filename>
    <includes id="_combinatorial_embedding_8h" name="CombinatorialEmbedding.h" local="no" imported="no">ogdf/basic/CombinatorialEmbedding.h</includes>
    <includes id="_node_array_8h" name="NodeArray.h" local="no" imported="no">ogdf/basic/NodeArray.h</includes>
    <includes id="_s_list_8h" name="SList.h" local="no" imported="no">ogdf/basic/SList.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::UpwardPlanarModule</class>
    <class kind="struct">ogdf::UpwardPlanarModule::DegreeInfo</class>
  </compound>
  <compound kind="file">
    <name>UpwardPlanarSubgraphSimple.h</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/upward/</path>
    <filename>_upward_planar_subgraph_simple_8h</filename>
    <includes id="_upward_planar_subgraph_module_8h" name="UpwardPlanarSubgraphModule.h" local="no" imported="no">ogdf/module/UpwardPlanarSubgraphModule.h</includes>
    <includes id="tuples_8h" name="tuples.h" local="no" imported="no">ogdf/basic/tuples.h</includes>
    <namespace>ogdf</namespace>
    <class kind="class">ogdf::UpwardPlanarSubgraphSimple</class>
  </compound>
  <compound kind="class">
    <name>OgdfInitialization</name>
    <filename>class_ogdf_initialization.html</filename>
    <member kind="function">
      <type></type>
      <name>OgdfInitialization</name>
      <anchorfile>class_ogdf_initialization.html</anchorfile>
      <anchor>ce003e8a96941c2f3c9dae83d77edeea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OgdfInitialization</name>
      <anchorfile>class_ogdf_initialization.html</anchorfile>
      <anchor>8f4abea3ea9cb436b975ea74fd4f587b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>s_count</name>
      <anchorfile>class_ogdf_initialization.html</anchorfile>
      <anchor>4b98ec6e03a232fceffa8a15197702a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ogdf</name>
    <filename>namespaceogdf.html</filename>
    <class kind="class">ogdf::DfsMakeBiconnected</class>
    <class kind="class">ogdf::labelStruct</class>
    <class kind="class">ogdf::PlanarAugmentation</class>
    <class kind="class">ogdf::PlanarAugmentationFix</class>
    <class kind="class">ogdf::AdjEntryArrayBase</class>
    <class kind="class">ogdf::AdjEntryArray</class>
    <class kind="class">ogdf::Array</class>
    <class kind="class">ogdf::Array2D</class>
    <class kind="class">ogdf::ArrayBuffer</class>
    <class kind="class">ogdf::Comparer</class>
    <class kind="class">ogdf::DefComparer</class>
    <class kind="class">ogdf::DefComparer&lt; int &gt;</class>
    <class kind="class">ogdf::BucketFunc</class>
    <class kind="class">ogdf::BinaryHeap</class>
    <class kind="class">ogdf::BoundedQueue</class>
    <class kind="class">ogdf::BoundedStack</class>
    <class kind="class">ogdf::FaceElement</class>
    <class kind="class">ogdf::ConstCombinatorialEmbedding</class>
    <class kind="class">ogdf::CombinatorialEmbedding</class>
    <class kind="class">ogdf::DualGraph</class>
    <class kind="class">ogdf::EdgeArrayBase</class>
    <class kind="class">ogdf::EdgeArray</class>
    <class kind="class">ogdf::BucketEdgeArray</class>
    <class kind="class">ogdf::EdgeComparer</class>
    <class kind="class">ogdf::Exception</class>
    <class kind="class">ogdf::DynamicCastFailedException</class>
    <class kind="class">ogdf::InsufficientMemoryException</class>
    <class kind="class">ogdf::PreconditionViolatedException</class>
    <class kind="class">ogdf::AlgorithmFailureException</class>
    <class kind="class">ogdf::LibraryNotSupportedException</class>
    <class kind="class">ogdf::FaceArrayBase</class>
    <class kind="class">ogdf::FaceArray</class>
    <class kind="class">ogdf::FaceSetSimple</class>
    <class kind="class">ogdf::FaceSetPure</class>
    <class kind="class">ogdf::FaceSet</class>
    <class kind="class">ogdf::GenericPoint</class>
    <class kind="class">ogdf::IPoint</class>
    <class kind="class">ogdf::DefHashFunc&lt; IPoint &gt;</class>
    <class kind="class">ogdf::IPolyline</class>
    <class kind="class">ogdf::DPoint</class>
    <class kind="class">ogdf::DVector</class>
    <class kind="class">ogdf::DPolyline</class>
    <class kind="class">ogdf::DLine</class>
    <class kind="class">ogdf::DRect</class>
    <class kind="class">ogdf::DScaler</class>
    <class kind="class">ogdf::DSegment</class>
    <class kind="class">ogdf::DPolygon</class>
    <class kind="class">ogdf::GraphElement</class>
    <class kind="class">ogdf::GraphListBase</class>
    <class kind="class">ogdf::GraphList</class>
    <class kind="class">ogdf::AdjElement</class>
    <class kind="class">ogdf::NodeElement</class>
    <class kind="class">ogdf::EdgeElement</class>
    <class kind="class">ogdf::Graph</class>
    <class kind="class">ogdf::BucketSourceIndex</class>
    <class kind="class">ogdf::BucketTargetIndex</class>
    <class kind="class">ogdf::GraphAttributes</class>
    <class kind="class">ogdf::GraphCopySimple</class>
    <class kind="class">ogdf::GraphCopy</class>
    <class kind="class">ogdf::GraphCopyAttributes</class>
    <class kind="class">ogdf::GraphObserver</class>
    <class kind="class">ogdf::GridLayout</class>
    <class kind="class">ogdf::GridLayoutMapped</class>
    <class kind="class">ogdf::HashArray</class>
    <class kind="class">ogdf::HashArray2D</class>
    <class kind="class">ogdf::HashElementBase</class>
    <class kind="class">ogdf::HashingBase</class>
    <class kind="class">ogdf::HashElement</class>
    <class kind="class">ogdf::DefHashFunc</class>
    <class kind="class">ogdf::DefHashFunc&lt; void * &gt;</class>
    <class kind="class">ogdf::DefHashFunc&lt; double &gt;</class>
    <class kind="class">ogdf::Hashing</class>
    <class kind="class">ogdf::HashConstIterator</class>
    <class kind="class">ogdf::HashConstIterator2D</class>
    <class kind="class">ogdf::HeapBase</class>
    <class kind="class">ogdf::IncNodeInserter</class>
    <class kind="class">ogdf::Layout</class>
    <class kind="class">ogdf::ListElement</class>
    <class kind="class">ogdf::ListIterator</class>
    <class kind="class">ogdf::ListConstIterator</class>
    <class kind="class">ogdf::ListPure</class>
    <class kind="class">ogdf::List</class>
    <class kind="class">ogdf::Logger</class>
    <class kind="class">ogdf::Math</class>
    <class kind="struct">ogdf::MemElem</class>
    <class kind="class">ogdf::MemoryManager</class>
    <class kind="class">ogdf::SimpleMemoryManager</class>
    <class kind="class">ogdf::Valued</class>
    <class kind="class">ogdf::MinHeap</class>
    <class kind="class">ogdf::Top10Heap</class>
    <class kind="class">ogdf::Module</class>
    <class kind="class">ogdf::ModuleOption</class>
    <class kind="class">ogdf::NearestRectangleFinder</class>
    <class kind="class">ogdf::NodeArrayBase</class>
    <class kind="class">ogdf::NodeArray</class>
    <class kind="class">ogdf::NodeComparer</class>
    <class kind="class">ogdf::NodeSetSimple</class>
    <class kind="class">ogdf::NodeSetPure</class>
    <class kind="class">ogdf::NodeSet</class>
    <class kind="class">ogdf::QueuePure</class>
    <class kind="class">ogdf::Queue</class>
    <class kind="class">ogdf::Skiplist</class>
    <class kind="class">ogdf::SkiplistIterator</class>
    <class kind="class">ogdf::SListElement</class>
    <class kind="class">ogdf::SListIterator</class>
    <class kind="class">ogdf::SListConstIterator</class>
    <class kind="class">ogdf::SListPure</class>
    <class kind="class">ogdf::SList</class>
    <class kind="class">ogdf::StackPure</class>
    <class kind="class">ogdf::Stack</class>
    <class kind="class">ogdf::String</class>
    <class kind="class">ogdf::DefHashFunc&lt; String &gt;</class>
    <class kind="class">ogdf::Timeouter</class>
    <class kind="class">ogdf::TopologyModule</class>
    <class kind="class">ogdf::PointComparer</class>
    <class kind="class">ogdf::EdgeLeg</class>
    <class kind="class">ogdf::Tuple2</class>
    <class kind="class">ogdf::Tuple3</class>
    <class kind="class">ogdf::Tuple4</class>
    <class kind="class">ogdf::HashFuncTuple</class>
    <class kind="class">ogdf::UMLGraph</class>
    <class kind="class">ogdf::CconnectClusterPlanar</class>
    <class kind="class">ogdf::CconnectClusterPlanarEmbed</class>
    <class kind="class">ogdf::ClusterArrayBase</class>
    <class kind="class">ogdf::ClusterArray</class>
    <class kind="class">ogdf::ClusterElement</class>
    <class kind="class">ogdf::ClusterGraph</class>
    <class kind="class">ogdf::ClusterInfo</class>
    <class kind="class">ogdf::ClusterGraphAttributes</class>
    <class kind="class">ogdf::ClusterGraphCopyAttributes</class>
    <class kind="class">ogdf::ClusterGraphObserver</class>
    <class kind="class">ogdf::ClusterOrthoLayout</class>
    <class kind="class">ogdf::ClusterOrthoShaper</class>
    <class kind="class">ogdf::ClusterPlanarizationLayout</class>
    <class kind="class">ogdf::ClusterPlanRep</class>
    <class kind="class">ogdf::ClusterSetSimple</class>
    <class kind="class">ogdf::ClusterSetPure</class>
    <class kind="class">ogdf::ClusterSet</class>
    <class kind="class">ogdf::NodePair</class>
    <class kind="class">ogdf::CPlanarEdgeInserter</class>
    <class kind="class">ogdf::CPlanarSubClusteredGraph</class>
    <class kind="class">ogdf::BCTree</class>
    <class kind="class">ogdf::DynamicBCTree</class>
    <class kind="class">ogdf::DynamicPlanarSPQRTree</class>
    <class kind="class">ogdf::DynamicSkeleton</class>
    <class kind="class">ogdf::DynamicSPQRForest</class>
    <class kind="class">ogdf::DynamicSPQRTree</class>
    <class kind="class">ogdf::PertinentGraph</class>
    <class kind="class">ogdf::PlanarSPQRTree</class>
    <class kind="class">ogdf::Skeleton</class>
    <class kind="class">ogdf::SPQRTree</class>
    <class kind="class">ogdf::StaticPlanarSPQRTree</class>
    <class kind="class">ogdf::StaticSkeleton</class>
    <class kind="class">ogdf::StaticSPQRTree</class>
    <class kind="class">ogdf::TutteLayout</class>
    <class kind="class">ogdf::DavidsonHarel</class>
    <class kind="class">ogdf::DavidsonHarelLayout</class>
    <class kind="class">ogdf::FMMMLayout</class>
    <class kind="class">ogdf::GEMLayout</class>
    <class kind="class">ogdf::SpringEmbedderFR</class>
    <class kind="class">ogdf::CoinCallbacks</class>
    <class kind="class">ogdf::CoinManager</class>
    <class kind="class">ogdf::DinoLineBufferPosition</class>
    <class kind="class">ogdf::DinoLineBuffer</class>
    <class kind="class">ogdf::DinoTools</class>
    <class kind="class">ogdf::DinoUmlDiagramGraph</class>
    <class kind="class">ogdf::DinoUmlModelGraph</class>
    <class kind="class">ogdf::DinoUmlToGraphConverter</class>
    <class kind="struct">ogdf::XmlAttributeObject</class>
    <class kind="struct">ogdf::XmlTagObject</class>
    <class kind="class">ogdf::DinoXmlParser</class>
    <class kind="class">ogdf::DinoXmlScanner</class>
    <class kind="struct">ogdf::GmlObject</class>
    <class kind="class">ogdf::GmlParser</class>
    <class kind="struct">ogdf::XmlObject</class>
    <class kind="class">ogdf::XmlParser</class>
    <class kind="class">ogdf::CliqueFinder</class>
    <class kind="class">ogdf::Clusterer</class>
    <class kind="class">ogdf::GraphReduction</class>
    <class kind="class">ogdf::MinCostFlowReinelt</class>
    <class kind="class">ogdf::MinCut</class>
    <class kind="class">ogdf::ShortestPathWithBFM</class>
    <class kind="class">ogdf::ClusterPQContainer</class>
    <class kind="class">ogdf::CPlanarSubClusteredST</class>
    <class kind="class">ogdf::AdjacencyOracle</class>
    <class kind="class">ogdf::Attraction</class>
    <class kind="class">ogdf::EdgeAttributes</class>
    <class kind="class">ogdf::EnergyFunction</class>
    <class kind="class">ogdf::FruchtermanReingold</class>
    <class kind="class">ogdf::IntersectionRectangle</class>
    <class kind="class">ogdf::NMM</class>
    <class kind="class">ogdf::NodeAttributes</class>
    <class kind="class">ogdf::NodePairEnergy</class>
    <class kind="class">ogdf::Overlap</class>
    <class kind="class">ogdf::ParticleInfo</class>
    <class kind="class">ogdf::ParticleInfoComparer</class>
    <class kind="class">ogdf::Planarity</class>
    <class kind="class">ogdf::PlanarityGrid</class>
    <class kind="class">ogdf::QuadTreeNM</class>
    <class kind="class">ogdf::QuadTreeNodeNM</class>
    <class kind="class">ogdf::Repulsion</class>
    <class kind="class">ogdf::UniformGrid</class>
    <class kind="class">ogdf::LPSolver</class>
    <class kind="class">ogdf::NodeInfo</class>
    <class kind="class">ogdf::RoutingChannel</class>
    <class kind="class">ogdf::BoyerMyrvoldInit</class>
    <class kind="class">ogdf::BucketLowPoint</class>
    <class kind="class">ogdf::BoyerMyrvoldPlanar</class>
    <class kind="class">ogdf::ConnectedSubgraph</class>
    <class kind="class">ogdf::EmbedderMaxFaceBiconnectedGraphs</class>
    <class kind="class">ogdf::EmbedderMaxFaceBiconnectedGraphsLayers</class>
    <class kind="class">ogdf::mdmf_la</class>
    <class kind="class">ogdf::EmbedIndicator</class>
    <class kind="class">ogdf::indInfo</class>
    <class kind="class">ogdf::embedKey</class>
    <class kind="class">ogdf::EmbedPQTree</class>
    <class kind="struct">ogdf::ExternE</class>
    <class kind="struct">ogdf::WInfo</class>
    <class kind="class">ogdf::KuratowskiStructure</class>
    <class kind="class">ogdf::FindKuratowskis</class>
    <class kind="class">ogdf::MaxSequencePQTree</class>
    <class kind="class">ogdf::PlanarLeafKey</class>
    <class kind="class">ogdf::PlanarPQTree</class>
    <class kind="class">ogdf::PlanarSubgraphPQTree</class>
    <class kind="class">ogdf::PQBasicKey</class>
    <class kind="class">ogdf::PQBasicKeyRoot</class>
    <class kind="class">ogdf::PQInternalKey</class>
    <class kind="class">ogdf::PQInternalNode</class>
    <class kind="class">ogdf::PQLeaf</class>
    <class kind="class">ogdf::PQLeafKey</class>
    <class kind="class">ogdf::PQNode</class>
    <class kind="class">ogdf::PQNodeKey</class>
    <class kind="class">ogdf::PQNodeRoot</class>
    <class kind="class">ogdf::PQTree</class>
    <class kind="class">ogdf::PQTreeRoot</class>
    <class kind="class">ogdf::whaInfo</class>
    <class kind="class">ogdf::whaKey</class>
    <class kind="class">ogdf::ELabelPos</class>
    <class kind="class">ogdf::EdgeLabel</class>
    <class kind="class">ogdf::ELabelInterface</class>
    <class kind="class">ogdf::ELabelPosSimple</class>
    <class kind="class">ogdf::BarycenterHeuristic</class>
    <class kind="class">ogdf::CrossingsMatrix</class>
    <class kind="class">ogdf::DfsAcyclicSubgraph</class>
    <class kind="struct">ogdf::RCCrossings</class>
    <class kind="class">ogdf::LHTreeNode</class>
    <class kind="class">ogdf::ENGLayer</class>
    <class kind="class">ogdf::ClusterGraphCopy</class>
    <class kind="class">ogdf::ExtendedNestingGraph</class>
    <class kind="class">ogdf::withKey</class>
    <class kind="class">ogdf::cmpWithKey</class>
    <class kind="class">ogdf::kList</class>
    <class kind="class">ogdf::FastHierarchyLayout</class>
    <class kind="class">ogdf::GreedyCycleRemoval</class>
    <class kind="class">ogdf::Hierarchy</class>
    <class kind="class">ogdf::Level</class>
    <class kind="class">ogdf::LongestPathRanking</class>
    <class kind="class">ogdf::MedianHeuristic</class>
    <class kind="class">ogdf::OptimalHierarchyClusterLayout</class>
    <class kind="class">ogdf::OptimalHierarchyLayout</class>
    <class kind="class">ogdf::OptimalRanking</class>
    <class kind="class">ogdf::SplitHeuristic</class>
    <class kind="class">ogdf::SugiyamaLayout</class>
    <class kind="class">ogdf::BalloonLayout</class>
    <class kind="class">ogdf::CircularLayout</class>
    <class kind="class">ogdf::AcyclicSubgraphModule</class>
    <class kind="class">ogdf::AugmentationModule</class>
    <class kind="class">ogdf::CCLayoutPackModule</class>
    <class kind="class">ogdf::SimpleCluster</class>
    <class kind="class">ogdf::ClustererModule</class>
    <class kind="class">ogdf::CrossingMinimizationModule</class>
    <class kind="class">ogdf::EdgeInsertionModule</class>
    <class kind="class">ogdf::EmbedderModule</class>
    <class kind="class">ogdf::GridLayoutModule</class>
    <class kind="class">ogdf::PlanarGridLayoutModule</class>
    <class kind="class">ogdf::GridLayoutPlanRepModule</class>
    <class kind="class">ogdf::HierarchyClusterLayoutModule</class>
    <class kind="class">ogdf::HierarchyLayoutModule</class>
    <class kind="class">ogdf::LayoutClusterPlanRepModule</class>
    <class kind="class">ogdf::LayoutModule</class>
    <class kind="class">ogdf::LayoutPlanRepModule</class>
    <class kind="class">ogdf::MinCostFlowModule</class>
    <class kind="class">ogdf::MixedModelCrossingsBeautifierModule</class>
    <class kind="class">ogdf::MMDummyCrossingsBeautifier</class>
    <class kind="class">ogdf::MMCrossingMinimizationModule</class>
    <class kind="class">ogdf::MMEdgeInsertionModule</class>
    <class kind="class">ogdf::PlanarSubgraphModule</class>
    <class kind="class">ogdf::RankingModule</class>
    <class kind="class">ogdf::ShellingOrderModule</class>
    <class kind="class">ogdf::ShortestPathModule</class>
    <class kind="class">ogdf::TwoLayerCrossMin</class>
    <class kind="class">ogdf::UMLLayoutModule</class>
    <class kind="class">ogdf::UpwardPlanarSubgraphModule</class>
    <class kind="class">ogdf::CompactionConstraintGraphBase</class>
    <class kind="class">ogdf::CompactionConstraintGraph</class>
    <class kind="class">ogdf::EdgeRouter</class>
    <class kind="class">ogdf::FlowCompaction</class>
    <class kind="class">ogdf::LongestPathCompaction</class>
    <class kind="class">ogdf::MinimumEdgeDistances</class>
    <class kind="class">ogdf::OrthoLayout</class>
    <class kind="class">ogdf::BendString</class>
    <class kind="class">ogdf::OrthoRep</class>
    <class kind="class">ogdf::OrthoShaper</class>
    <class kind="class">ogdf::TileToRowsCCPacker</class>
    <class kind="class">ogdf::BoyerMyrvold</class>
    <class kind="class">ogdf::EmbedderMaxFace</class>
    <class kind="class">ogdf::EmbedderMaxFaceLayers</class>
    <class kind="class">ogdf::EmbedderMinDepth</class>
    <class kind="class">ogdf::EmbedderMinDepthMaxFace</class>
    <class kind="class">ogdf::EmbedderMinDepthMaxFaceLayers</class>
    <class kind="class">ogdf::EmbedderMinDepthPiTa</class>
    <class kind="class">ogdf::DynamicBacktrack</class>
    <class kind="class">ogdf::KuratowskiWrapper</class>
    <class kind="class">ogdf::ExtractKuratowskis</class>
    <class kind="class">ogdf::FastPlanarSubgraph</class>
    <class kind="class">ogdf::FixedEmbeddingInserter</class>
    <class kind="class">ogdf::KuratowskiSubdivision</class>
    <class kind="class">ogdf::MaximalPlanarSubgraphSimple</class>
    <class kind="class">ogdf::MMFixedEmbeddingInserter</class>
    <class kind="class">ogdf::MMSubgraphPlanarizer</class>
    <class kind="class">ogdf::MMVariableEmbeddingInserter</class>
    <class kind="class">ogdf::NonPlanarCore</class>
    <class kind="class">ogdf::PlanarizationGridLayout</class>
    <class kind="class">ogdf::PlanarizationLayout</class>
    <class kind="class">ogdf::AddNodeComparer</class>
    <class kind="class">ogdf::PlanarModule</class>
    <class kind="class">ogdf::PlanRep</class>
    <class kind="class">ogdf::PlanRepExpansion</class>
    <class kind="class">ogdf::PlanRepInc</class>
    <class kind="class">ogdf::PlanRepUML</class>
    <class kind="class">ogdf::SimpleEmbedder</class>
    <class kind="class">ogdf::SimpleIncNodeInserter</class>
    <class kind="class">ogdf::SubgraphPlanarizer</class>
    <class kind="class">ogdf::VariableEmbeddingInserter</class>
    <class kind="class">ogdf::VariableEmbeddingInserter2</class>
    <class kind="class">ogdf::BiconnectedShellingOrder</class>
    <class kind="class">ogdf::MixedModelLayout</class>
    <class kind="class">ogdf::MMCBBase</class>
    <class kind="class">ogdf::MMCBDoubleGrid</class>
    <class kind="class">ogdf::MMCBLocalStretch</class>
    <class kind="class">ogdf::PlanarDrawLayout</class>
    <class kind="class">ogdf::PlanarStraightLayout</class>
    <class kind="class">ogdf::ShellingOrderSet</class>
    <class kind="class">ogdf::ShellingOrder</class>
    <class kind="class">ogdf::TriconnectedShellingOrder</class>
    <class kind="class">ogdf::SimDraw</class>
    <class kind="class">ogdf::SimDrawCaller</class>
    <class kind="class">ogdf::SimDrawColorizer</class>
    <class kind="class">ogdf::SimDrawCreator</class>
    <class kind="class">ogdf::SimDrawCreatorSimple</class>
    <class kind="class">ogdf::SimDrawManipulatorModule</class>
    <class kind="class">ogdf::TwoLayerCrossMinSimDraw</class>
    <class kind="class">ogdf::RadialTreeLayout</class>
    <class kind="class">ogdf::TreeLayout</class>
    <class kind="class">ogdf::ExpansionGraph</class>
    <class kind="class">ogdf::FaceSinkGraph</class>
    <class kind="class">ogdf::UpwardPlanarModule</class>
    <class kind="class">ogdf::UpwardPlanarSubgraphSimple</class>
    <member kind="typedef">
      <type>labelStruct *</type>
      <name>label</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b2a3762ee4e8c1b268ff8e6bba123619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceElement *</type>
      <name>face</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>fc2cdb02913f6019e953897ef0c0b2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeElement *</type>
      <name>node</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ab7fa381c31d9d41aaeec9046392b323</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeElement *</type>
      <name>edge</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b994e376393ed171d84732d377289881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AdjElement *</type>
      <name>adjEntry</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>47dc56138d60ee98d8ceb8f4ea3a3848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MemElem *</type>
      <name>MemElemPtr</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>563f0e0c64215824126ba6c1e653dcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterElement *</type>
      <name>cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4cc62da82e411458d24d4dc76c9261c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HashElement&lt; String, int &gt;</type>
      <name>HashedString</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3a68abefed1296cc3e60abfe9a74df2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HashElement&lt; String, int &gt; *</type>
      <name>GmlKey</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b78b4a76e5f947017e1cd6e60b4be1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HashElement&lt; String, int &gt; *</type>
      <name>XmlKey</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>91ca5a7e44559937ed7df5dc09ad8b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PQBasicKey&lt; edge, indInfo *, bool &gt; *</type>
      <name>PtrPQBasicKeyEIB</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>67c807916864c686b00a9458fcbfd64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlanarLeafKey&lt; indInfo * &gt; *</type>
      <name>PtrPlanarLeafKeyI</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ff517b8213ecb8cacbf1c4e337d837ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PQLeafKey&lt; edge, whaInfo *, bool &gt; *</type>
      <name>PtrPQLeafKeyEWB</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>21cf937583951c19c69c92bd74e05937</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlanarLeafKey&lt; whaInfo * &gt; *</type>
      <name>PtrPlanarLeafKeyW</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2fff5263950481b322b8e013eb98de96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>edgeType</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b6b74eedd298fbff718d17e5c51eb7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>nodeType</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c235dd0ef8c44b38d2acf5e381dd52f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>paStopCause</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paPlanarity</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a00c404f0bed479d12bb9faf174a3dada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paCDegree</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a5f00e6d348cc120b7c071d18ff6755a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paBDegree</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a10b86a49b601bb65eff5e8a897391a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>paRoot</name>
      <anchor>5ba808ad9ba9cde7cd4f5403201e790a8ad6d0255909e1432c5691dbbe37db18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Direction</name>
      <anchor>c7625914963ce9d09a3e208f02d12f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>before</name>
      <anchor>c7625914963ce9d09a3e208f02d12f2b316bd36a4da63c26954690d7624c4429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>after</name>
      <anchor>c7625914963ce9d09a3e208f02d12f2b4c63159e8c0fde2efcf369d1251e43ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>FileType</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ftEntry</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db66f27df27d55586ddf4337f25fdd986c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ftFile</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db625701f1ef7ac12b6b4a865e38626ef59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ftDirectory</name>
      <anchor>f62296bcdc1fc7e80de97a4860038db6368c783c8457e1212e3fa95f24118cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PreconditionViolatedCode</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcUnknown</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b897c771333552d4fcb84b170b3b793194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcSelfLoop</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b841967e3afb65e57092c93cda34d08e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcTreeHierarchies</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8287bfbf467e89ec99a7a6a31a7400e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcAcyclicHierarchies</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8267c7e33088ead608def5d17f0e024ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcSingleSource</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8e2a969783265d1f7b99998e5ab02619e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcUpwardPlanar</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b83f68e1250fb50d52b480621b946f4eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcTree</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b83e1d12e489d752aecf56f320adfa6742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcForest</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b883f39e77ee5be9b6369a0ee91d406418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcOrthogonal</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8c955499d6aeca842125368d047ab16e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcPlanar</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8d38b354c53e86ef587e12458655637a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcClusterPlanar</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b87da4e94cdb25cd10537fe64b0e37db1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcNoCopy</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b834d12405a3cfac33d3b6365be739246b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcConnected</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8b37504547101a8765d9335724f53af94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcBiconnected</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b849788b8304fd579f04e144d72eea6f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pvcSTOP</name>
      <anchor>d6b355cc7cc38d6afa49936c70ada2b8e815392bc9bdce25e3ea0fd37fef998e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AlgorithmFailureCode</name>
      <anchor>1fca16209583971af6d681f7bee9863e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcUnknown</name>
      <anchor>1fca16209583971af6d681f7bee9863e0a2868f69254cc37b2ef4f9a437893ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcIllegalParameter</name>
      <anchor>1fca16209583971af6d681f7bee9863e7dcf43efb29c203b924f8de4f24348b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcNoFlow</name>
      <anchor>1fca16209583971af6d681f7bee9863e3bc8ba48ea0941a7d45d05b6e444f811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcSort</name>
      <anchor>1fca16209583971af6d681f7bee9863e2266d401f882a51e62124ed19c062dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcLabel</name>
      <anchor>1fca16209583971af6d681f7bee9863e8f0f6583bd9a5e00235f12f47e023cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcExternalFace</name>
      <anchor>1fca16209583971af6d681f7bee9863e4cbf7a942b16b7e435b4934ac270d52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcForbiddenCrossing</name>
      <anchor>1fca16209583971af6d681f7bee9863e5b5c96977c38ac8b2db553558cafe346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcTimelimitExceeded</name>
      <anchor>1fca16209583971af6d681f7bee9863ea993ed874adfeaf3afeebcc81a71c9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcNoSolutionFound</name>
      <anchor>1fca16209583971af6d681f7bee9863e6467e080493d552274e587c95c6cd668</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afcSTOP</name>
      <anchor>1fca16209583971af6d681f7bee9863e36429f7673c1781b3e6bdd4f449dba2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LibraryNotSupportedCode</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscUnknown</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc445aa2eb7dc4cdc606139fe5ffd4c8e39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscCoin</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc44ca6c5d6da756b8a19f4b00198e959736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscAbacus</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc446310f06f4656085183b6f83adc6e9ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscFunctionNotImplemented</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc4439d8c3b48f5d823137165bc58c80e7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscMissingCallbackImplementation</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc44dfc28858ec2193c0996803468b268b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lnscSTOP</name>
      <anchor>6af9bffecf5e8eb78fb1288985f6bc448d693c4b4daf3b4cc518fd7813c1084f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Orientation</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>topToBottom</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2eabfc7ba02afcecd0813a45d57ff68fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottomToTop</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2331e545853b0102965447f7574cd46f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>leftToRight</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe225f4540477c893ff9daa8524a659490f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rightToLeft</name>
      <anchor>4c7fa2c473d2bbd159ca465d748fcbe2f84578dd40360f99554225c80bd1ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>bendCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b138f8d9773bc3a5c58241981f8a1ac97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>topDownCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b9eda9f92d026e06bf69fe958fc1e8ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bottomUpCost</name>
      <anchor>925bfe271984d8fe7dfb4b279bd5b94b4d0ccba118d2ea2873096feb4d04670e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>XmlToken</name>
      <anchor>822fe23411206276c7065c10a6689b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>openingBracket</name>
      <anchor>822fe23411206276c7065c10a6689b6c219a2212ec1ba0fdf94d52bb0554d18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>closingBracket</name>
      <anchor>822fe23411206276c7065c10a6689b6c08d3c0ae2e9f378b20038541b2238b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>questionMark</name>
      <anchor>822fe23411206276c7065c10a6689b6cf47cb6b5da8850ca599bd3b1d6c94587</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>exclamationMark</name>
      <anchor>822fe23411206276c7065c10a6689b6ccd8ed505eb4dbe5c8213676550c240f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minus</name>
      <anchor>822fe23411206276c7065c10a6689b6ce7104b46d019abe16a02bf0b1e9d7fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>slash</name>
      <anchor>822fe23411206276c7065c10a6689b6c3f802a8add6aa8d3f188fe735e2a2462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>equalSign</name>
      <anchor>822fe23411206276c7065c10a6689b6c6d1f0bb601b497c768f006177b782bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>identifier</name>
      <anchor>822fe23411206276c7065c10a6689b6cbc5910090fa3a645dad67c17fc5d4278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>attributeValue</name>
      <anchor>822fe23411206276c7065c10a6689b6ce6d0b5dd9bf6b12473f6b0c385cd4e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quotedValue</name>
      <anchor>822fe23411206276c7065c10a6689b6c476f9b42fee48ed9d7abfed3b603634e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>endOfFile</name>
      <anchor>822fe23411206276c7065c10a6689b6cbaca55a3d517ebfd535ae54afc689d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalidToken</name>
      <anchor>822fe23411206276c7065c10a6689b6c70f5a62fd7a8b628b796af8a87024b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noToken</name>
      <anchor>822fe23411206276c7065c10a6689b6c6f18c1c390af96ba6da01a5b73aef6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GmlObjectType</name>
      <anchor>13e68833971aca99db78ac2d5f502428</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlIntValue</name>
      <anchor>13e68833971aca99db78ac2d5f50242896271babe3e09dd197dea3ea1706326f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlDoubleValue</name>
      <anchor>13e68833971aca99db78ac2d5f502428b7ae245ff0c0375bb5e1b1d7bc79af2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlStringValue</name>
      <anchor>13e68833971aca99db78ac2d5f502428b5dc7d42a2c3c4ec284ae304efc37994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlListBegin</name>
      <anchor>13e68833971aca99db78ac2d5f502428d86447f502f2ac91a955dc3e3f7c9be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlListEnd</name>
      <anchor>13e68833971aca99db78ac2d5f5024283e2d37726523f90951aebf23ae72cb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlKey</name>
      <anchor>13e68833971aca99db78ac2d5f502428e4dadf43c0c5b705873e67e76c6f6e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlEOF</name>
      <anchor>13e68833971aca99db78ac2d5f50242865851ccc44d28b116b1b017d980ef42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gmlError</name>
      <anchor>13e68833971aca99db78ac2d5f5024288cb6650ac092838f5dff61374bf98f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>XmlObjectType</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlIntValue</name>
      <anchor>ceff084728c3836eb417fc5c96d8eebabaad016e6b903469f8da1c415b67521f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlDoubleValue</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba38fa204b84ca75207c48cae0ccc87427</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlStringValue</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba831df7e94ba90705d3bcd16283e66b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlListBegin</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba0daddfc49ed31ee45aa81e4006e03411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlListEnd</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba4eef6fc45f920ecf5fa084c35f4505b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlBody</name>
      <anchor>ceff084728c3836eb417fc5c96d8eebaecb9b647e565888c0cde020b4ff9ace3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlKey</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba22187adc6e404064a0c3670a0db33a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlEOF</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba6b2e5559579a2614797c05886c5d6708</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmlError</name>
      <anchor>ceff084728c3836eb417fc5c96d8eeba99873d3bbc613db0d484a67ba8431f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>enumDirection</name>
      <anchor>4b216693fd93da9ed00497c9f795c79a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCW</name>
      <anchor>4b216693fd93da9ed00497c9f795c79ae7bf42e57859ea732889c78228cb960f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CW</name>
      <anchor>4b216693fd93da9ed00497c9f795c79a668ae5437fe32013130a6310eaae15be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>enumEdgeType</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_UNDEFINED</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71ee8ab991502569243c8a2c55479d08c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_SELFLOOP</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71ec3a2c4196e7564c07c6408bf54427a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_BACK</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71ebaf1cb0d39de7a2eb3927c709b386b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_DFS</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e36af3cc8498e1874f0dbe87a7ba07093</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_DFS_PARALLEL</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e3736282cade7d4d0ce4cb67a61d51455</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE_BACK_DELETED</name>
      <anchor>0f9e7ce5df7d39b37cae28fa4783d71e7f46c3620545f56b30b233837024c4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SibDirection</name>
      <anchor>82ba1243383d7a4d390329dbddf03171</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODIR</name>
      <anchor>82ba1243383d7a4d390329dbddf03171588e02f97b61d802762753c3be242b0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT</name>
      <anchor>82ba1243383d7a4d390329dbddf03171705615b3d8ecfa91cc3cb251399655ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT</name>
      <anchor>82ba1243383d7a4d390329dbddf03171b2bbd1420e64d1fdeee7224f9505c7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>whaType</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>W_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e1523feb15e95919178972b2029b3e9e3149</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>B_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e1525fbc043442419bd40e4e5ffb4c941470</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e15299384ecd4cbe1fdc8fad6413e5163bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A_TYPE</name>
      <anchor>c143ef80abc00ee193e7b5780fe1e15212c672e65a6e0bc79db770402478e446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OutputParameter</name>
      <anchor>6dc5527490663c8074638e3a0388739d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opStandard</name>
      <anchor>6dc5527490663c8074638e3a0388739d35933a17c58e88413b819f6b2c0b94c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opOmitIntersect</name>
      <anchor>6dc5527490663c8074638e3a0388739d65c6e3b8c3652e0920b61d32739a56ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opOmitFIntersect</name>
      <anchor>6dc5527490663c8074638e3a0388739d5d70ece7c792f113d98b179cc9b37066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opResult</name>
      <anchor>6dc5527490663c8074638e3a0388739dcb9d767aa21290c0124908b3f6be36ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>candStatus</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csAssigned</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66e5b2ea908e742d2e4340bf7d179cc8d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csFIntersect</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66eaf97cc05dcdee4b92cfc8be3683928c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csActive</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66eb146837b48f1adbc37098a887b84e0dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>csUsed</name>
      <anchor>1106fbccc0fb9a11e33442be3140f66e32b96dec90c9f7a94668a2cd1c9fe360</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>eLabelTyp</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elEnd1</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b3b955f36b0c66dd7a14a8097ccfb6ed0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elMult1</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b35620667f5d95b5930bbf138661b3d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elName</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b37f94f92f9c727925bf6881c417a3cec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elEnd2</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b317246d0edce72845636849ff4c68c9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elMult2</name>
      <anchor>82c966fcb35ba977803a033ffd25c3b3a3e5990f890497254fdc53953bd2ad48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>eUsedLabels</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lName</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478abb111115d49a74ff4f6ac58f00fb9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lEnd1</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec34784371fc9eb27b046cf7b0bca9f4713e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lMult1</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec34782499a0317e8ed6d5e548a50b58f3de1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lEnd2</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec347859f2d2de09c23483debb7bd4548465ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lMult2</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478786f4a6e04f47658bc14ed065b97ce8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lAll</name>
      <anchor>df517d97fcef2b7b1dd0f9b5feec3478e8b49404d0d63e808ef0a0c13d97d0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLOpt</name>
      <anchor>6734cb3912399f2c22c60ecba69144b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlOpAlign</name>
      <anchor>6734cb3912399f2c22c60ecba69144b96ecc8be1f1b0d04685a99980929e937f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlOpScale</name>
      <anchor>6734cb3912399f2c22c60ecba69144b9d74075f8b87faba5cda4d96f89f33310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlOpProg</name>
      <anchor>6734cb3912399f2c22c60ecba69144b93103a90a24d156decf609fa81f5bdef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ConstraintEdgeType</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetBasicArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c702f214583b488a98ad769aceec0ea3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetVertexSizeArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7cbc1fc1c88245522020ee8cc69fc11b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetVisibilityArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c4b7ad3849992a4b3e8cafac0ba49fd72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetFixToZeroArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7cfb9f70eee4e18d9b58c752310f17af28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetReducibleArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c2f0013656a404d1dd5fa39d7b415207f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cetMedianArc</name>
      <anchor>2cb1e53dd146b58e9665ba9e70fa1d7c7d692fe10aa58dcc139ad828a70d004d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>bend_type</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_free</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fb3864514efc85e6b05db555fbe990850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_1left</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fe9eb4038ce7a9138f4bc0918086b5a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_1right</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fba2b7bba69a992decd18fe92940830c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_2left</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fe53c3ce9fbe0fb745678253f65665366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bend_2right</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453ff7269a49b87d69662f145335a2bb8841</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_bf</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fadc1e01fe12654a14df48a2873ba50cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b1l</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f98a582fa53f2e16359f64132734d737c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b1r</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f51c1853d339ed1972d9ac39effc7a319</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b2l</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453f2b7722bbd9ae4803babb36e0c185cb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prob_b2r</name>
      <anchor>0829f9b3fba19cca4733ff6e3a34453fb9fad72ac2e043a19ec3665cc9853aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>process_type</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unprocessed</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c6083cc31b034e3ba1251b7f291b4a2c042</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>processed</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c602197be7070b386194b1df86450a31e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>used</name>
      <anchor>bf2d63e42c92dff7424ee06eac278c60fdd5758990a1c290a2a9a0e8112809eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OptionProfile</name>
      <anchor>85b1e82c0214df1dfd2e755da32315ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>standard</name>
      <anchor>85b1e82c0214df1dfd2e755da32315ade6e326ef95dade745c626fc53a5a6a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>minBendsperEdge</name>
      <anchor>85b1e82c0214df1dfd2e755da32315ad0832943caddb47921cafabd29d3d8c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fullService</name>
      <anchor>85b1e82c0214df1dfd2e755da32315adfd70967f89074ffd51ea085026fa62f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BendType</name>
      <anchor>55bdc97d4f6e5c427a8c0e556ddbeca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>convexBend</name>
      <anchor>55bdc97d4f6e5c427a8c0e556ddbeca299a96c14d2d6361ff0823ca7bf8e52c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reflexBend</name>
      <anchor>55bdc97d4f6e5c427a8c0e556ddbeca2207e12fa08fb29c6210576443bcbc8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OrthoDir</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odNorth</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981af3205fa2544cf374a9f84bec39024739</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odEast</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a410b93bb42406d64ed7d829d409d52c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odSouth</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a42bc342f6f7fadee98c0250fd1f7259f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odWest</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a558721cc380674afdf7c68579e4fff73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>odUndefined</name>
      <anchor>4bdd17a8ab5de5e40c436b5963be981a3065f10a673ead34e570f066ada97a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLEdgeTypePatterns</name>
      <anchor>91d5541ad84001112aa241bf09225501</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpPrimary</name>
      <anchor>91d5541ad84001112aa241bf092255010e8f11bbd33700616d2e8628d327329f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpSecondary</name>
      <anchor>91d5541ad84001112aa241bf09225501f77ae4c2f921522b044455732d6056ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpTertiary</name>
      <anchor>91d5541ad84001112aa241bf0922550137b92a26c0b3bb7b27c73b474b1e95b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpFourth</name>
      <anchor>91d5541ad84001112aa241bf09225501131e4ab57b1facaa1d9abf460f9891ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpUser</name>
      <anchor>91d5541ad84001112aa241bf09225501a2690bc417b0a2f13548930c63effcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etpAll</name>
      <anchor>91d5541ad84001112aa241bf09225501e502bb43786cd61f1088a140bf2a1a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLEdgeTypeConstants</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcPrimAssociation</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fc3bca06e29b8e0f2f8a78661311e9028</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcPrimGeneralization</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fcd0a67bae6e46f00bddf900b61c9365d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcPrimDependency</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f7f905125ce64e49ddc2d3aff453e8888</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecExpansion</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f8a79d65efa9f967076d855f881b1deef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecDissect</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5ff4f22e6a5a1b8d83eeed013bd52f71c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecFaceSplitter</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fac53f763faf872d937aac7e448a96132</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecCluster</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fa154aa769b3bb1ef4854555818266df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcSecClique</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f98335d7f6bfe5e96f897d27635e231c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcMerger</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5ff30efc445a5645a10b5645874988fa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcVertical</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f545a5581c5684d6b3370cb4fbe589dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcAlign</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f5596cda6987afaeaa965de83804bab45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcAssClass</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fa8bfbfb7583fcb7bbe4d3e04e6f1f980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcBrother</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f1f2fb386926870987ec8fb2f0a8ae397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcHalfBrother</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fad81529638fcb4336d4a116b32bfb6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcCousin</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f707772d4959dc7d855e95de817aed86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcFifthToMerger</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5fb0a3cf6a471822484ff875333f0c9c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etcFifthFromMerger</name>
      <anchor>6bdf4c93c9029bacf4850096731bfb5f3e1dd883fa36ac6c7ba3d855450bcc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLEdgeTypeOffsets</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoPrimary</name>
      <anchor>68f340087b3cf8a1442b6044c5c98babe70a24359500f5911717436fa0f4e6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoSecondary</name>
      <anchor>68f340087b3cf8a1442b6044c5c98babc2de238323d60049c453f7d1f84ee931</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoTertiary</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab9e108c0a13d62c56f863a2756c830947</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoFourth</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab825bcefe637aed0d8b2766b887284861</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoFifth</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab3a06d46911c6c9392bcace786d3b0fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>etoUser</name>
      <anchor>68f340087b3cf8a1442b6044c5c98bab91a1f49011f21af2a347b416aa8b593f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLNodeTypePatterns</name>
      <anchor>c843979b90fd708780ef3dd319af1f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpPrimary</name>
      <anchor>c843979b90fd708780ef3dd319af1f12cbab499f93229f95481f5a66a64b4013</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpSecondary</name>
      <anchor>c843979b90fd708780ef3dd319af1f12fee4d518103a4864c12381cd9bd4f992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpTertiary</name>
      <anchor>c843979b90fd708780ef3dd319af1f12390c44f9d85ccf5e5ecb7aad79897d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpFourth</name>
      <anchor>c843979b90fd708780ef3dd319af1f12c6603644ae4002cd2f1e9ca72ce62b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpUser</name>
      <anchor>c843979b90fd708780ef3dd319af1f124c11d4058c11ed77ac280ba2c95af674</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntpAll</name>
      <anchor>c843979b90fd708780ef3dd319af1f12aeb9db6922cecdcb97fb3ebdebe05495</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLNodeTypeConstants</name>
      <anchor>5c561541b333bf175cd8c0998309f7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntPrimOriginal</name>
      <anchor>5c561541b333bf175cd8c0998309f7dec7b9e76c9ca1b559d978e30d4dc7c39b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntPrimCopy</name>
      <anchor>5c561541b333bf175cd8c0998309f7de3372cbe70a5491a032a719c935e36c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntSecStructural</name>
      <anchor>5c561541b333bf175cd8c0998309f7decec4e062566711dc9fb524571aab2251</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntSecNonStructural</name>
      <anchor>5c561541b333bf175cd8c0998309f7de71c20fa30be41fc73bc461ffcd26efc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerCrossing</name>
      <anchor>5c561541b333bf175cd8c0998309f7decb91e092047c44718c4d97c382fdc779</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerExpander</name>
      <anchor>5c561541b333bf175cd8c0998309f7de8ee80fd42e522d02329665576c0a798e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerHDExpander</name>
      <anchor>5c561541b333bf175cd8c0998309f7de4d1b21c1710ead329af140ea03592f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntTerLDExpander</name>
      <anchor>5c561541b333bf175cd8c0998309f7de294eb20e34c8546dce4ec3d97bcce580</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourFlow</name>
      <anchor>5c561541b333bf175cd8c0998309f7de3372b409139e9044e52674f434bbedcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourLabel</name>
      <anchor>5c561541b333bf175cd8c0998309f7de019a87c02e227cfb7e729b948d5d2cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourType</name>
      <anchor>5c561541b333bf175cd8c0998309f7de5e28e562dae49d4e3e37d899795d6793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntFourCorner</name>
      <anchor>5c561541b333bf175cd8c0998309f7deef6cbe2832e71df75ef8dc6afa17703b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMLNodeTypeOffsets</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoPrimary</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd2310f974fa228d1aa3cb48f8e173768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoSecondary</name>
      <anchor>ae56edd638f64b744c9397ede622e0bdf7f16c183019105d51528a34be731c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoTertiary</name>
      <anchor>ae56edd638f64b744c9397ede622e0bdbe4b7ccf8aafc7cabe4f4c3af2dafe5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoFourth</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd47e89a178c81e5e0b3738bca7c570e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoFifth</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd83e4d213697c4f7d8b6eacaf80fffdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntoUser</name>
      <anchor>ae56edd638f64b744c9397ede622e0bd78b8e3e3f23e53d942016ec0703af62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0662dd461adf8dfa30af7035bbaad076</anchor>
      <arglist>(ostream &amp;os, const Array&lt; E, INDEX &gt; &amp;a, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c92b232e203412c3208dc09e9502be20</anchor>
      <arglist>(ostream &amp;os, const ogdf::Array&lt; E, INDEX &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6fe6663a600bf0a1bfdef96225215577</anchor>
      <arglist>(T &amp;x, T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4bfab25cf505f4f51f92749f85890e95</anchor>
      <arglist>(const T &amp;x, const T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>238c6cd2a698950c08cd2a8843b676e0</anchor>
      <arglist>(const T &amp;x, const T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>randomNumber</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>102a5bb3ad5265abf5fe9c7168490ffc</anchor>
      <arglist>(int low, int high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>randomDouble</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45ca26f42fd159f5a7f91e6756197777</anchor>
      <arglist>(double low, double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>usedTime</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>569b0889c74ca8cceee1dd1f161c45bd</anchor>
      <arglist>(double &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6dc0dc948edfa757bc15a1c795a2e92b</anchor>
      <arglist>(const E *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a848e725230be3d35ba434adb4aaae7b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; int &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d31d23dc68ed674a5a290213497daea7</anchor>
      <arglist>(const int *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; double &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>98a6f1d35158fc9b65300285afa9e3ee</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFile</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8413d8df63697d3dec04201fa2b88a0b</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>737448818001d3e77c974a229e412f2c</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeDir</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>80fac07cf9bb61c3d78d60dfd6ad87a9</anchor>
      <arglist>(const char *dirName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFiles</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>60139238cf7bf5e11a611042c1140832</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;files, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFilesAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>5afb150669722246b67d2163e7e6c69e</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;files, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSubdirs</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7217150acb0b5c0f64b42fc39aabe694</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;subdirs, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSubdirsAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>dbf65ca4ec35cdcce90bb02e7acfe6db</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;subdirs, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntries</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>473ad41aaa75cd49457d51f6f12ec2b9</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntriesAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9cca2679158849910d55f4ad45cdfb98</anchor>
      <arglist>(const char *dirName, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntries</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>907537f4f960d4eba92f4d39441c0fad</anchor>
      <arglist>(const char *dirName, FileType t, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEntriesAppend</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6e917ecb61320626468e6471bb14e930</anchor>
      <arglist>(const char *dirName, FileType t, List&lt; String &gt; &amp;entries, const char *pattern=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sprintf</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>84fd73f1d4571c3cd265b1d01321bce4</anchor>
      <arglist>(char *buffer, size_t sizeOfBuffer, const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vsprintf</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f7a839a59253b9d34c1d021999894b39</anchor>
      <arglist>(char *buffer, size_t sizeInBytes, const char *format, va_list argptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strcat</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4125bb2696378fd31ca2dadf88188be2</anchor>
      <arglist>(char *strDest, size_t sizeOfDest, const char *strSource)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strcpy</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f6d4333f38b3d79b0abc5257acebdb34</anchor>
      <arglist>(char *strDest, size_t sizeOfDest, const char *strSource)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strncpy</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>80531ef5712c6555e69b1d2c923274c7</anchor>
      <arglist>(char *strDest, size_t sizeOfDest, const char *strSource, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localtime</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>61aa85c9ff04c75257017b6b2146792a</anchor>
      <arglist>(struct tm *ptm, const time_t *timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>de7f126408070951fce6350f80de38a2</anchor>
      <arglist>(ostream &amp;os, const BoundedQueue&lt; E, INDEX &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>04d643f153b25092ace8402748c79628</anchor>
      <arglist>(ostream &amp;os, const BoundedQueue&lt; E, INDEX &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c6c286557ec38e73dec58ce1676f91e8</anchor>
      <arglist>(ostream &amp;os, const BoundedStack&lt; E, INDEX &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>5ef1c9444c56c48607ebec1ecd99150e</anchor>
      <arglist>(ostream &amp;os, const BoundedStack&lt; E, INDEX &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inducedSubGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45e73bbc1678fcf1bb8acccf5ba64624</anchor>
      <arglist>(const Graph &amp;G, LISTITERATOR start, Graph &amp;subGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inducedSubGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e03e35f80fabff9dc62fe9c6afca6aa5</anchor>
      <arglist>(const Graph &amp;G, LISTITERATOR start, Graph &amp;subGraph, NodeArray&lt; node &gt; &amp;nodeTableOrig2New)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inducedSubGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>32526c66fb0632ffefd71edd94c9c852</anchor>
      <arglist>(const Graph &amp;G, LISTITERATOR start, Graph &amp;subGraph, NodeArray&lt; node &gt; &amp;nodeTableOrig2New, EdgeArray&lt; edge &gt; &amp;edgeTableOrig2New)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inducedSubgraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d0ff9ec23b2b21211a4dc299d648082f</anchor>
      <arglist>(Graph &amp;G, NODELISTITERATOR &amp;it, EDGELIST &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7227ebc320e3c9c4375755167d82cf1a</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>aab84ef9c819f37a528e373b577fe626</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;GG, List&lt; edge &gt; &amp;addedEdges, bool simple=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stNumber</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0b4ce44e1d48946958555fc4501935bc</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;numbering, node s=0, node t=0, bool randomized=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testSTnumber</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>97febba79e2c23a5925cb8d62a94cb8d</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;st_no, int max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsEqual</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>59bbd435bb4c3f8b02a0401da7761c42</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsGreaterEqual</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4bf2ae7ef17e24e350567ccd5cd0b5e6</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsGreater</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>71cd0b9970cefea8dd2505564148ee13</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsLessEqual</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>15fdfeb1bbce8a66610c186eeb727bea</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DIsLess</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f5dfd64310bd20f5c0e7de880f95f996</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double eps=1e-06)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DRound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1954747c130923179d8934979bacd170</anchor>
      <arglist>(const double &amp;d, int prec=0)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7c26c2f3e33b5afbb2ac858a54b073f7</anchor>
      <arglist>(ostream &amp;os, const IPoint &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>74293f3de5b097474232ed3c7d5db6d7</anchor>
      <arglist>(ostream &amp;os, const DPoint &amp;dp)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8627d241bee12511bd5622b3474a00e2</anchor>
      <arglist>(ostream &amp;os, const DLine &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>490ff557f9aefb776e415c08946e37fb</anchor>
      <arglist>(ostream &amp;os, const DRect &amp;dr)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>189c37fe60b7e73945029f7fd93924f5</anchor>
      <arglist>(ostream &amp;os, const DScaler &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>75563d57025c0c398c1202408275dd20</anchor>
      <arglist>(ostream &amp;os, const DPolygon &amp;dop)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9d17159e4a18c5e4a7ed0c370c1e7372</anchor>
      <arglist>(ostream &amp;os, ogdf::node v)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>62eaac7e86b02f8e765bb1be8ccaff19</anchor>
      <arglist>(ostream &amp;os, ogdf::edge e)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b94cc57aa648f3b8684903c1442f3b14</anchor>
      <arglist>(ostream &amp;os, ogdf::adjEntry adj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_edges</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>5dd203013f645cad7a7ad7534bb6b979</anchor>
      <arglist>(adjEntry &amp;adj, edge &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; node &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c0e4f8a9b69d1f08ecdcd04b4ffd77e4</anchor>
      <arglist>(const node *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; edge &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4c88969c99fd69fdee0a44928685d7fe</anchor>
      <arglist>(const edge *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; adjEntry &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8c318b6ad97a40440aaa87de342fe2b2</anchor>
      <arglist>(const adjEntry *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0feff1b510864aba8b73a1b34e5f2ca1</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomSimpleGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c6991a8ef695dc1ce1c320aeb843856d</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomBiconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e84cb709f5fcb098528bc0474d1a55b2</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarBiconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>12a6c6c7d7a99b18a5d7144bc9a9ee1d</anchor>
      <arglist>(Graph &amp;G, int n, int m, bool multiEdges=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarCNBGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>96e017ffba996249254e58c9e330d112</anchor>
      <arglist>(Graph &amp;G, int n, int m, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomTriconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>dad6b837cade23898f3dc0ae68239274</anchor>
      <arglist>(Graph &amp;G, int n, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarTriconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>181c070c885d02d1611cd83efd529611</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarTriconnectedGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2921ef7352d86abb984e01300e323c38</anchor>
      <arglist>(Graph &amp;G, int n, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d83c1576fee773abf95334f842f6849b</anchor>
      <arglist>(Graph &amp;G, int n, int maxDeg, int maxWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomHierarchy</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a4f8e06a35368a8ce24efcbb71bf1e36</anchor>
      <arglist>(Graph &amp;G, int n, int m, bool planar, bool singleSource, bool longEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomClusterPlanarGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>85a79853e408557d003de19d0034614e</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G, int cNum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomClusterGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>519fee82a5b4ee56b07e74f32e1ff7d9</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G, int cNum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a3f3de8e779cf75d10d3784c8da491fc</anchor>
      <arglist>(Graph &amp;G, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeBipartiteGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9d8c6b9ec7744fc50a48678666bb9f76</anchor>
      <arglist>(Graph &amp;G, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wheelGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8cf4c76cee9dcb8bf4dbc3a13b401e2f</anchor>
      <arglist>(Graph &amp;G, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cubeGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b7c85da1b67c5f397be073826a532f39</anchor>
      <arglist>(Graph &amp;G, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspension</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3b6fc792acfc6697de0ae62c01df372b</anchor>
      <arglist>(Graph &amp;G, int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f85e7675537034944e0c189869bfd8fc</anchor>
      <arglist>(ostream &amp;os, const ListPure&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>fc971e928a1e85b7e01277b46fe4d7ae</anchor>
      <arglist>(ostream &amp;os, const List&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2df6874f6c6ebeab4a5e473fc730eb99</anchor>
      <arglist>(ostream &amp;os, const ListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f40d7c4d0cd37b4db428880bda225efc</anchor>
      <arglist>(ostream &amp;os, const List&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dfsGenTreeRec</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f6ee2150aaf09aac5cd387e47db0bd7a</anchor>
      <arglist>(UMLGraph &amp;UG, EdgeArray&lt; bool &gt; &amp;used, NodeArray&lt; int &gt; &amp;hierNumber, int hierNum, node v, List&lt; edge &gt; &amp;fakedGens, bool fakeTree)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>firstOutGen</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4188afdc21631eee08e89084923f1786</anchor>
      <arglist>(UMLGraph &amp;UG, node v, EdgeArray&lt; bool &gt; &amp;used)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dfsGenTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3d41690c264fc2441f388ff6b61befed</anchor>
      <arglist>(UMLGraph &amp;UG, List&lt; edge &gt; &amp;fakedGens, bool fakeTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d0210e921399f4025d7dfc7d8f14599e</anchor>
      <arglist>(ostream &amp;os, const QueuePure&lt; E &gt; &amp;Q, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0a0118af79fc3f7b183c046cfe9bbcdf</anchor>
      <arglist>(ostream &amp;os, const Queue&lt; E &gt; &amp;Q, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8831020d7e61da3bcadbd2736c836986</anchor>
      <arglist>(ostream &amp;os, const QueuePure&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1f56f684f08505da35777bba5a92ac90</anchor>
      <arglist>(ostream &amp;os, const Queue&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoopFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>635b08778f71b22bfe54e97731c335e6</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLoopFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c121413fd1b922cef65a6872b56d1a23</anchor>
      <arglist>(Graph &amp;G, NODELIST &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeLoopFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f847be4652fe332110999d0d9d1751a2</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallelFreeSort</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6dde8fe4b58e0aa47a33a469937ede63</anchor>
      <arglist>(const Graph &amp;G, SListPure&lt; edge &gt; &amp;edges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallelFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>20070ca58c7ecd22f6382eae50674c62</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParallelEdges</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45cbd7c8e6ed90a40bdd61efe1161e8a</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>60313b0ed11e766f1d22e0b4893e2d03</anchor>
      <arglist>(Graph &amp;G, EDGELIST &amp;parallelEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d4412ce4c5cc2df1bbfc961c7129a682</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallelFreeSortUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7019c6e183fa2084a33b9c0e90f8359c</anchor>
      <arglist>(const Graph &amp;G, SListPure&lt; edge &gt; &amp;edges, EdgeArray&lt; int &gt; &amp;minIndex, EdgeArray&lt; int &gt; &amp;maxIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>045ca949ad54197c383a02c5b69b7d30</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParallelEdgesUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6a1c50ef11f22ddf3512044e81f455e5</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>71cb022f4a7b73921f7fa9488b0e9f38</anchor>
      <arglist>(Graph &amp;G, EDGELIST &amp;parallelEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>49c6516ddc2a7fced4318e372209fe4c</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>690da8797ff65cd27448de8fbb0e553a</anchor>
      <arglist>(Graph &amp;G, EDGELIST &amp;parallelEdges, EdgeArray&lt; int &gt; &amp;cardPositive, EdgeArray&lt; int &gt; &amp;cardNegative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParallelFreeUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b074ea9d5aeed62384055b2ae08a6598</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; EDGELIST &gt; &amp;parallelEdges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimple</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9f6828cc879f647de3254e0444ebd5cf</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSimple</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3f31b389ffb08b4a2df7525152c80bb1</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimpleUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9c303747c8447bffef52c67eb94597df</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSimpleUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e8923c939cd710fd01aebcbed9246610</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>58d3a541294790f845eedb3f67040a6d</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>45ad040cb847b7c90e477a380133bf1a</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;added)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeConnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1957f900d61dfd83c7e7caf651008233</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectedComponents</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0504711e547b0febf00a261ce27ae5f1</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectedIsolatedComponents</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c63c344ed6d409cea63bdf7e1043bc1e</anchor>
      <arglist>(const Graph &amp;G, List&lt; node &gt; &amp;isolated, NodeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>17796203f9633f8ccb1055fd07f17d3f</anchor>
      <arglist>(const Graph &amp;G, node &amp;cutVertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>fd4e07c4a9cd4f47ce1c8d8d90ab1251</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2dce4d57d715ebfa824144260ef304c9</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;added)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeBiconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6eee1a780cacf210168b173fb365454e</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biconnectedComponents</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>af2c637d8c661da9bd055c341755f782</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7ac1a5296c11fe2e3f78c532b1795a2c</anchor>
      <arglist>(const Graph &amp;G, node &amp;s1, node &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e85e75170e805acdcffc9db7f1d1a589</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnectedPrimitive</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d2e9d27668720ede5601267651af09f6</anchor>
      <arglist>(const Graph &amp;G, node &amp;s1, node &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriconnectedPrimitive</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>3a72f1e5aa47d941cdaf5453c3f0a139</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclic</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0c1fa6da476915d4ed472b9981cbf7e4</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;backedges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclic</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>86fb35f1b4a467eca431d16bd0b74dbf</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclicUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e3a13393936c7d2d89acc8c8a5ccdcba</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;backedges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcyclicUndirected</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0a9d98170d26d6e272e296097ba93bb7</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAcyclic</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d4149a9f4ab6828c1c247b635186533f</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAcyclicByReverse</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6528736a9011b4183baccc1e7dc0b997</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSource</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9a078b620b0f3fd05431360cba9ca8df</anchor>
      <arglist>(const Graph &amp;G, node &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSource</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>1093534f778c44baac34cfbe15fc065f</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSink</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b9d243c70b5df0eebd2ffb9361726f30</anchor>
      <arglist>(const Graph &amp;G, node &amp;sink)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSingleSink</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>016223e16b83facc7f4d370fd1c9e52e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b58bd776a9214de06afa95773c7cd916</anchor>
      <arglist>(const Graph &amp;G, node &amp;s, node &amp;t, edge &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8de32e861029feba3e1097ab8a048701</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>topologicalNumbering</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>de15a6badfff6a85e0f8bcd7cdeb7cb1</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeForest</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>07fa8e31ee16a5c08919b7f072219142</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForest</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>4f18a35b415469dc04609034408c8b77</anchor>
      <arglist>(const Graph &amp;G, List&lt; node &gt; &amp;roots)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForest</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>db239ab1dc490cda86a8831a25fee026</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e05f3d6a608007a3c38ec1e8d038fccd</anchor>
      <arglist>(const Graph &amp;G, node &amp;root)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTree</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b70eeb4c70de173d2156b0b31f9064f5</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a83028aee00eca47375a64e8e69f4519</anchor>
      <arglist>(ostream &amp;os, const SListPure&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>9b6dc89cb3dd48d5af226d1a619eb7b1</anchor>
      <arglist>(ostream &amp;os, const SList&lt; E &gt; &amp;L, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c1d0ae4f4c3d5197f2d88306cae4ca44</anchor>
      <arglist>(ostream &amp;os, const SListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7a4ac582355a302cb113718e0879b4e2</anchor>
      <arglist>(ostream &amp;os, const SList&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f88f8925170eacddeb60fa6f17ee8643</anchor>
      <arglist>(Array&lt; E &gt; &amp;a, int min, int max, BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>59ac2816707760145f1505d3d9b3f561</anchor>
      <arglist>(ostream &amp;os, const StackPure&lt; E &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>81f3fa74d192b905bc0461c2a9c613b8</anchor>
      <arglist>(ostream &amp;os, const Stack&lt; E &gt; &amp;S, char delim= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a07ba0c59ce34b9a0baf1faf430280c5</anchor>
      <arglist>(ostream &amp;os, const StackPure&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d8e2506d376b2302d15e37cdc1383536</anchor>
      <arglist>(ostream &amp;os, const Stack&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2f6fce75560bd9f66a536cfc6d4198ff</anchor>
      <arglist>(ostream &amp;os, const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>00bdc719cb500a10ab5c5fa86fff1541</anchor>
      <arglist>(const Tuple2&lt; E1, E2 &gt; &amp;t1, const Tuple2&lt; E1, E2 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b7e5b65e96a4c1932d481734047464dd</anchor>
      <arglist>(const Tuple2&lt; E1, E2 &gt; &amp;t1, const Tuple2&lt; E1, E2 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>135ce7ce29b9ce4b1317e94d2c5d29d5</anchor>
      <arglist>(ostream &amp;os, const Tuple2&lt; E1, E2 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>251e8a73adf2aa3c45b76b3a2e6c39a4</anchor>
      <arglist>(const Tuple3&lt; E1, E2, E3 &gt; &amp;t1, const Tuple3&lt; E1, E2, E3 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f879e4b5ec2efd49add82bf1072dfae9</anchor>
      <arglist>(const Tuple3&lt; E1, E2, E3 &gt; &amp;t1, const Tuple3&lt; E1, E2, E3 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>47f449db652c71d21f2751462793d2e0</anchor>
      <arglist>(ostream &amp;os, const Tuple3&lt; E1, E2, E3 &gt; &amp;t3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>58445c86e214c3c201e83a7facc184bb</anchor>
      <arglist>(const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t1, const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e871f9cd9f5899800f75c88c7ca16b05</anchor>
      <arglist>(const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t1, const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d42b3de800a179837d9128bc939d4990</anchor>
      <arglist>(ostream &amp;os, const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_entries_of_cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>85acbf9c05831043f0b283176e3453b7</anchor>
      <arglist>(ListIterator&lt; adjEntry &gt; &amp;it, adjEntry &amp;adj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_edges_of_cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>743d43b4bf399cdf151b097e0d193bf4</anchor>
      <arglist>(ListIterator&lt; adjEntry &gt; &amp;it, edge &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_forall_adj_edges_of_cluster</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f65e491cbb9378df721b7d95f61d5e14</anchor>
      <arglist>(adjEntry &amp;adj, edge &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c61c61e8b4d4978934167b59a12f4840</anchor>
      <arglist>(ostream &amp;os, ogdf::cluster c)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>7cd52bbdd721eed5cd314d7b53cd11b3</anchor>
      <arglist>(ostream &amp;os, const DinoUmlDiagramGraph &amp;diagramGraph)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>75afa72afd85792aa565e43d434b1066</anchor>
      <arglist>(ostream &amp;os, const DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>40827d8e8c446de90edb8b0f721b12ce</anchor>
      <arglist>(ostream &amp;os, const DinoXmlParser &amp;parser)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRomeGraphStream</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0251deca0c357f1adb224a7662673c8a</anchor>
      <arglist>(Graph &amp;G, std::istream &amp;fileStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadRomeGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>f35ffbd30f1ae2d33eac287b386b8253</anchor>
      <arglist>(Graph &amp;G, const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadYGraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>dee9d214a75eff6865c8931ca50f25df</anchor>
      <arglist>(Graph &amp;G, FILE *lineStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBenchHypergraphStream</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>950fc49911a45b32f5a5f03368155007</anchor>
      <arglist>(Graph &amp;G, List&lt; node &gt; &amp;hypernodes, List&lt; edge &gt; *shell, std::istream &amp;fileStream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBenchHypergraph</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2af2966f8bbec24b4a1869bdd97e1ae8</anchor>
      <arglist>(Graph &amp;G, List&lt; node &gt; &amp;hypernodes, List&lt; edge &gt; *shell, const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortTemplate</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>82fdfb8f8e8eb3c571d8507cf7973726</anchor>
      <arglist>(LIST &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortTemplate</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>cf29b0a1d261a60b7d21ef472831015a</anchor>
      <arglist>(LIST &amp;L, COMPARER &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCTTemplate</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d991a95f2ba0fc14e6ee00a961cbe28f</anchor>
      <arglist>(LIST &amp;L, COMPARER &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>6940e7da87d1e85aea44889f78a0a41e</anchor>
      <arglist>(ostream &amp;O, const NodeInfo &amp;inf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>09aee8f3eaa967c65e38ec3165716587</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>25d342877a8ccea103529ebf66f72c73</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d70129ca0fb843ec8664017fc232c53d</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>916ba54c228864960538764af05632cd</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>8307d73219e836c28b5e1b4ab20ab8fb</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>20d0a1e3ce57ee17b17b8fdacd0f2389</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator+</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>16edbfa415d3ef7bfb9c521464bd52e3</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator-</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>50aaad3df14194836a0945f4cad39113</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator+=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>d4d04dde8ce5e43d849ef23abfce3691</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator-=</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>a9e3476b537c59717facc895fee5149c</anchor>
      <arglist>(const mdmf_la &amp;x, const mdmf_la &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>69f6f7cf158a40b3385b152ad73926cf</anchor>
      <arglist>(ostream &amp;s, const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPQBasicKeyEIB &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0666aac676835169de66dce8ef38f8c8</anchor>
      <arglist>(const PtrPQBasicKeyEIB *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPlanarLeafKeyI &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ec4054bda2c4347e957123ca2649d33a</anchor>
      <arglist>(const PtrPlanarLeafKeyI *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPQLeafKeyEWB &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0637cc19c88130d1aaa95a926e661a3e</anchor>
      <arglist>(const PtrPQLeafKeyEWB *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doDestruction&lt; PtrPlanarLeafKeyW &gt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>ae32d1ea076545e313b6aca915a4fa10</anchor>
      <arglist>(const PtrPlanarLeafKeyW *)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>68d84c0f68996d999e6a5dae393f9c4d</anchor>
      <arglist>(ostream &amp;os, const RCCrossings &amp;cr)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>maxSizeInsertionSort</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>e5a938e97d8a9ee65535987d7e67f67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>pi</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>512d1e2360acdbc1e3b8ec9c24ae6258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>euler</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>0a0f10a9d8a09dfbd08da96349fcaedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MemoryManager</type>
      <name>g_memory</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>b827d9362ea54ea2ff9dc9a0ea5ee9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMaxBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2bdaf1df0113efb6495859be9f7f913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMinBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c78d47ee21a412a562aede4da602acc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>labelNum</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>499017d4acab729ccb49f345f786d91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMaxBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>2bdaf1df0113efb6495859be9f7f913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>angleMinBound</name>
      <anchorfile>namespaceogdf.html</anchorfile>
      <anchor>c78d47ee21a412a562aede4da602acc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DfsMakeBiconnected</name>
    <filename>classogdf_1_1_dfs_make_biconnected.html</filename>
    <base>ogdf::AugmentationModule</base>
    <member kind="function">
      <type></type>
      <name>DfsMakeBiconnected</name>
      <anchorfile>classogdf_1_1_dfs_make_biconnected.html</anchorfile>
      <anchor>4f1f39e2ba9ff3ba774f9de9b4e78c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DfsMakeBiconnected</name>
      <anchorfile>classogdf_1_1_dfs_make_biconnected.html</anchorfile>
      <anchor>f955010e49611db5d9f555fc06db52d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_dfs_make_biconnected.html</anchorfile>
      <anchor>5522c7fd8362730ceaebe0b0df9da55b</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;L)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::labelStruct</name>
    <filename>classogdf_1_1label_struct.html</filename>
    <member kind="function">
      <type></type>
      <name>labelStruct</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>be1a80df3deda2ebc3f90acfe8f59187</anchor>
      <arglist>(node parent, node cutvertex, paStopCause sc=paBDegree)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBLabel</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>99a1a9828f143fd87c9215df081f1b01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCLabel</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>5d085a4591691fc051afeafd5cc1fef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>getPendant</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>480f7f52e59dcd97f7a9016010d3c365</anchor>
      <arglist>(int nr)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>getFirstPendant</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>7b8fac68f131cbafd5902a777dee3332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>getLastPendant</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>a62a74bf65be879861ebc9b8c255ef3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>20bc939520e80076ea475dfb682250b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePendant</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>9ade54e93c48e6de022a04f455475e2c</anchor>
      <arglist>(node pendant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePendant</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>1189b54af78bf6139efd3ce7a409405f</anchor>
      <arglist>(ListIterator&lt; node &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFirstPendant</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>3804907d6672c55b52002944cdfa00dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPendant</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>f94e07f1223d83595c1da8d24f1bf088</anchor>
      <arglist>(node pendant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAllPendants</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>b5e30a9cb509d5b933f6e482637bb3dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>03385c88fbb1c8ccf1d34e866806f135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>head</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>4c140823c182f6d423d62181ae656f88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>21748da2db13f5eb1fd3e4fb727c6416</anchor>
      <arglist>(node newParent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHead</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>287acc9b236421d0ca830a0805d105b1</anchor>
      <arglist>(node newHead)</arglist>
    </member>
    <member kind="function">
      <type>paStopCause</type>
      <name>stopCause</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>90cb3b62bb8f3cc9a129d4c044c8ea91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopCause</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>685a28a8064b842f6e1342e21667807e</anchor>
      <arglist>(paStopCause sc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>5a222de13100c102926ed5caa19bac9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_head</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>d2f2a2433bc0c8c1d422d029fce34a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_pendants</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>3719756db90b4ed57afede9bb0bab4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>paStopCause</type>
      <name>m_stopCause</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>432db6e0df595f3000700213c3887ca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PlanarAugmentation</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>82988519648c18adfe0e50890728bd68</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PlanarAugmentationFix</name>
      <anchorfile>classogdf_1_1label_struct.html</anchorfile>
      <anchor>26cfb12df56bf677a36f3536f2de2753</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarAugmentation</name>
    <filename>classogdf_1_1_planar_augmentation.html</filename>
    <base>ogdf::AugmentationModule</base>
    <member kind="function">
      <type></type>
      <name>PlanarAugmentation</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>18d65f05f79ade10475eae383c2b8621</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarAugmentation</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>a5c9ba679b16a0741ad5049717aaf080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>c56465d8f835e749846ee2cb29bcb29a</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;L)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>augment</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>0ccc4bdad9e250e2d9387bbe2650ca21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>makeConnectedByPendants</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>91f7ed90a74feda1c65d6f777de9d666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reduceChain</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>ad7aa88351a91c65444de8f7f16555ae</anchor>
      <arglist>(node p, label labelOld=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>paStopCause</type>
      <name>followPath</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>7fd6937b58b4f6484fee7f36e79fd922</anchor>
      <arglist>(node v, node &amp;last)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>planarityCheck</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>45c9ae8af5e77944b9f415fc9e6c46e2</anchor>
      <arglist>(node v1, node v2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>adjToCutvertex</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>bfab20991780508c1c0b5db83d6e377c</anchor>
      <arglist>(node v, node cutvertex=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>findLastBefore</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>a0020180b2d9bc54a65b47ff3fbaf0bb</anchor>
      <arglist>(node pendant, node ancestor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deletePendant</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>318d4c0d236d452bdb686b4f300173c8</anchor>
      <arglist>(node p, bool removeFromLabel=true)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addPendant</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>407de6d4eab0e8715a57eed32ea8b779</anchor>
      <arglist>(node p, label &amp;l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>connectPendants</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>cd2188587960aff83f120f5c2012c6c9</anchor>
      <arglist>(node pendant1, node pendant2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeAllPendants</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>0feb16d432eaa19d19c5e8cf2eca787a</anchor>
      <arglist>(label &amp;l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>joinPendants</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>03fa321cf718f5408cbac0a277d8ca24</anchor>
      <arglist>(label &amp;l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>connectInsideLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>47daa23dc46050977d105b4c95ab1983</anchor>
      <arglist>(label &amp;l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ListIterator&lt; label &gt;</type>
      <name>insertLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>b1262df5e0512d45debe9b3e2dde821f</anchor>
      <arglist>(label l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>3600a47e5a767845f4d74d548bc243ce</anchor>
      <arglist>(label &amp;l, bool removePendants=true)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>connectLabels</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>116ae7497ca64c01c434566c3cdfb504</anchor>
      <arglist>(label first, label second)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>label</type>
      <name>newLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>e10dd8bcd6739933e0e88698bffda81b</anchor>
      <arglist>(node cutvertex, node p, paStopCause whyStop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>findMatching</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>7c48a3f946f8940153f3df3d8d28a1db</anchor>
      <arglist>(label &amp;first, label &amp;second)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>connectCondition</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>a9b3d3abfd6c965bb3906f1753b8c3c4</anchor>
      <arglist>(label a, label b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateAdjNonChildren</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>3604abb6a29793dd3267fd67b731aa7a</anchor>
      <arglist>(node newBlock, SList&lt; node &gt; &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>modifyBCRoot</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>e54c7e424805d9cc717178d3c1d3e880</anchor>
      <arglist>(node oldRoot, node newRoot)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNewEdges</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>a75f38b1f2df738600b35ec5d5c73e48</anchor>
      <arglist>(SList&lt; edge &gt; *newEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>acebdfe18bb5fe7a1b2a66ff8bfd4fcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nPlanarityTests</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>d0c63c29e54f2d0f8971ba353d41cc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>2c3494de31951d4456f7c2761a87a6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DynamicBCTree *</type>
      <name>m_pBCTree</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>526d468725e1fb41ee7467ee7eaede6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; edge &gt; *</type>
      <name>m_pResult</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>1238c636224432546afff50c35713175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; label &gt;</type>
      <name>m_labels</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>8ebffec33947570baec529f880ba4b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_pendants</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>1e035e48c29bb59ae2be5a49c8aaaffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_pendantsToDel</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>7c3657853faff4cf9d317e4ecddf89b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; label &gt;</type>
      <name>m_belongsTo</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>047faffa91ed8f4ce08dbfe0bc737220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; label &gt; &gt;</type>
      <name>m_isLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>da4e09923294f278aa0e7433085bbbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SList&lt; adjEntry &gt; &gt;</type>
      <name>m_adjNonChildren</name>
      <anchorfile>classogdf_1_1_planar_augmentation.html</anchorfile>
      <anchor>880bb9e39198fe65bf89b90068e6868c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarAugmentationFix</name>
    <filename>classogdf_1_1_planar_augmentation_fix.html</filename>
    <base>ogdf::AugmentationModule</base>
    <member kind="function">
      <type></type>
      <name>PlanarAugmentationFix</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>4a9376b594ac2cabfae8b5138757c8b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarAugmentationFix</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>a62dcad1e788e63295dd9c73c5e7dfb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>d06debdf2b928ec9075ccdaedef7535b</anchor>
      <arglist>(Graph &amp;g, List&lt; edge &gt; &amp;L)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>augment</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>b7126fdbc361c5f238294e5cf6559929</anchor>
      <arglist>(adjEntry adjOuterFace)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>modifyBCRoot</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>914d7244f82567ac6fda3f29e5be0bc4</anchor>
      <arglist>(node oldRoot, node newRoot)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeBCRoot</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>a1c0e559c61805cd93e742cd45a4dba0</anchor>
      <arglist>(node oldRoot, node newRoot)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reduceChain</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>42bc1b725839cb3c95591ffa3b0c688a</anchor>
      <arglist>(node pendant)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>paStopCause</type>
      <name>followPath</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>f53332c512c7bd644257147dc1b05769</anchor>
      <arglist>(node v, node &amp;last)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>findMatching</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>9e111e7673fb7225efbb8e6cd803f2dc</anchor>
      <arglist>(node &amp;pendant1, node &amp;pendant2, adjEntry &amp;v1, adjEntry &amp;v2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findMatchingRev</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>6e96172bc8c4902966af6e4ae7db1e98</anchor>
      <arglist>(node &amp;pendant1, node &amp;pendant2, adjEntry &amp;v1, adjEntry &amp;v2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>label</type>
      <name>newLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>e17c31e2c43631db03683a297681d9e9</anchor>
      <arglist>(node cutvertex, node parent, node pendant, paStopCause whyStop)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addPendant</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>19a7db4ad9f96b3addb9a18ec238ea6a</anchor>
      <arglist>(node p, label &amp;l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ListIterator&lt; label &gt;</type>
      <name>insertLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>01a8374e9d4ced8609edcf4631834483</anchor>
      <arglist>(label l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>connectPendants</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>65b6a11315b46aa3cd64d8704300f042</anchor>
      <arglist>(node pendant1, node pendant2, adjEntry adjV1, adjEntry adjV2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>connectSingleLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>48996f27ed66949e26a9f05c1e9e12b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deletePendant</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>dab76189bbcd25393fd493fa9c7557a4</anchor>
      <arglist>(node pendant)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>a9aa741ecd7e371a04f0409d113f41e9</anchor>
      <arglist>(label &amp;l, bool removePendants=true)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>5b49f228424302216c03693c6d41d9e7</anchor>
      <arglist>(label &amp;l)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CombinatorialEmbedding *</type>
      <name>m_pEmbedding</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>5f16c720599d99ca2d6df84239577730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CombinatorialEmbedding *</type>
      <name>m_pActEmbedding</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>f87af39bb0ec9bfeb9e5ee5b73c93b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>329958caeb0f3c6834c4555342cefa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; edge &gt; *</type>
      <name>m_pResult</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>75f85ed1177789f6bbedbbff4acb3e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DynamicBCTree *</type>
      <name>m_pBCTree</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>91e0c9f7f6e8fb9f28bd18b529324474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphCopy</type>
      <name>m_graphCopy</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>f8eea2dbfcb95ff7f2ccbd821f736284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eCopy</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>7d7b07c69a91a08a25cdc97764b17b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; label &gt;</type>
      <name>m_labels</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>dddbb7963885b19085aa9156f82f744f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; label &gt; &gt;</type>
      <name>m_isLabel</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>f80f2b251f71c247ef98767f372afcc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; label &gt;</type>
      <name>m_belongsTo</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>d7578632a16376f4f906a349d9e0f957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_belongsToIt</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>bae11d5353ac5ae8f86a5f5de3b11bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_actBCRoot</name>
      <anchorfile>classogdf_1_1_planar_augmentation_fix.html</anchorfile>
      <anchor>27a9192e3d05a31a31b57794f35a915b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AdjEntryArrayBase</name>
    <filename>classogdf_1_1_adj_entry_array_base.html</filename>
    <member kind="function">
      <type></type>
      <name>AdjEntryArrayBase</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>0117a4eac9c05e88ec4a02e59b7f36db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdjEntryArrayBase</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>65877d2fbf9de07bb316c9ca37809e63</anchor>
      <arglist>(const Graph *pG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdjEntryArrayBase</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>d4f0ac027b3e65c73db7eaf178c3e6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>cb24e8fc8e7f64b8a7f272cda35737ed</anchor>
      <arglist>(int newTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>645421f5fe8e30e7dab0b514ecd7af42</anchor>
      <arglist>(int initTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>973e5c9c23c7f46b06362c02b0ac4b44</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetIndex</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>9e4a9151ddd60f098406f3e95739b48e</anchor>
      <arglist>(int newIndex, int oldIndex)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reregister</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>f30d827503896ccb0d4807c1f4b46ad4</anchor>
      <arglist>(const Graph *pG)</arglist>
    </member>
    <member kind="variable">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>015013e9014b16fb0d2a141f8fdd4da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; AdjEntryArrayBase * &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_adj_entry_array_base.html</anchorfile>
      <anchor>dbf156a970a8c1fc24f00b5d682dcf61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AdjEntryArray</name>
    <filename>classogdf_1_1_adj_entry_array.html</filename>
    <templarg>T</templarg>
    <base protection="private">ogdf::Array&lt; T &gt;</base>
    <base protection="protected">ogdf::AdjEntryArrayBase</base>
    <member kind="function">
      <type></type>
      <name>AdjEntryArray</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>e18932d183d6561e5f1033d7e6cbff58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdjEntryArray</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>ab15ab4a913611f27d8c4db2a72aa84e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdjEntryArray</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>dcd4e70d4085c7c9d9132ba786773aa0</anchor>
      <arglist>(const Graph &amp;G, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdjEntryArray</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>cd4cb186392c46f81a65f94df14ba289</anchor>
      <arglist>(const AdjEntryArray&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>e20b1135b8fcf20e02dc5a783ba383ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>bf0920dc9aeb11a632fc94920fa05a56</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>567bf6326e37a4e38ebc117b6ff7d642</anchor>
      <arglist>(adjEntry adj)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>efe8f7863c32b2f946f59fe41402cf49</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>e84cfc766870b22ff389dabd75488b23</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>AdjEntryArray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>c100a79a88294eb5bf148a6e23f76da0</anchor>
      <arglist>(const AdjEntryArray&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>05a04d433ef0ea16e60c191f6df419d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>86e9609e08478f5736301057629e4528</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>1c4488e539bae0fb24ebae192374a6a2</anchor>
      <arglist>(const Graph &amp;G, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>ec081fc3515bbd3c1f56ff20a98c465e</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>996d99be2c9baee2346a6524023088bb</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>509886a50980baa16a04012c7fe9c205</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>0f5de36be56f6719f95329a180f93ae9</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>8779ea2cbad8be936b9fab63b687e259</anchor>
      <arglist>(int newTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>1b0845a24dc043a04ac3894bb2da1e3a</anchor>
      <arglist>(int initTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>resetIndex</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>cd70964b2ec57509825c6923d19d3930</anchor>
      <arglist>(int newIndex, int oldIndex)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>5425e36485a9b5a50541110b17d36191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_adj_entry_array.html</anchorfile>
      <anchor>35a6192c1085f134881ce8b2b5cdd3c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Array</name>
    <filename>classogdf_1_1_array.html</filename>
    <templarg>E</templarg>
    <templarg>INDEX</templarg>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>c7c8865b7349190e557e502769c6ee12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>cfac2ceda5c39541c2c6a7a01e78ed26</anchor>
      <arglist>(INDEX s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>bdff5e2a4320a38246a3df1e7f7024ac</anchor>
      <arglist>(INDEX a, INDEX b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>6786e2529ee284ae28ec5e0d0496aca3</anchor>
      <arglist>(INDEX a, INDEX b, const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>785eccaad9141c32d1a14f9d5e599d27</anchor>
      <arglist>(const Array&lt; E &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>9e10174db80cb6309a905d8c243b9e56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>low</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>28e6d7d76bb9824017a69c34c98804e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>high</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>6871b0b717b3f19ce377f6957310ad40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>ad6fd1ddd36479fef125ddf6b7fd745b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>36a30fc20bc519b25c6b1d465a9e67ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E *</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>034c65e6b67f489863f9c413b223bf46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>6945e5749bf02f7f775473ed6b90e59c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E *</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>fbee8c7064a991d560c5849938dbcc90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>13b7fe344d93d9b36520b3683c306d3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E *</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>67a79e361e94870d4624bd0e144cc7d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E *</type>
      <name>rend</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>0e53e499f8bf9c32a33c2cce3f30cb11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E *</type>
      <name>rend</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>eaf17dd3c2be433d46860494ab88fc1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>eed59c7d63d989dbeb0c1d8f86a81faf</anchor>
      <arglist>(INDEX i) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>df294016e5312fd440000d8a8bd2857f</anchor>
      <arglist>(INDEX i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>138e5119cae94e0c196f6383e3aa30ab</anchor>
      <arglist>(INDEX i, INDEX j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>4fb188dde3b4723a21c30757019dfd64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>e339117ef2ae7aa1477ffb997ea170cb</anchor>
      <arglist>(INDEX s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>619b7119fdd603d3dca258bf9e08d3c6</anchor>
      <arglist>(INDEX a, INDEX b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>a824675c254098ff755102825ad6c1c7</anchor>
      <arglist>(INDEX a, INDEX b, const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; E, INDEX &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>86414214af8b0253b7fbe0f6236c58cc</anchor>
      <arglist>(const Array&lt; E, INDEX &gt; &amp;array2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>553a279c09a12aab01e6ec90d5ac17fc</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>ac8cf2a37e39b3dcb4ee9109a825da3a</anchor>
      <arglist>(INDEX i, INDEX j, const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>118f16265686e2ffb7d0a00178183430</anchor>
      <arglist>(INDEX add, const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>38a0cd6f1a3f36a64272ae957c07d463</anchor>
      <arglist>(INDEX add)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>5746f42234a58f48591df739d0a1b8f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>98795c882391b541ad36a899be9b1b20</anchor>
      <arglist>(INDEX l, INDEX r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>1083e3f3e002015ae2b29acddf184997</anchor>
      <arglist>(INDEX l, INDEX r, Comparer&lt; E &gt; &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>0d88aa5098ebf5b441b787e14c5432ed</anchor>
      <arglist>(Comparer&lt; E &gt; &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCT</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>788a2e1244e536c592506de1e9aa63c8</anchor>
      <arglist>(C &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCT</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>aaf8cafec96acaaa0f376d52dfd5fa8a</anchor>
      <arglist>(INDEX l, INDEX r, C &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>1ddae5112880a8810ddb09be365d3a92</anchor>
      <arglist>(INDEX l, INDEX r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>949c79523e06b72acf6b9a0308058300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>a0139e1af2140473ebe758a3313af09a</anchor>
      <arglist>(const E &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>72c773cc7e81355673fea08b0ed0856f</anchor>
      <arglist>(const E &amp;x, Comparer&lt; E &gt; &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linearSearch</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>070624c7d4e742a88c0aee6719009a5d</anchor>
      <arglist>(const E &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linearSearch</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>92182f3e6c5b2579ff92e02b7a8573b2</anchor>
      <arglist>(const E &amp;x, Comparer&lt; E &gt; &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>951df7dd215e0f1aa394935a4ed96a70</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>a86043010f608fb3dd7f0b230c505ab6</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>00fc251dc63ed4f3e3d1d38cc0fea049</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>44ad8be06a30be6c0a89c39e9d2668f5</anchor>
      <arglist>(INDEX a, INDEX b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>8694ca596ce4d402fad17c80a7ead804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>5651253f251a26983f2032c9f93f8157</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deconstruct</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>123a7adaf60aa960ff2bb7b3a31a7a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>a3e329eb2bd24e766d5cc4d2d35dc843</anchor>
      <arglist>(const Array&lt; E, INDEX &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>e626f0ea4a2845b63f744755af3422c9</anchor>
      <arglist>(E *pL, E *pR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>73e90692817ec8695763bcda90ba7dad</anchor>
      <arglist>(E *pL, E *pR, Comparer&lt; E &gt; &amp;comp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>quicksortCT</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>8d8d5a94c7f9d98e0da6c65b0c34e824</anchor>
      <arglist>(E *pL, E *pR, C &amp;comp)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_vpStart</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>bf65ea0c715e3c40cdd4c9c73bb4f281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStart</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>c12e9b888e57c097b21f24209d36650f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStop</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>190a54def9d1bfe63f826ef65700a0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>INDEX</type>
      <name>m_low</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>1f685da61c75667a0edc31d163b5fe93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>INDEX</type>
      <name>m_high</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>b14d1cdb7d124402a8de4c68cafebea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ArrayBuffer</name>
      <anchorfile>classogdf_1_1_array.html</anchorfile>
      <anchor>cbcb25033a90500a51aa19c811b2a1d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Array2D</name>
    <filename>classogdf_1_1_array2_d.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>Array2D</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>c6d4a33e99ca3b32affdb9255397ba56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array2D</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>1d28fe4f5e70534183060e88006c5ce9</anchor>
      <arglist>(int a, int b, int c, int d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array2D</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>ba91475d31ddab5115827cde9a37a4e7</anchor>
      <arglist>(int a, int b, int c, int d, const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array2D</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>1d0cc3163c5659a6f02009d993e3ce2a</anchor>
      <arglist>(const Array2D&lt; E &gt; &amp;array2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array2D</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>a1839d8fb35bc9c9088a7186aee2f8b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>low1</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>1c1fb0ce8084c9e8032268415d99d3db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>high1</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>cce50ec33109f5992a75df8b4455a4f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>low2</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>a81603f0c280507cff134bfc1ddd2617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>high2</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>f9d0a1e3c1dfa300851f1c71391018f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>ceac7c2fa931348f2b3c66a3b1501c04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size1</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>e4afc3616c0ca713f8b215952836a668</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size2</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>724315a91a4f96cb6c1e37756bdc6b54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>det</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>27e05f7c86cd97e4e2bd813c284538f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>52aa9be92f5a21fa1830aa094420f2da</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>543abdc373531506388862e629be04cf</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>a0ce45a7245a09a3c941fc2ec9b56940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>446790a8b5514a1ffc5f7a6648b47f95</anchor>
      <arglist>(int a, int b, int c, int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>0e77c2763205400ee0e53a60c81051e1</anchor>
      <arglist>(int a, int b, int c, int d, const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Array2D&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>b9fa7f9b14da5183d7df231bc68ebc73</anchor>
      <arglist>(const Array2D&lt; E &gt; &amp;array2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>e79225303e3ceeba6b59561273add6f3</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>c83bc1c4667a1f70a683ad83663aec39</anchor>
      <arglist>(int a, int b, int c, int d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>4e9c05335005b4a276e9d46d26fac748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>702bbaefcb80eab900203bb94c63f848</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deconstruct</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>5b5f429d500a1a1da709f63f393ffcec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>63229749caf4cdce131bb8fc713cfb3d</anchor>
      <arglist>(const Array2D&lt; E &gt; &amp;array2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_vpStart</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>22bdcf707c3a1cccb037d923387b69b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_a</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>df184589eea7d5255cabae0199f1e472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_lenDim2</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>556bd87321c4630a7f3aa053e2daf8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStart</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>5d6a104e82d3cd0247df7af366826373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStop</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>4b05d71dc9e1ec4d99acd7b5e94dd743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_b</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>cfb396b25c4d1d3b32c515b39b9ab82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_c</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>5c783c6bf9a0632e6abb7875ab8ddbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_d</name>
      <anchorfile>classogdf_1_1_array2_d.html</anchorfile>
      <anchor>3b78e8576ad852281ca3901ed8f170de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ArrayBuffer</name>
    <filename>classogdf_1_1_array_buffer.html</filename>
    <templarg>E</templarg>
    <templarg>INDEX</templarg>
    <base protection="private">ogdf::Array</base>
    <member kind="function">
      <type></type>
      <name>ArrayBuffer</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>9548548a12d60ed24fa2018cc520d1fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayBuffer</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>090722b3f046a149df5fca496aa94ce6</anchor>
      <arglist>(INDEX size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>6fcbe2e24376130caa1f473dfa6dd590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>fc20cd445e03eac81c6827950ee8fdfb</anchor>
      <arglist>(INDEX size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>1b8c642bd78fefe733fdddc206dc2297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>db7c4d008bc8b78be546267e7b301a62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>668662f49a00fdf3d839c7eb23df68b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>2dc7761a8b33edb66070c3d941b3ba97</anchor>
      <arglist>(E e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>55f0950b58a2d4931f7f73d3c831b569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>popRet</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>2040012943f4b978da891d0741f11589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>d0f44e483bef1ce97ad35da5daaf7b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>b983bf1fff2ce8971d0404063f6069e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>84c30a46c3acf622fd24ffccf2f51d3a</anchor>
      <arglist>(INDEX i) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>990e74ee505ac9f04fb080f3436a347d</anchor>
      <arglist>(INDEX i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compactCopy</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>9db8e0cc2754afce98a408dece2ce688</anchor>
      <arglist>(Array&lt; E, INDEX &gt; &amp;A2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compactCpycon</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>d944b8760dc5bb02aefea774770e3f2e</anchor>
      <arglist>(Array&lt; E, INDEX &gt; &amp;A2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compactMemcpy</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>1b3374c19e8e79677cc431112fac9c93</anchor>
      <arglist>(Array&lt; E, INDEX &gt; &amp;A2) const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>linearSearch</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>f9bacedbda8f153c63dbd067ac9ae545</anchor>
      <arglist>(const E &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>linearSearch</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>620dd72e54430fb2ff2406fab7ff6fd1</anchor>
      <arglist>(const E &amp;x, Comparer&lt; E &gt; &amp;comp) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>INDEX</type>
      <name>num</name>
      <anchorfile>classogdf_1_1_array_buffer.html</anchorfile>
      <anchor>5a28c2cdccdcc6807e50c49a7373842d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Comparer</name>
    <filename>classogdf_1_1_comparer.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>Comparer</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>f64f1992090fb7e55d4ca2839553b3de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Comparer</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>8df402d4c838149c2cde1acedc0edf88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>057ef1eaf3dfa4f9c95ebdc4ead29999</anchor>
      <arglist>(const E &amp;x, const E &amp;y)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>less</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>463df27f8d76f8eb470fa853bc005274</anchor>
      <arglist>(const E &amp;x, const E &amp;y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>leq</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>d56ce7d9be98abbdde4d2d8429bdc310</anchor>
      <arglist>(const E &amp;x, const E &amp;y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>greater</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>c84422a616e9a1718448e9f3ea5d49d8</anchor>
      <arglist>(const E &amp;x, const E &amp;y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>geq</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>a732f364a9cb64ad6fa326e2c64f8063</anchor>
      <arglist>(const E &amp;x, const E &amp;y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equal</name>
      <anchorfile>classogdf_1_1_comparer.html</anchorfile>
      <anchor>ac26b3fd8b9cc869ebc4c185420f9c04</anchor>
      <arglist>(const E &amp;x, const E &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DefComparer</name>
    <filename>classogdf_1_1_def_comparer.html</filename>
    <templarg>E</templarg>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_def_comparer.html</anchorfile>
      <anchor>1d60daf78713af8f0b86d75cc6fa2419</anchor>
      <arglist>(const E &amp;x, const E &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DefComparer&lt; int &gt;</name>
    <filename>classogdf_1_1_def_comparer_3_01int_01_4.html</filename>
    <base>ogdf::Comparer&lt; int &gt;</base>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_def_comparer_3_01int_01_4.html</anchorfile>
      <anchor>3c20c05fcbd8a40f8d21e82a6d70e2e2</anchor>
      <arglist>(const int &amp;x, const int &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BucketFunc</name>
    <filename>classogdf_1_1_bucket_func.html</filename>
    <templarg>E</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BucketFunc</name>
      <anchorfile>classogdf_1_1_bucket_func.html</anchorfile>
      <anchor>1e2ba8a649c6de7172a2a47e7f042816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBucket</name>
      <anchorfile>classogdf_1_1_bucket_func.html</anchorfile>
      <anchor>76e04bd68f07de5a7183c15e1ee68734</anchor>
      <arglist>(const E &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BinaryHeap</name>
    <filename>classogdf_1_1_binary_heap.html</filename>
    <templarg>key</templarg>
    <templarg>HeapObject</templarg>
    <base>ogdf::HeapBase&lt; key, HeapObject &gt;</base>
    <member kind="function">
      <type></type>
      <name>BinaryHeap</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>9594dd07c3dab15a0e02ae4352b984d6</anchor>
      <arglist>(int startSize=128)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryHeap</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>00cd10dc3adedb111327b3f6750d9150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BinaryHeap &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>7a2809d13e7bdaf361c5ac830917c03e</anchor>
      <arglist>(const BinaryHeap&lt; key, HeapObject &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>d4b1a8faa48cb6a3b4dd98234b06f594</anchor>
      <arglist>(HeapObject &amp;obj, key &amp;p, int *keyUpdate=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeHeap</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>6b692b6106ab465153566ecfebe8d23c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HeapObject</type>
      <name>extractMin</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>31a83ec4c0fea8737d08421e46e15453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decreaseKey</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>814498a42ccb4daa18cbc46939e334ad</anchor>
      <arglist>(int index, key priority)</arglist>
    </member>
    <member kind="function">
      <type>HeapObject</type>
      <name>minRet</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>cb4532dcd2e63879bb0a8c52a716a70c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>key</type>
      <name>getPriority</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>5e5063d81570ea7a7b747d1d40f57551</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>capacity</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>1a682afafdff1169c9293c803f86d76d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>bb448bb6fb671ba070061977a267d94d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>c8863917435468d87c5acf4f74ddc1dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>ca3e1ac3392265a79bb8a9e8724741d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>siftUp</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>479249f2c3833d177b6b63e7adf76dd5</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>siftDown</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>02146ea9b251daa015ce779de2c63726</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parentIndex</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>b37ff0dbe36ed828709e4e2f21126e02</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>leftChildIndex</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>dd3bb725e73a943525358bf3c557cd92</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>rightChildIndex</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>78179596acd4c693142673a33a6dd22b</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasLeft</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>8fa250607c08b0b54cbc83a0f9e17cf9</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasRight</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>eb08ddbe6e2b1d4149cb4eebd8721c1f</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>arrayBound</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>e95c0c3aaa14716f8b1ce7d9895d217d</anchor>
      <arglist>(int arraySize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>higherArrayBound</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>be9cb3f8daacd5cec10c9ca582d94cb1</anchor>
      <arglist>(int arraySize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>higherArraySize</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>3bd86cb31f4bbf5fb236e5d42b7e1526</anchor>
      <arglist>(int arraySize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>lowerArrayBound</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>5e06139d5cb8411cceadf39aa23c1221</anchor>
      <arglist>(int arraySize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>lowerArraySize</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>ac6f51712de44c764def0b5dcce674a5</anchor>
      <arglist>(int arraySize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>094d9d73855fb7c9bd01ce143bf04027</anchor>
      <arglist>(int initSize)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HeapEntry *</type>
      <name>m_heapArray</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>76aacc9379709962395e36cfa4b21247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_arraySize</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>4c0081e0e7c42ff5894db40cd0640a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_startSize</name>
      <anchorfile>classogdf_1_1_binary_heap.html</anchorfile>
      <anchor>8d3b53b35265b792c6555dec43eb78df</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::BinaryHeap::HeapEntry</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::BinaryHeap::HeapEntry</name>
    <filename>structogdf_1_1_binary_heap_1_1_heap_entry.html</filename>
    <member kind="function">
      <type></type>
      <name>HeapEntry</name>
      <anchorfile>structogdf_1_1_binary_heap_1_1_heap_entry.html</anchorfile>
      <anchor>a8d3aa0394a0ba642be4c4414111bfc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapEntry</name>
      <anchorfile>structogdf_1_1_binary_heap_1_1_heap_entry.html</anchorfile>
      <anchor>f600086dfe4751fccc46956e360d17b2</anchor>
      <arglist>(key k, const HeapObject &amp;ob)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapEntry</name>
      <anchorfile>structogdf_1_1_binary_heap_1_1_heap_entry.html</anchorfile>
      <anchor>c095f7e2f63607f346ff74b9d27ad0e1</anchor>
      <arglist>(key k, const HeapObject &amp;ob, int pos, int *fp)</arglist>
    </member>
    <member kind="variable">
      <type>key</type>
      <name>m_priority</name>
      <anchorfile>structogdf_1_1_binary_heap_1_1_heap_entry.html</anchorfile>
      <anchor>d6990b340eb7ba1b3f2923e78bd2fdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HeapObject</type>
      <name>m_object</name>
      <anchorfile>structogdf_1_1_binary_heap_1_1_heap_entry.html</anchorfile>
      <anchor>c4fd5830b9699dd39873cd475be78bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_pos</name>
      <anchorfile>structogdf_1_1_binary_heap_1_1_heap_entry.html</anchorfile>
      <anchor>8910840cc8315439083a17cb7bc29cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>m_foreignPos</name>
      <anchorfile>structogdf_1_1_binary_heap_1_1_heap_entry.html</anchorfile>
      <anchor>882e07966507bb37264c5b6cbf75ac48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BoundedQueue</name>
    <filename>classogdf_1_1_bounded_queue.html</filename>
    <templarg>E</templarg>
    <templarg>INDEX</templarg>
    <member kind="function">
      <type></type>
      <name>BoundedQueue</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>bc1bd4ee2dbef81ad6dc306ee52d2886</anchor>
      <arglist>(INDEX n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundedQueue</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>89c98263318e0ae5dcc2577b6150222d</anchor>
      <arglist>(const BoundedQueue&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundedQueue</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>9e73fc4b6a99d40487f755048c531da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>fdce6d9b18415d172b25f523d566dc4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>69d966be36bc6395dec99d246c0f1861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>68edd1be933725b36f19f764a56bb537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>78afb40e254959b7b25e9986c6509390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>8444734112cc5e14c7e6aa51a632121a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>capacity</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>2cf6cc35b8143caf8f00f2bdb3ab8f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>1399f4a598c51efb94e94bb25a4bfa1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>edbac913d7c2d915c506c0a4a544ff0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoundedQueue&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>874f3f61b7ce06834bfe90c1aa0a5ca6</anchor>
      <arglist>(const BoundedQueue&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>14d4abec303a337c1488121d3f14e86e</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>e299eb2fa0bd8ad30a0fbf2d2218b321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>2cd8dd98e6e5f19d2b978405e19ba9fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>39e9994f71f449d842981ada37aee195</anchor>
      <arglist>(const BoundedQueue&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStart</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>ab84b0a756d7fdc76fcf782550854d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pEnd</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>bb03fcf94f799351a83576dbd89cd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStop</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>d0d363f76c3104c0023976130247643d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pFirst</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>04d38903d567db95f83c520a91e7b18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>print</name>
      <anchorfile>classogdf_1_1_bounded_queue.html</anchorfile>
      <anchor>4fa1a1c885a6077b14b69137af9f6ba8</anchor>
      <arglist>(ostream &amp;, const BoundedQueue&lt; E, INDEX &gt; &amp;, char)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BoundedStack</name>
    <filename>classogdf_1_1_bounded_stack.html</filename>
    <templarg>E</templarg>
    <templarg>INDEX</templarg>
    <member kind="function">
      <type></type>
      <name>BoundedStack</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>339fde45b2387335c8a913c0890454ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundedStack</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>8b390e8eea6f38b458e937ced1ace020</anchor>
      <arglist>(INDEX n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundedStack</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>2e591f06e91bfa4f5aa032dea1efb6b4</anchor>
      <arglist>(const BoundedStack&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundedStack</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>56890ed3583cbc3c5d5af30b3f45c488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>f9fdec8a550ed97f1404f21348986c25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>e29bc637e827ccc6ffbc6bee797bb55f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>936c863be54e30084eb1445c8ce510b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>b3cb0893cae9e58b47e04acc4cc4405c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>c584d2c1d8b40e264985651b456ebaac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>5db3b66c6f8c7ea760456e0ab5abe4b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>capacity</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>f986c1e50cfffff53312b05fb6fb63d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>ccffa0f53cd39a49a0cc24636b1241e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>19b28e53f696f7bc74d20533c8075fa6</anchor>
      <arglist>(INDEX n)</arglist>
    </member>
    <member kind="function">
      <type>BoundedStack&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>701607e6288e7d554579252002ec29af</anchor>
      <arglist>(const BoundedStack &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>33bdcce5a336b085fd668b1bb2c5acce</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>217772d91c2d112293a34f9e76adbf02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>728580acbcf5ed69d250bc7d37a861c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>788d2ffb7512fdd2fea520038a8a0709</anchor>
      <arglist>(const BoundedStack&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pTop</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>6b166daab365b684a889c1ebde6d4d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStart</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>9f804708e46208c1e3e60123f1cc3d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E *</type>
      <name>m_pStop</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>68e4bb2f479539189ebd52c727e40c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>print</name>
      <anchorfile>classogdf_1_1_bounded_stack.html</anchorfile>
      <anchor>002e5b487364c3fe45fd8a7679fbc171</anchor>
      <arglist>(ostream &amp;, const BoundedStack&lt; E, INDEX &gt; &amp;, char)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FaceElement</name>
    <filename>classogdf_1_1_face_element.html</filename>
    <base protection="private">ogdf::GraphElement</base>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>7ac74a093870343cab256cf9cea38055</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>firstAdj</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>cc32f830b04f6059637e73d11328c10a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>3b32c60c9b0372e7d0e7de063d2b4d9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>a3a0198c381d09d1573113dbaa8b2d69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>pred</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>3493633d72d7aef4ccade1c5b122facf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>nextFaceEdge</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>561b6ec157156490e0f37e9ea120a6c0</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>dd19623f9037a51d0351477151ec156d</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>4a9fcea0057b80fd1d4620b7cc7477c2</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>a2c466c44cde96a43b68a33a72f39803</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FaceElement</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>02cfd1f05ee6b33f72ba634ce44a0dbf</anchor>
      <arglist>(adjEntry adjFirst, int id)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_adjFirst</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>cb047ee9d1c7419f2df4c7764aacceea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_id</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>f3f71ee6ba1028cb6a029433eda6ee6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>b7d8203716ac363c2be6a8cdea22e918</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstCombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>ba123355c368bcda1c493095b3bbe5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>58edc29eca9571bd1a56c8607ac12533</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GraphList&lt; FaceElement &gt;</name>
      <anchorfile>classogdf_1_1_face_element.html</anchorfile>
      <anchor>ed74d850a6989db66578b25951541878</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ConstCombinatorialEmbedding</name>
    <filename>classogdf_1_1_const_combinatorial_embedding.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstCombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>acfe11bf24e347753bbf376d29dc7bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstCombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>2576a1ed2914e86f3df582e0d5ea33f9</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstCombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>bda08653db68cbf91fd53996665cf55b</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>ConstCombinatorialEmbedding &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>0fdc4ca71548214fbc7a01e41776eb8d</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>b44ce132d30689f6e424758d463eac01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Graph &amp;</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>a843b7abdc6a8e137468b764b2df438e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>firstFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>2ab984baae4969989f3c2324236fc4f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>lastFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>fc8fce898140113e68bea62b3bee706b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfFaces</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>e3729cf97a81dfdfac1457fe4ae576a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>rightFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>1da91e526ca2e214f49f1c8b44e018f0</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>leftFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>6e21853b8d59f15a88b33123a9595962</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxFaceIndex</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>8827fea9addf1eb381ab0671ed4d9f03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>faceArrayTableSize</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>1892b8e3981b217b2d3e81e799f40729</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>chooseFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>2f1a3f6980e2dd5897561f7ecc8a3cf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>maximalFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>7397058fa16b484cd2b833685c3a63d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>externalFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>b3ce15b36083d2720e9a77320a69d72e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExternalFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>7e063116ba4a3373cf47d4078650a01d</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBridge</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>8ce7ff6ab112a93932310f713f23cd80</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>70b522862c99a0e28366edf633767d1e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFaces</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>4cef55f6353daa34404c93924d6c0aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>9554bcad5202d8b92991159ea06edd28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; FaceArrayBase * &gt;</type>
      <name>registerArray</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>7ef0e238248381601afbbef5f24da1a9</anchor>
      <arglist>(FaceArrayBase *pFaceArray) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterArray</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>455e66ff548562077d95e37e0f9decca</anchor>
      <arglist>(ListIterator&lt; FaceArrayBase * &gt; it) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>face</type>
      <name>createFaceElement</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>4d17d5291e9bca41a000cf6b3b3373f2</anchor>
      <arglist>(adjEntry adjFirst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reinitArrays</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>6dd346d1c8e51e4ac15f4f10f920c9ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_cpGraph</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>058feddecb49d8f718652a5497bbe73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GraphList&lt; FaceElement &gt;</type>
      <name>m_faces</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>27229d63671517cf0239ae4db32fc6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nFaces</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>aa46573701411452ec7bf51291485c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_faceIdCount</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>e19c512c0cf6dddc28b68e59ad47ce0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_faceArrayTableSize</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>e13cf805c4ed91e1c2d95b620a15386b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AdjEntryArray&lt; face &gt;</type>
      <name>m_rightFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>cb666065f1f508c35316a032fe731103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>face</type>
      <name>m_externalFace</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>cd2cbcaf3af959ecb0ba71f1c695a282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListPure&lt; FaceArrayBase * &gt;</type>
      <name>m_regFaceArrays</name>
      <anchorfile>classogdf_1_1_const_combinatorial_embedding.html</anchorfile>
      <anchor>fb5b85bc595e59a67bfac768e0fe2cf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CombinatorialEmbedding</name>
    <filename>classogdf_1_1_combinatorial_embedding.html</filename>
    <base>ogdf::ConstCombinatorialEmbedding</base>
    <member kind="function">
      <type></type>
      <name>CombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>14dff3e506bf19fcd3b6a42c2a718b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>913b73c827fcc9080053fe1c92d45149</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>3e6003cf6d270eb45fc63e10be8e2a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>be0d6fe5f0edf393b4105a64f65ffa3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Graph &amp;</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>c23a77923ac0e7828eee6346b5a56112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Graph &amp;</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>9c70b5fc82fde14e754dec92a8ccd0de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>231d12f259bb2ea2c93c471fc57b87f3</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>c4cc09586858503bc83bacd0f2ef7147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>b6bf77fab90a5ae6fa68d2eb9848e31d</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsplit</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>d7ecb40fb2c89f224444ba2f73150fc0</anchor>
      <arglist>(edge eIn, edge eOut)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>splitNode</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>09abe8aa8a040a2885d87c0e213f0c89</anchor>
      <arglist>(adjEntry adjStartLeft, adjEntry adjStartRight)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>contract</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>bfabe002a820fb443b57184491768404</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>splitFace</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>d3af1cecba7b690e137482cfc34b8da4</anchor>
      <arglist>(adjEntry adjSrc, adjEntry adjTgt)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>splitFace</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>dc2ee6815e4b1bf41349ce9f07a166e9</anchor>
      <arglist>(node v, adjEntry adjTgt)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>splitFace</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>aa387111220bf2c3db3f7d392653fcf4</anchor>
      <arglist>(adjEntry adjSrc, node v)</arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>joinFaces</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>31560a8ed8bd0291aa0d985c405d6cad</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseEdge</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>3bedf6070b591c103d26eb43eebb82c5</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveBridge</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>37cb52f2806ba0e7ec19cdd3dd55e5a1</anchor>
      <arglist>(adjEntry adjBridge, adjEntry adjBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeDeg1</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>13f9160c1d90c22f1bb939bbd5ead3cd</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMerger</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>023bf284334ed6d0aba83c0266cfc894</anchor>
      <arglist>(edge e, face fRight, face fLeft)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CombinatorialEmbedding</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>a22703e60e01442dfca8fe42ca18f325</anchor>
      <arglist>(const CombinatorialEmbedding &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CombinatorialEmbedding &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>555f8bdefbbb195850ddf7daf7e95733</anchor>
      <arglist>(const CombinatorialEmbedding &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_combinatorial_embedding.html</anchorfile>
      <anchor>2f4dcc59f2ca43283e7eca6357ab02be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DualGraph</name>
    <filename>classogdf_1_1_dual_graph.html</filename>
    <base>ogdf::CombinatorialEmbedding</base>
    <member kind="function">
      <type></type>
      <name>DualGraph</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>1f6f99be6b4dfe0130faca70cf5f7cc9</anchor>
      <arglist>(CombinatorialEmbedding &amp;CE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DualGraph</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>36bfdef2dfc9d2ca00b837377fe118e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CombinatorialEmbedding &amp;</type>
      <name>getPrimalEmbedding</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>5a6373608014fc152496af71f184c778</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getPrimalGraph</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>9f9b1dba4f71676137b946d12cbff47c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>primalNode</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>0a9c1323bccbb094dea30c7905013bd2</anchor>
      <arglist>(face f) const </arglist>
    </member>
    <member kind="function">
      <type>const edge &amp;</type>
      <name>primalEdge</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>23829bf1cc5de31d43ba8d8a17f02829</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const face &amp;</type>
      <name>primalFace</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>d3a74f4192e264527d71bd99b0c5420c</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>dualNode</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>fafcd4a214a6b961bcfd6e8b7d6efc04</anchor>
      <arglist>(face f) const </arglist>
    </member>
    <member kind="function">
      <type>const edge &amp;</type>
      <name>dualEdge</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>74fb05601fb912c2ea762dd1171153cd</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const face &amp;</type>
      <name>dualFace</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>9f5be4121ac11cd73ddff2ed065aab8c</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CombinatorialEmbedding *</type>
      <name>m_primalEmbedding</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>d4831eae9a1630ef66c1503c2b29427d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FaceArray&lt; node &gt;</type>
      <name>m_primalNode</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>fd4abf2eb168a27eab7c5b8d8e656b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; face &gt;</type>
      <name>m_primalFace</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>d4a8dd54df4729f4db0f1f026813a0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_primalEdge</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>b72b026e6afdc71c6f997fbf2f97f8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FaceArray&lt; node &gt;</type>
      <name>m_dualNode</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>348932e4d80b9b26ca655945a664aa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; face &gt;</type>
      <name>m_dualFace</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>e0261cb2761c0242c85cdc6b8519498e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_dualEdge</name>
      <anchorfile>classogdf_1_1_dual_graph.html</anchorfile>
      <anchor>94447b6a5e45c3446caeaba4738c5830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeArrayBase</name>
    <filename>classogdf_1_1_edge_array_base.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeArrayBase</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>41cb194dd43175f27476633c2ae88653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeArrayBase</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>5d7d5bedd137c9a8eab63327c43a85e1</anchor>
      <arglist>(const Graph *pG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeArrayBase</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>50e6175786fc8eccf4f8536a8b6f98cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>eee88cde3f2280e73a9664bad1d937d1</anchor>
      <arglist>(int newTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>6d27dafe43952a81d5d28ff23cd40676</anchor>
      <arglist>(int initTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>fd2f0918a14281d0a8927fd2983a719d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reregister</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>d94bf6f0b75df27fdf5e1fc96bdfb569</anchor>
      <arglist>(const Graph *pG)</arglist>
    </member>
    <member kind="variable">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>1ff516824c2fe647be52f64890bcba9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; EdgeArrayBase * &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_edge_array_base.html</anchorfile>
      <anchor>9e872054ef9a5211e09718ff40d24949</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeArray</name>
    <filename>classogdf_1_1_edge_array.html</filename>
    <templarg>T</templarg>
    <base protection="private">ogdf::Array&lt; T &gt;</base>
    <base protection="protected">ogdf::EdgeArrayBase</base>
    <member kind="function">
      <type></type>
      <name>EdgeArray</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>58302ce226f979d3e51d24be45f674c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeArray</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>75c01fd271c3753a1558cd341d69f554</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeArray</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>56c19eecc27a82fd289a02aa8b191ae0</anchor>
      <arglist>(const Graph &amp;G, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeArray</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>d7dc19f9ed15ad8f9fcf71c77a3d89ae</anchor>
      <arglist>(const EdgeArray&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>60fed703e587ba5186358c43c12b4274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph *</type>
      <name>graphOf</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>5222c1c197cfbdad7a94dcb25257db04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>417040af87364e47619b6ac39e484fa3</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>8af3f6bb96aa678b500b58b31fb65e59</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>5322d1a8dbff22e91d7dfe9f7eadabad</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>9a388fc218414c8afeba900e4b455f76</anchor>
      <arglist>(adjEntry adj)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>3027fbb48a02c8f36f570fb550a4adff</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>9a0920df2bc9e6183ed3af0bacf11821</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>EdgeArray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>b2cbd49ea305ac106ca03ae76042d3a9</anchor>
      <arglist>(const EdgeArray&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>ddfcb94d038abc9bdd88c016c077e7a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>b664c6bda56db20fb018b27defb171c5</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>1842682729ddd2c2c434e66e28f0f75c</anchor>
      <arglist>(const Graph &amp;G, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>bd4582146ffef508891c074d1d242fae</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>63b8fbf6832f179a904367dfabb8a49e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>cdb1293fc0fc609ddd02eaf724f6879e</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>33007ac4df2e5aed89061c64a0c3a320</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>52ca5370a4fc4a5b7bfd9d3220c8d463</anchor>
      <arglist>(int newTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>54949902e9179201cfa0c3b09b55506f</anchor>
      <arglist>(int initTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>39fae887423ccc0357cc2029af6b80e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_edge_array.html</anchorfile>
      <anchor>5dc69aca714a0b0918ac23340c2c5df2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BucketEdgeArray</name>
    <filename>classogdf_1_1_bucket_edge_array.html</filename>
    <base>ogdf::BucketFunc</base>
    <member kind="function">
      <type></type>
      <name>BucketEdgeArray</name>
      <anchorfile>classogdf_1_1_bucket_edge_array.html</anchorfile>
      <anchor>ea8b925283656f709f2f8b583aa69bef</anchor>
      <arglist>(const EdgeArray&lt; int &gt; &amp;edgeArray)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBucket</name>
      <anchorfile>classogdf_1_1_bucket_edge_array.html</anchorfile>
      <anchor>2deccd7131d985e1c1079df66e7d9a8e</anchor>
      <arglist>(const edge &amp;e)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const EdgeArray&lt; int &gt; *</type>
      <name>m_pEdgeArray</name>
      <anchorfile>classogdf_1_1_bucket_edge_array.html</anchorfile>
      <anchor>7472ff0e8cb675f22f0918d612c21862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeComparer</name>
    <filename>classogdf_1_1_edge_comparer.html</filename>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type></type>
      <name>EdgeComparer</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>9d61720cd936955c2c6267b3b7559fe9</anchor>
      <arglist>(const GraphAttributes &amp;AG, const PlanRep &amp;PR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeComparer</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>ed0f447f1208f2a54073ffc147cd585a</anchor>
      <arglist>(const GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>d5cd572bb274a75e17a53331297c933d</anchor>
      <arglist>(const adjEntry &amp;e1, const adjEntry &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>before</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>2141bfa362938cb8038404beb5057338</anchor>
      <arglist>(const DPoint u, const DPoint v, const DPoint w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>orientation</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>01e60c76a2d2ba475911efde1d9e3ad5</anchor>
      <arglist>(const DPoint u, const DPoint v, const DPoint w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>compareVectors</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>7b2f87ad252dc602e685f110536ec1bd</anchor>
      <arglist>(const double &amp;x1, const double &amp;y1, const double &amp;x2, const double &amp;y2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>89a81bca3219048068a95e87bff00c24</anchor>
      <arglist>(DPoint p, DPoint q, DPoint r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>signOf</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>703f9349a653cb4010911dce7b56ec0c</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GraphAttributes *</type>
      <name>m_AG</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>34bfe693fb33d6af3e0122a6036dbca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PlanRep *</type>
      <name>m_PR</name>
      <anchorfile>classogdf_1_1_edge_comparer.html</anchorfile>
      <anchor>90618d5dd94bfee9298a2789a7a74ddf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Exception</name>
    <filename>classogdf_1_1_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classogdf_1_1_exception.html</anchorfile>
      <anchor>2447a5a5d2e649687561cfb422aaef7c</anchor>
      <arglist>(const char *file=NULL, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>file</name>
      <anchorfile>classogdf_1_1_exception.html</anchorfile>
      <anchor>67bfee30926e54fecd06e07fe73d5fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>line</name>
      <anchorfile>classogdf_1_1_exception.html</anchorfile>
      <anchor>3b8457b931c23d63d05197d64e812678</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>m_file</name>
      <anchorfile>classogdf_1_1_exception.html</anchorfile>
      <anchor>18e3f1c72522ea988f889300456248fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_line</name>
      <anchorfile>classogdf_1_1_exception.html</anchorfile>
      <anchor>386b56a5d7735eb8f6f75fd0dae8f919</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DynamicCastFailedException</name>
    <filename>classogdf_1_1_dynamic_cast_failed_exception.html</filename>
    <base>ogdf::Exception</base>
    <member kind="function">
      <type></type>
      <name>DynamicCastFailedException</name>
      <anchorfile>classogdf_1_1_dynamic_cast_failed_exception.html</anchorfile>
      <anchor>373471b07165b7d7918d9c1baf4daa03</anchor>
      <arglist>(const char *file=NULL, int line=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::InsufficientMemoryException</name>
    <filename>classogdf_1_1_insufficient_memory_exception.html</filename>
    <base>ogdf::Exception</base>
    <member kind="function">
      <type></type>
      <name>InsufficientMemoryException</name>
      <anchorfile>classogdf_1_1_insufficient_memory_exception.html</anchorfile>
      <anchor>2dfa3277dcb168ab7d5f11c61e08f42c</anchor>
      <arglist>(const char *file=NULL, int line=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PreconditionViolatedException</name>
    <filename>classogdf_1_1_precondition_violated_exception.html</filename>
    <base>ogdf::Exception</base>
    <member kind="function">
      <type></type>
      <name>PreconditionViolatedException</name>
      <anchorfile>classogdf_1_1_precondition_violated_exception.html</anchorfile>
      <anchor>f3d4bd54915bafa1d1344a8dd3e6183f</anchor>
      <arglist>(PreconditionViolatedCode code, const char *file=NULL, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreconditionViolatedException</name>
      <anchorfile>classogdf_1_1_precondition_violated_exception.html</anchorfile>
      <anchor>a3937dfac4baff80cef4fae025feae33</anchor>
      <arglist>(const char *file=NULL, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>PreconditionViolatedCode</type>
      <name>exceptionCode</name>
      <anchorfile>classogdf_1_1_precondition_violated_exception.html</anchorfile>
      <anchor>d573315755a654e4a409464391eefa1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PreconditionViolatedCode</type>
      <name>m_exceptionCode</name>
      <anchorfile>classogdf_1_1_precondition_violated_exception.html</anchorfile>
      <anchor>bbd8a7c71722de9aab1927614b1aa9be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AlgorithmFailureException</name>
    <filename>classogdf_1_1_algorithm_failure_exception.html</filename>
    <base>ogdf::Exception</base>
    <member kind="function">
      <type></type>
      <name>AlgorithmFailureException</name>
      <anchorfile>classogdf_1_1_algorithm_failure_exception.html</anchorfile>
      <anchor>72ddf536d71d12b4afb1103f5b29eb79</anchor>
      <arglist>(AlgorithmFailureCode code, const char *file=NULL, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgorithmFailureException</name>
      <anchorfile>classogdf_1_1_algorithm_failure_exception.html</anchorfile>
      <anchor>4dded9dfe0cd414536faf11c6447d798</anchor>
      <arglist>(const char *file=NULL, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>AlgorithmFailureCode</type>
      <name>exceptionCode</name>
      <anchorfile>classogdf_1_1_algorithm_failure_exception.html</anchorfile>
      <anchor>a32c2fd9823c0ce703f8714e2f46dc60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AlgorithmFailureCode</type>
      <name>m_exceptionCode</name>
      <anchorfile>classogdf_1_1_algorithm_failure_exception.html</anchorfile>
      <anchor>1423197a769b07356f2dd299db134bd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LibraryNotSupportedException</name>
    <filename>classogdf_1_1_library_not_supported_exception.html</filename>
    <base>ogdf::Exception</base>
    <member kind="function">
      <type></type>
      <name>LibraryNotSupportedException</name>
      <anchorfile>classogdf_1_1_library_not_supported_exception.html</anchorfile>
      <anchor>99b9f76cf316a96761df7a3ad13e9290</anchor>
      <arglist>(LibraryNotSupportedCode code, const char *file=NULL, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LibraryNotSupportedException</name>
      <anchorfile>classogdf_1_1_library_not_supported_exception.html</anchorfile>
      <anchor>fddf90a907b866d0f386304511c42015</anchor>
      <arglist>(const char *file=NULL, int line=-1)</arglist>
    </member>
    <member kind="function">
      <type>LibraryNotSupportedCode</type>
      <name>exceptionCode</name>
      <anchorfile>classogdf_1_1_library_not_supported_exception.html</anchorfile>
      <anchor>f8bab4a80e97c8a6f2ec06e206e80dab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LibraryNotSupportedCode</type>
      <name>m_exceptionCode</name>
      <anchorfile>classogdf_1_1_library_not_supported_exception.html</anchorfile>
      <anchor>5c206352e8b4e435341514684f844b56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FaceArrayBase</name>
    <filename>classogdf_1_1_face_array_base.html</filename>
    <member kind="function">
      <type></type>
      <name>FaceArrayBase</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>ee42e54a821ba6af9dca338277e4f85d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceArrayBase</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>4b72f59401acf9da5b0fe78b87e1e54f</anchor>
      <arglist>(const ConstCombinatorialEmbedding *pE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceArrayBase</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>48621652770ddad02eaef4ddb93af5d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>1de48175382329006c2c6fe7d58f2e42</anchor>
      <arglist>(int newTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>0fd04ecb1bab21e6981c9ff7b6825b86</anchor>
      <arglist>(int initTableSize)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reregister</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>f3c236b369d6efc09a040c79943074d3</anchor>
      <arglist>(const ConstCombinatorialEmbedding *pE)</arglist>
    </member>
    <member kind="variable">
      <type>const ConstCombinatorialEmbedding *</type>
      <name>m_pEmbedding</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>ebbd9dc156acca09fac4a45ed30e106e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; FaceArrayBase * &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_face_array_base.html</anchorfile>
      <anchor>4a50ef96c4d8fda147ee5e3753b03fa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FaceArray</name>
    <filename>classogdf_1_1_face_array.html</filename>
    <templarg>T</templarg>
    <base protection="private">ogdf::Array&lt; T &gt;</base>
    <base protection="protected">ogdf::FaceArrayBase</base>
    <member kind="function">
      <type></type>
      <name>FaceArray</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>c31c26b512291492bfa776e039cf8d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceArray</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>915cf2b6fdf656a2b1a81359b3c998b4</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceArray</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>11aeca38e5c3f24a57f48c5088dafd3c</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;E, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceArray</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>08076c5aae179e54bce82dc7eb40f85b</anchor>
      <arglist>(const FaceArray&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>e76dc4cc3da2315e49b80f500afab4b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstCombinatorialEmbedding *</type>
      <name>embeddingOf</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>2b5453a04806968c57a580ee0b065639</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>ccb19e210063369150c81bfa8ae9972e</anchor>
      <arglist>(face f) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>0fd66e1efc5e8da708edb347b95759aa</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>d0f9aae67713dc110780dc034b100948</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>09042f9c973b7c99883b607de3defeec</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>FaceArray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>4102b0a1b972c9861d8c438c95bf771c</anchor>
      <arglist>(const FaceArray&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>dddcdeafb538d6c12c5d5f5ad9bc1128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>664617d763420f390cc794becbccb354</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>426390d5b62adfecd48a5c59b89e347d</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;E, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>f3320dc607696ab4bd9ca45ac99d26ec</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>8003c99046e619d5c8ad46ad9024aaff</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>5401b709e1c76739c861b1b542b5a57c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>ef5904321e48d9225ee36b8939e23a8d</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>1090ef8f35071f8d6d83ef4db59b4d36</anchor>
      <arglist>(int newTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>b7da9c89234689834dcffc157fcc71aa</anchor>
      <arglist>(int initTableSize)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_face_array.html</anchorfile>
      <anchor>edce7930350b2599b5e06c1ac8e002bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FaceSetSimple</name>
    <filename>classogdf_1_1_face_set_simple.html</filename>
    <member kind="function">
      <type></type>
      <name>FaceSetSimple</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>c45e8f0fbc6c5675d29d4481f727e557</anchor>
      <arglist>(const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FaceSetSimple</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>a971c75855709072b28e14e6a3430f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>3bfd1c7ca2e4040fbd0b20bc99dfb722</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>91ce1390918bf894af3e4136ede60b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>2f2d2a23f6ab9893c3683e157e5bfb57</anchor>
      <arglist>(face f) const </arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; face &gt; &amp;</type>
      <name>faces</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>51e9d5e6d143f1484493f6d9009403a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceArray&lt; bool &gt;</type>
      <name>m_isContained</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>0649a4b98576af11d23532e851584e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; face &gt;</type>
      <name>m_faces</name>
      <anchorfile>classogdf_1_1_face_set_simple.html</anchorfile>
      <anchor>97cbc3ba9d22ac4854f590a4e71b38aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FaceSetPure</name>
    <filename>classogdf_1_1_face_set_pure.html</filename>
    <member kind="function">
      <type></type>
      <name>FaceSetPure</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>5b6ecd5d2dcb26c1b1f253a60fc596be</anchor>
      <arglist>(const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FaceSetPure</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>c2d15569ee760e69a0521c914216deb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>c637f85620ecb547feeb755b1ae58c32</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>fbbaf07e6e6329825edee95026fa22ab</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>fdd0a252374734f699cf2db85c5659a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>8326f394337cf94118600adf8902a974</anchor>
      <arglist>(face f) const </arglist>
    </member>
    <member kind="function">
      <type>const ListPure&lt; face &gt; &amp;</type>
      <name>faces</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>97b055da8efa89db6a2e089863c60721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceArray&lt; ListIterator&lt; face &gt; &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>e73053599e3de3593b48f6c7e8f9049d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; face &gt;</type>
      <name>m_faces</name>
      <anchorfile>classogdf_1_1_face_set_pure.html</anchorfile>
      <anchor>34b0609fbc05558162ac007aa37beb3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FaceSet</name>
    <filename>classogdf_1_1_face_set.html</filename>
    <member kind="function">
      <type></type>
      <name>FaceSet</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>d4f4470dfe8dca33dd08f7226b17a9e9</anchor>
      <arglist>(const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FaceSet</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>94870a603c79e81916edb1cf779a9cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>fb51927b87f67a18b1147bd610e0fa03</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>6587824f738aa7642e6f8e87272b6a4d</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>1c0499bb3c1e8a8aafcf09c8f2fbbc05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>9b1effb5fcfcd3c591e8f51813351a5b</anchor>
      <arglist>(face f) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>8eca4f52cf685276f44e6a1248b37c1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; face &gt; &amp;</type>
      <name>faces</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>935459a344878cc2d88bd1d1b7511896</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceArray&lt; ListIterator&lt; face &gt; &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>0ec2f46a118e5339e38720d295fb8038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; face &gt;</type>
      <name>m_faces</name>
      <anchorfile>classogdf_1_1_face_set.html</anchorfile>
      <anchor>553b7452d7648f5a5b028c61ad408017</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GenericPoint</name>
    <filename>classogdf_1_1_generic_point.html</filename>
    <templarg>NUMBER</templarg>
    <member kind="typedef">
      <type>NUMBER</type>
      <name>numberType</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>60b97771cf4b02c64bc3be1274fe4958</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericPoint</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>e1e048f54108b362b912d8597c9910c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericPoint</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>00751a1904eb8898c69f8a6c97c7176a</anchor>
      <arglist>(NUMBER x, NUMBER y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericPoint</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>83184610f5a1361790e1917deb663a97</anchor>
      <arglist>(const GenericPoint &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>GenericPoint</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>a412de8b7b2f611f9341a6f6f9bd82f3</anchor>
      <arglist>(const GenericPoint &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>50b106bb1c59d0f7ee3b9e2b5b6fa07a</anchor>
      <arglist>(const GenericPoint &amp;ip) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>848ebe284ff873d081282bf9027d6be8</anchor>
      <arglist>(const GenericPoint &amp;ip) const </arglist>
    </member>
    <member kind="variable">
      <type>NUMBER</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>7671fddcc3b864f63a742ee978c7e3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NUMBER</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_generic_point.html</anchorfile>
      <anchor>dc1e5170e22a839c46b50267e5ec7683</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::IPoint</name>
    <filename>classogdf_1_1_i_point.html</filename>
    <base>ogdf::GenericPoint&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>IPoint</name>
      <anchorfile>classogdf_1_1_i_point.html</anchorfile>
      <anchor>177cfb30accdcfdaa94f12a3de440f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPoint</name>
      <anchorfile>classogdf_1_1_i_point.html</anchorfile>
      <anchor>042e2f0d30c0844b3bc282f21f222940</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPoint</name>
      <anchorfile>classogdf_1_1_i_point.html</anchorfile>
      <anchor>46b1ddb76c2ea202a011344db1a95be0</anchor>
      <arglist>(const IPoint &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classogdf_1_1_i_point.html</anchorfile>
      <anchor>c9bd584034803ed3c8c7648d36a7225c</anchor>
      <arglist>(const IPoint &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DefHashFunc&lt; IPoint &gt;</name>
    <filename>classogdf_1_1_def_hash_func_3_01_i_point_01_4.html</filename>
    <member kind="function">
      <type>int</type>
      <name>hash</name>
      <anchorfile>classogdf_1_1_def_hash_func_3_01_i_point_01_4.html</anchorfile>
      <anchor>57864c2ffeb02dca94d4f28ae35ec32c</anchor>
      <arglist>(const IPoint &amp;ip) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::IPolyline</name>
    <filename>classogdf_1_1_i_polyline.html</filename>
    <base>ogdf::List</base>
    <member kind="function">
      <type></type>
      <name>IPolyline</name>
      <anchorfile>classogdf_1_1_i_polyline.html</anchorfile>
      <anchor>4814ef492057d69a9e2249b71908c549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPolyline</name>
      <anchorfile>classogdf_1_1_i_polyline.html</anchorfile>
      <anchor>f936ee4bcc47d67a1f3bc0331104e94b</anchor>
      <arglist>(const IPolyline &amp;ipl)</arglist>
    </member>
    <member kind="function">
      <type>IPolyline &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_i_polyline.html</anchorfile>
      <anchor>cbffb47ddf6998da47b96db2eeb5356a</anchor>
      <arglist>(const IPolyline &amp;ipl)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_i_polyline.html</anchorfile>
      <anchor>4d5d3556b142a490207c5c2b1b10a7a6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DPoint</name>
    <filename>classogdf_1_1_d_point.html</filename>
    <base>ogdf::GenericPoint&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>DPoint</name>
      <anchorfile>classogdf_1_1_d_point.html</anchorfile>
      <anchor>2b664a9c717b5858ebb3e6983836a0bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPoint</name>
      <anchorfile>classogdf_1_1_d_point.html</anchorfile>
      <anchor>819ba525f96c82220359cbb93f3d0653</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPoint</name>
      <anchorfile>classogdf_1_1_d_point.html</anchorfile>
      <anchor>7b70c5350526bde67174c10707b89e1c</anchor>
      <arglist>(const DPoint &amp;dp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_d_point.html</anchorfile>
      <anchor>a43823878e27639e1f1f1865f82a47b0</anchor>
      <arglist>(const DPoint &amp;dp) const </arglist>
    </member>
    <member kind="function">
      <type>DPoint</type>
      <name>operator+</name>
      <anchorfile>classogdf_1_1_d_point.html</anchorfile>
      <anchor>dc7b687fb1ad171e5844a717fa4e8ef4</anchor>
      <arglist>(const DPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>DPoint</type>
      <name>operator-</name>
      <anchorfile>classogdf_1_1_d_point.html</anchorfile>
      <anchor>a607951d8be6a1bc3d4eb566ec04c0c2</anchor>
      <arglist>(const DPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classogdf_1_1_d_point.html</anchorfile>
      <anchor>0159f83c1ae77e1d38e2dc6b961b1228</anchor>
      <arglist>(const DPoint &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DVector</name>
    <filename>classogdf_1_1_d_vector.html</filename>
    <base>ogdf::DPoint</base>
    <member kind="function">
      <type></type>
      <name>DVector</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>f3a581cb4414c2a81823a829c4470d73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVector</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>8f0cdb2027a0d40aa85941c707744677</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVector</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>c854fafd468ed99fce80d6583d83df37</anchor>
      <arglist>(const DVector &amp;dv)</arglist>
    </member>
    <member kind="function">
      <type>DVector</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>6d6a91b0542c7ddd7565d399598a8987</anchor>
      <arglist>(const DPoint &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>DVector</type>
      <name>operator *</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>8c30fae074e9176266fb5be41a8d4849</anchor>
      <arglist>(const double val) const </arglist>
    </member>
    <member kind="function">
      <type>DVector</type>
      <name>operator/</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>aaf557727e9edce63e732cf51b7ec837</anchor>
      <arglist>(const double val) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>36e05c98930d60ad58ded2dd5a04b93f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator^</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>63e4e971163daf0658871ff7a0fe49ae</anchor>
      <arglist>(const DVector &amp;dv) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator *</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>66a16b04ed3285eeb0e3177c31551ba4</anchor>
      <arglist>(const DVector &amp;dv) const </arglist>
    </member>
    <member kind="function">
      <type>DVector</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>441004577acacaed432a74faf084f01e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DVector</type>
      <name>operator--</name>
      <anchorfile>classogdf_1_1_d_vector.html</anchorfile>
      <anchor>a8afd78e43152a58f1fc1814326352f8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DPolyline</name>
    <filename>classogdf_1_1_d_polyline.html</filename>
    <base>ogdf::List</base>
    <member kind="function">
      <type></type>
      <name>DPolyline</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>e43ee90a7dc8b6f75b01974ba1bd3a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPolyline</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>2b4ae2af9640e6da1cadf6953c128e5c</anchor>
      <arglist>(const DPolyline &amp;dpl)</arglist>
    </member>
    <member kind="function">
      <type>DPolyline &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>b18fd3789e75f703950ce3b258770b8e</anchor>
      <arglist>(const DPolyline &amp;dpl)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>8116b47fdd97679d9bea108ce4121bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DPoint</type>
      <name>position</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>288e7d3009e4ddfdfeed570c8569a1bb</anchor>
      <arglist>(const double fraction, double len=-1.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>1a918ed13ce72f15d81d7ca2c866d9c0</anchor>
      <arglist>(const char *filename) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>faaf37e8f7db26401481d3680c9b1c4c</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unify</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>e12a5b6e7d6b1c46d0b88afbe1c6931a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>67c1e98325b10641505306cebc29354e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToInt</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>69871a301ed5bdbd6dd755bff8ecd9a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>s_prec</name>
      <anchorfile>classogdf_1_1_d_polyline.html</anchorfile>
      <anchor>db6dfd11b4f8e7296da5ed37854ba058</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DLine</name>
    <filename>classogdf_1_1_d_line.html</filename>
    <member kind="function">
      <type></type>
      <name>DLine</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>2e3f95097378c48c7462da4230797ab5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DLine</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>62402780d352e4038164adb22d45ac70</anchor>
      <arglist>(const DPoint &amp;p1, const DPoint &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DLine</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>edffd02928436594bc3d950c4bd3a070</anchor>
      <arglist>(const DLine &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DLine</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>9728271ffb82f8a97b82577f08c47407</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>ec93dfd20058948535fbf59f2b1d7e92</anchor>
      <arglist>(const DLine &amp;dl) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>c7d3a881ecb557073808a6012dc0a207</anchor>
      <arglist>(const DLine &amp;dl) const </arglist>
    </member>
    <member kind="function">
      <type>DLine &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>cbbdf6404b6c00c01ed8a2c592c1d91c</anchor>
      <arglist>(const DLine &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>start</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>fb367ef97f413915a16d607f270cccbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>c5123b5b51af410794b0f302b5e5dbde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dx</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>cc2a06db7dd0c197e1899121813c0b6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dy</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>9ce8f6bbf2dd2ae51d217b1155a0acf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>slope</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>a591095dc8b59b3f3658c720c984b8d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yAbs</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>01e71ed421b66115147c990a61735a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertical</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>dec5f99408cf5b74917416460f05dd21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHorizontal</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>c6c08d5c76c8dc97577792f0fe28d0f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersection</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>c024cd90ef988268f9a620bb8c0ce809</anchor>
      <arglist>(const DLine &amp;line, DPoint &amp;inter, bool endpoints=true) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>8fe868f65d1645dc22c9879eda8512d3</anchor>
      <arglist>(const DPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>1273566c689fdc2c70df240ee44e1402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>horIntersection</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>8de8dbee37b617881626f808eefdf84a</anchor>
      <arglist>(const double horAxis, double &amp;crossing) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>verIntersection</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>93e4c44d9c2e658a71402c1186ffad6a</anchor>
      <arglist>(const double verAxis, double &amp;crossing) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DPoint</type>
      <name>m_start</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>f5e07acdf181ba8704d7ab5a2e97ac66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DPoint</type>
      <name>m_end</name>
      <anchorfile>classogdf_1_1_d_line.html</anchorfile>
      <anchor>081f48d7d4063992177a125cabc9793c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DRect</name>
    <filename>classogdf_1_1_d_rect.html</filename>
    <member kind="function">
      <type></type>
      <name>DRect</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>03509d360b203e4f5c636b5978e45a5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRect</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>eb39981477f03bf3c188c6ae1f7255c9</anchor>
      <arglist>(const DPoint &amp;p1, const DPoint &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRect</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>cf8635d2ef6b9184fbeea674eeb2a68c</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRect</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>03135c5f17bd36a6c3c98f0ffc3285ff</anchor>
      <arglist>(const DLine &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRect</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>d71caaff414761bc942a0a97608165e0</anchor>
      <arglist>(const DRect &amp;dr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>b213e7a8e859d76df5f4f70b6d501c11</anchor>
      <arglist>(const DRect &amp;dr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>b6f182aa199b7b7b1310ff66971b9d89</anchor>
      <arglist>(const DRect &amp;dr) const </arglist>
    </member>
    <member kind="function">
      <type>DRect &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>7531dbb5eb114f2d5171e4395c9818db</anchor>
      <arglist>(const DRect &amp;dr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>a24c7139226c3d479d90bf448cbc2903</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>fd4bb7ca19d801bee04a053402f162bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>3a97f3d72409e32d33e3b0ebfb4b2c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>p1</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>1e3d1f4aad4c27baa96031a4d3fdaf1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>p2</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>37db02654641de101ee4b85400223a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DLine</type>
      <name>topLine</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>390500eb8f1f35817449f56fc96131bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DLine</type>
      <name>rightLine</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>702d1603d743bb1621611c5ca4b9ea37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DLine</type>
      <name>leftLine</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>f975504921a800062cd795a3d2a62904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DLine</type>
      <name>bottomLine</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>7dd661cb3f80dc915ea5533de95e0fa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yInvert</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>59c6fb45e1ea0777deb3127a73f84bae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xInvert</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>512e2c3b0172c7a40d1ab40fb11d41e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>6a9dd852733b1ed5ded078b327341c95</anchor>
      <arglist>(const DPoint &amp;p) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_p1</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>c0352796379148a180f7ff21f31c5bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_p2</name>
      <anchorfile>classogdf_1_1_d_rect.html</anchorfile>
      <anchor>aa266671559ef7c1b5116f7226b79db8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DScaler</name>
    <filename>classogdf_1_1_d_scaler.html</filename>
    <member kind="function">
      <type></type>
      <name>DScaler</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>066c140f47b09b877e574cac6091b6a1</anchor>
      <arglist>(const DRect &amp;from, const DRect &amp;to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DScaler</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>71db9e735c44f16c073ac2bf24f45d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DRect &amp;</type>
      <name>from</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>60ce0051c2cabe1cbafc5430c7bc7eed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DRect &amp;</type>
      <name>to</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>3758ce9ea27e8b6b88d62261af147576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleToX</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>d8fada1e812ff83afc8d9192e056b00c</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleToY</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>48d34467512043505fdbdbeaf175783a</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleWidth</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>d49da797dcb66296b4531fff4a6040af</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleHeight</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>f27b87c7f5c8e2bb3d43216e5fd3a89e</anchor>
      <arglist>(double height)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DRect *</type>
      <name>m_from</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>0a6d52b12587b0c71855360d3e2702e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DRect *</type>
      <name>m_to</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>859c2df8788c3ba71d2979783f678357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_factorX</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>db7067bc8eee083ba8bc4422a74db4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_factorY</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>e2c23c742b0793722b2d9391adb83ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_offsetX</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>bfb98b3bd1e4cf79d2ae358911fba52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_offsetY</name>
      <anchorfile>classogdf_1_1_d_scaler.html</anchorfile>
      <anchor>31f388b2b6688ab4c22507d5ff0c16f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DSegment</name>
    <filename>classogdf_1_1_d_segment.html</filename>
    <base>ogdf::DLine</base>
    <member kind="function">
      <type></type>
      <name>DSegment</name>
      <anchorfile>classogdf_1_1_d_segment.html</anchorfile>
      <anchor>414987cbab5e32a7c1dbd85c448d31a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSegment</name>
      <anchorfile>classogdf_1_1_d_segment.html</anchorfile>
      <anchor>e0bfdc65069d564c613b91dd7b477e92</anchor>
      <arglist>(const DPoint &amp;p1, const DPoint &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSegment</name>
      <anchorfile>classogdf_1_1_d_segment.html</anchorfile>
      <anchor>14607da88212ef3caf1cc5ed5af0ad07</anchor>
      <arglist>(const DLine &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSegment</name>
      <anchorfile>classogdf_1_1_d_segment.html</anchorfile>
      <anchor>9df31f3611ae37c9a3c24ea111b5800b</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSegment</name>
      <anchorfile>classogdf_1_1_d_segment.html</anchorfile>
      <anchor>a9610912c49aa03f991040aa8c0f60b2</anchor>
      <arglist>(const DSegment &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>det</name>
      <anchorfile>classogdf_1_1_d_segment.html</anchorfile>
      <anchor>8cfd29527722fcb63f636abe61da0266</anchor>
      <arglist>(const DSegment &amp;segment) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DPolygon</name>
    <filename>classogdf_1_1_d_polygon.html</filename>
    <base>ogdf::DPolyline</base>
    <member kind="function">
      <type></type>
      <name>DPolygon</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>7ab234f1d2a36ff84a7e09976bda3f97</anchor>
      <arglist>(bool cc=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPolygon</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>2c50ed08216f44fec3b48538dc6a937e</anchor>
      <arglist>(const DRect &amp;rect, bool cc=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPolygon</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>c620af1672af038c0f949e203091375a</anchor>
      <arglist>(const DPolygon &amp;dop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>counterclock</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>4e8ff7f897f75874d62676a4182e53f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DPolygon &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>d18cf8d9f5834b4aa6d6c3fcc489a6e9</anchor>
      <arglist>(const DPolygon &amp;dop)</arglist>
    </member>
    <member kind="function">
      <type>DPolygon &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>d772734b7174d57ea13ea3e9add2dc28</anchor>
      <arglist>(const DRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>DSegment</type>
      <name>segment</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>c61d590e866b4574fbd832f4bff93852</anchor>
      <arglist>(ListConstIterator&lt; DPoint &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; DPoint &gt;</type>
      <name>insertPoint</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>5c59cdaa88853b69fd71b33cd7e7b2a8</anchor>
      <arglist>(const DPoint &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; DPoint &gt;</type>
      <name>insertPoint</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>d92d81dbb3f47c16021ef3e9c6a8af7d</anchor>
      <arglist>(const DPoint &amp;p, ListIterator&lt; DPoint &gt; p1, ListIterator&lt; DPoint &gt; p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCrossPoint</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>5c27b8ab976b809b37fa8fd39818c4dd</anchor>
      <arglist>(const DPoint &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCrossPoints</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>a15223c3e3041219b3090553b6d6bb12</anchor>
      <arglist>(const DPolygon &amp;p, List&lt; DPoint &gt; &amp;crossPoints) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unify</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>f9a0a2705295e71109d048d19ecdf88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>c7da151ec3c7555fc4d892b09947b755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>4c7d9ac5f7f3e0d72eb916a12e281bc8</anchor>
      <arglist>(const char *filename) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>0c6da55fa61c4d30f878e87e6c624d5e</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_counterclock</name>
      <anchorfile>classogdf_1_1_d_polygon.html</anchorfile>
      <anchor>acd13fcc0025eea47658893706f67899</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphElement</name>
    <filename>classogdf_1_1_graph_element.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph_element.html</anchorfile>
      <anchor>b4e03d7dc8ce8006da8b21ddf03a066c</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph_element.html</anchorfile>
      <anchor>586c559853e13f3c0a335aca438d4893</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_graph_element.html</anchorfile>
      <anchor>9b8f6d9ca6f2b8598a402b7bc41e16d6</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GraphElement *</type>
      <name>m_next</name>
      <anchorfile>classogdf_1_1_graph_element.html</anchorfile>
      <anchor>f6ec4b831e295e72f217240f11936adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GraphElement *</type>
      <name>m_prev</name>
      <anchorfile>classogdf_1_1_graph_element.html</anchorfile>
      <anchor>32a4af83574a810cf4db232c7ab1a33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Graph</name>
      <anchorfile>classogdf_1_1_graph_element.html</anchorfile>
      <anchor>fab89afd724f1b07b1aaad6bdc61c47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GraphListBase</name>
      <anchorfile>classogdf_1_1_graph_element.html</anchorfile>
      <anchor>a958c3325a69c57ff5d84f00e9d18daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphListBase</name>
    <filename>classogdf_1_1_graph_list_base.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphListBase</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>4687371fe6c3a7bc36a68f72364502e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GraphListBase</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>b06ca4a9c27c56dd4871f07bb304c91c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>d5f6fae6c0c318bd108a96b296e47f1d</anchor>
      <arglist>(GraphElement *pX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAfter</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>c8e90e423fc9b0ba8434ffa8f91aabe2</anchor>
      <arglist>(GraphElement *pX, GraphElement *pY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBefore</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>aa6d5c719ea83802a72af31e25b8c94e</anchor>
      <arglist>(GraphElement *pX, GraphElement *pY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>del</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>602a798ce8f426fbf2c73f70de293d13</anchor>
      <arglist>(GraphElement *pX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>6c495a3d457d9da9441c0a24a0b312b4</anchor>
      <arglist>(const LIST &amp;newOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>7a51bd32c69a4713e09ac8d6375cbe6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>01815e67b5be543bd6786fd36725beaf</anchor>
      <arglist>(GraphElement *pX, GraphElement *pY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>1bb4d57037ce61fac03e637e2a8f8698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>5dd88377363a532e843ba7209775ad4f</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>c630dfd941c9858682ec100f2aa41db5</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>a16dd434ce7e6d2ce47aac21cf5f4bce</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GraphElement *</type>
      <name>m_head</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>f1a1608ee1671051c5f280b3269ae237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GraphElement *</type>
      <name>m_tail</name>
      <anchorfile>classogdf_1_1_graph_list_base.html</anchorfile>
      <anchor>4a2aeb0eda0f2da8ae363046098a8fbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphList</name>
    <filename>classogdf_1_1_graph_list.html</filename>
    <templarg>T</templarg>
    <base protection="protected">ogdf::GraphListBase</base>
    <member kind="function">
      <type></type>
      <name>GraphList</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>a41912636b55e27f1bd2ce82f5002788</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GraphList</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>ea4e6134d3f2244506264f1eaeac31bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>410b53a8869e67e49a78ac9abc4381c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>028e22dbc226394ae75ee72c48ba3341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>b88cdade14e3d7bfc21901bec25d1a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>556542e4f47dca82153c8d3582e2d052</anchor>
      <arglist>(T *pX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAfter</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>2d6575a87ac655619da4f04fa2f8053f</anchor>
      <arglist>(T *pX, T *pY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBefore</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>1670d0b1336eb8b0ab0a34c454b31ece</anchor>
      <arglist>(T *pX, T *pY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>e4179209de03267f19e5f93333bc9661</anchor>
      <arglist>(T *pX, GraphList&lt; T &gt; &amp;L, T *pY, Direction dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>1eb121f1c606c6569d07805bda2fd289</anchor>
      <arglist>(T *pX, GraphList&lt; T &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveAfter</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>ac57cae8f61ece58b06f63abf9f360b1</anchor>
      <arglist>(T *pX, T *pY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveBefore</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>7f86078bfc4df03b7dcff4061691f8c4</anchor>
      <arglist>(T *pX, T *pY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>del</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>672f9746b1c690c6801b18cb3c913702</anchor>
      <arglist>(T *pX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delPure</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>c7b39aefd894d38207e0a524c0419e04</anchor>
      <arglist>(T *pX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>a3f065b0787a61303fd4aa70c58339f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>9839124590665352d57d729c979e6c1c</anchor>
      <arglist>(const T_LIST &amp;newOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>2bbdb55f09a58bc67a3cd2c1e0a63aa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>079a71408c37c51ad07c722a8c1b6891</anchor>
      <arglist>(T *pX, T *pY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>0e4f0d601a48977e64743c7e6c60fcb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>e939bf495d324d2fdd2cb46e005e071e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>72c9892156743ae1062280d8445cc783</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_graph_list.html</anchorfile>
      <anchor>4dbac3689a5737648179b92e7588064c</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AdjElement</name>
    <filename>classogdf_1_1_adj_element.html</filename>
    <base protection="private">ogdf::GraphElement</base>
    <member kind="function">
      <type>edge</type>
      <name>theEdge</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>51d537b868fd498ebdbae9c30c768149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator edge</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>465e353a6c261a070d6da3c9927c2b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>theNode</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>96d81445dee8743113c886ec2aa464ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>twin</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>5acf9824df9be64c757a33b804836758</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>twinNode</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>04b22bbf4d820e8ad6fa9a4ef2da77f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>c53abf997a1874f33a5e31c99cb397ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>clockwiseFaceSucc</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>6360561dfd8c907c17305a19857f3a6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>clockwiseFacePred</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>0fefaa68dc0d5a43d5b8ac73005124e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>counterClockwiseFaceSucc</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>5a6d612122ee2db15206414c001c52b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>counterClockwiseFacePred</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>b39d182d3e882f30a8d834b267e075df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>faceCycleSucc</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>e0a2977d7a3e5fa6424c9ceb9e07d7df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>faceCyclePred</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>bdcfae3aa09132cf5a55a164915ebbeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>d213b6a7508a5e1a7f906fe835bb84ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>pred</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>ca27e232d48b5beea4fbc384d820c4e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>3463a94f1cf8b65ee64e01cffd0d24d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>cyclicPred</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>d4085fd937aaec84218f88506a9d05b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>ea6ba2910614eefabe8e0493f974b492</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>91443ca7b5fd1570dd2260d8e37468f0</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>6f6a2bd28b3b901e22655b7b8d9e52d2</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AdjElement</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>6ae1fd544b5350822482b7c289ce96e8</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AdjElement</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>efe114019acb29e2451b0df170d572d3</anchor>
      <arglist>(edge e, int id)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjElement *</type>
      <name>m_twin</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>3a936b469697a425959506da7d96dc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>edge</type>
      <name>m_edge</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>526841b5f0c44ea3cfad7c8edca6aa52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_node</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>a8950fbfd3f7daabb8d1b33c0eb6b86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_id</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>48be619e1636481f631d5ed23243b5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Graph</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>fab89afd724f1b07b1aaad6bdc61c47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GraphListBase</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>a958c3325a69c57ff5d84f00e9d18daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GraphList&lt; AdjElement &gt;</name>
      <anchorfile>classogdf_1_1_adj_element.html</anchorfile>
      <anchor>0270959b36c0ee729b36e5fc8e3d88b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeElement</name>
    <filename>classogdf_1_1_node_element.html</filename>
    <base protection="private">ogdf::GraphElement</base>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>72e836f235cf9e5c4bda3e8a8186f11c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indeg</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>6b41b1958d37ecbef23941639443917b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outdeg</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>2d58966390ce994d39c297e89eb419ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>32f39760010d710ef900580883d85fa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>firstAdj</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>2581c8004018c1f037a4a8578e226b69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>lastAdj</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>e8636e8638bd424cc5f33cf7b56b3fdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>fdc88a491ab62d5dbe906f33d3a254f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>pred</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>2225008fe23191a6e82b9cd3ddb9635f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>029402c4c22a75d328b427eccc7d7244</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>45451b5db41ec3ea41499c6fb77d3d96</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>f643ac81f2ee933038588204f93711ae</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NodeElement</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>4fb752f2fc24e80074cc12bc320acf23</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphList&lt; AdjElement &gt;</type>
      <name>m_adjEdges</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>8cadbddf14c7c900dee1e61564ee9040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_indeg</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>d80e05f1bb0bb522033286b610832214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_outdeg</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>ebaedfe1b21f551368f376cafa702b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_id</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>4c696a7564819d263808a867afc234cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Graph</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>fab89afd724f1b07b1aaad6bdc61c47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GraphList&lt; NodeElement &gt;</name>
      <anchorfile>classogdf_1_1_node_element.html</anchorfile>
      <anchor>ec0a690ca0b1dd889df0d6ea44923d4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeElement</name>
    <filename>classogdf_1_1_edge_element.html</filename>
    <base protection="private">ogdf::GraphElement</base>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>cf507700b095b4ffce75e1635717de0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>source</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>282bf31f378b5f7d99189fc7f8b8763a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>target</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>f1af7db8a594ecac1ae86bfafb40cb11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>adjSource</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>e10dc207174d8cbcb88a4ac498535e9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>adjTarget</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>f4420ed0b33844f4277658fb71fbb400</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>opposite</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>818097e3af912ed99789b3d37e3a280c</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelfLoop</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>088a4c421329d944648c5f81fb0fed83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>b4067839245d2dece74b89db23c4fc6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>pred</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>c770626d407601863e128736ea01f492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIncident</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>a722e29c75b1301973affc02a9385814</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>commonNode</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>82d72c7812d002ab50186366d10ae846</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>e497f31829265a4e747655a36c090d98</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>0f968150b0319c7e117687b29e80f5af</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>9ec13e102be3ec6fa7313d1e6a6472c1</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>EdgeElement</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>4a9e5289e9fb30933f6f4b8bb0a62eb3</anchor>
      <arglist>(node src, node tgt, AdjElement *adjSrc, AdjElement *adjTgt, int id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>EdgeElement</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>4175c0485b8a8270e914dbb5e86ff1d2</anchor>
      <arglist>(node src, node tgt, int id)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_src</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>afd701bd1a75409593b135e2972ca4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_tgt</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>9ad5813fbb8e606c1cb1aee96f45490f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjElement *</type>
      <name>m_adjSrc</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>7cc6a5769d1ea8cc6b91005e33231c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjElement *</type>
      <name>m_adjTgt</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>94d3fb63687053b1c2cc80dddec25b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_id</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>9861103c24d274839ceb308b3ab65eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Graph</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>fab89afd724f1b07b1aaad6bdc61c47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GraphList&lt; EdgeElement &gt;</name>
      <anchorfile>classogdf_1_1_edge_element.html</anchorfile>
      <anchor>7331c5e650763b92e76c92516f2b4883</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Graph</name>
    <filename>classogdf_1_1_graph.html</filename>
    <member kind="enumeration">
      <name>EdgeType</name>
      <anchor>c8c48494e3c2accfc3e401e4553eef32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>association</name>
      <anchor>c8c48494e3c2accfc3e401e4553eef323f87e81869ae5cb959c31820f970ee8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>generalization</name>
      <anchor>c8c48494e3c2accfc3e401e4553eef32173a6fa8f4a6caff615374a87492192f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dependency</name>
      <anchor>c8c48494e3c2accfc3e401e4553eef32926f967052dd84bb9cf180de9d64f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NodeType</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertex</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741d2dfcbc859a2a77196553a913e35d4011</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dummy</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741d540ed4b0911c887cc0b3265489c059fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>generalizationMerger</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741d76e2fa2972090b318abf29ed48c4b760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>generalizationExpander</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741ddf52e4922a60c547ba7e558b40a28503</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>highDegreeExpander</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741d68e9face5954939f79a043ea2589eb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lowDegreeExpander</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741dc222dab024074bc598fb77bd04a611d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>associationClass</name>
      <anchor>bfefed1cf73ecd215796ad529a5f741d57f750ab8a3f3db54bdcf8f67bd30e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>ab24e52e58cce69a72511c7bde57fb17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>8a18bb43ac2b9175082721d3aec28882</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Graph</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>cbc2abca6cbe6d675617161aff4a92c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>b083fe379db47e16fbe2a9d976d6f8de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfNodes</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>e8630b1fdecc8f28b2c6a077148e81aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>d4d632a1fcbfd3b385633ce3c6437d43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNodeIndex</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>0f6a74492399ca063494b2dcb99587aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxEdgeIndex</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>3af369f046447e65c430606b3637e4fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxAdjEntryIndex</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>2131b511111c33b6a5817a415dfa329f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeArrayTableSize</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>9c637237bc3aa25a067b139e09bf9414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edgeArrayTableSize</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>b03a764cc0019d4dcca84e940d38bde7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>adjEntryArrayTableSize</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>512a96c7078207df1cb88a040a0b3e7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>firstNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>b9350c7364a41e26e87f54fa3155e718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>lastNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>ea2d059d7db43b89e2504fd1fbf33f02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>firstEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>f3d76c259cccb3a338129591aec3d9c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>lastEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>a91d3c5a7e87d1d450fa92debd767808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>chooseNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>37881d0a6205f67687989fcdd9283ede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>chooseEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>1450ac4866161aa6845dcb62c1c42c13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allNodes</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>cea91d48917135c6459a50af2230f586</anchor>
      <arglist>(NODELIST &amp;nodes) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>1e2d6091070540da345adf5530cb0bed</anchor>
      <arglist>(EDGELIST &amp;edges) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>471a245072b10020e1c156f46e59e8d5</anchor>
      <arglist>(node v, EDGELIST &amp;edges) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjEntries</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>a0518884a4da06ac9b7be71a859c547c</anchor>
      <arglist>(node v, ADJLIST &amp;entries) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>f5d7760a43f20c486fee7a83d6b75208</anchor>
      <arglist>(node v, EDGELIST &amp;edges) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>a484f81ae871b89d001b3d9c66dde40e</anchor>
      <arglist>(node v, EDGELIST &amp;edges) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>newNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>df23da993771ccb4a3af1ab5484023fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>newNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>1026225f4ae666f1f80ee7a42737600d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>5824794851132ba79dca5a2d6eef9f01</anchor>
      <arglist>(node v, node w)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>e0071d88d3a6b162e49d530ead686119</anchor>
      <arglist>(node v, node w, int index)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>992c63b9510abd4661cd5581e73ac243</anchor>
      <arglist>(adjEntry adjSrc, adjEntry adjTgt, Direction dir=ogdf::after)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>3826e47a69197cc709d9454ba846f0e3</anchor>
      <arglist>(node v, adjEntry adjTgt)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>6a4fb6bac02583ae7becee675d2a0ec7</anchor>
      <arglist>(adjEntry adjSrc, node w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>19f72f57be2395d74e9078025281fa9d</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>feb85c985713590363655c8346b5011b</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>105b649bded6e03c73c71fcb1105f90a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>9004be8004bfa9f00c3bd8e0ee1c10b8</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>75af33a3edf173056956eb3d3763c575</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreAllEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>cc0ac1b11b7cd584e29e8e884d019f74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>c3be54a0554615b50cf6661029abb592</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsplit</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>1e86ecdfbcf0fbeea55585ca14308037</anchor>
      <arglist>(node u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsplit</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>14cc6ad7b8ab14513045ec93a5d23adf</anchor>
      <arglist>(edge eIn, edge eOut)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>splitNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>3029981181f3a45089755f15c30988be</anchor>
      <arglist>(adjEntry adjStartLeft, adjEntry adjStartRight)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>contract</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>f398784f4a501bf8bb0c552c9a8ac7ac</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>686f7b53091bb11d8f99d1acfd0731a8</anchor>
      <arglist>(edge e, adjEntry adjSrc, Direction dirSrc, adjEntry adjTgt, Direction dirTgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTarget</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>66f58c14ce22e375ebf97739b22a0214</anchor>
      <arglist>(edge e, node w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTarget</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>931e0a1d680e0c3a4ba6231cf6e50569</anchor>
      <arglist>(edge e, adjEntry adjTgt, Direction dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveSource</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>41f12008c800d9e9367e0ee1e7f934d5</anchor>
      <arglist>(edge e, node w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveSource</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>e26fc24be967f391058c79c2e2276994</anchor>
      <arglist>(edge e, adjEntry adjSrc, Direction dir)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>searchEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>86fab3e371740e39bb2f92779ec887b1</anchor>
      <arglist>(node v, node w) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseEdge</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>6a487bfd8060bebd6a1d4d451801aa28</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseAllEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>c84715bd92696621247627cbcddb4f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collaps</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>ae198ec933113f28ec87c1eaf9192a4f</anchor>
      <arglist>(NODELIST &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>460cab14a1a81e9d2e1a69fd2780478a</anchor>
      <arglist>(node v, const ADJ_ENTRY_LIST &amp;newOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseAdjEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>b42491244bc6f2682edca264d0759551</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveAdj</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>9c1cd90e444955a2134a53362de400cd</anchor>
      <arglist>(adjEntry adjMove, Direction dir, adjEntry adjPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveAdjAfter</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>c71e50418db30db0b358ff6d7a81a002</anchor>
      <arglist>(adjEntry adjMove, adjEntry adjAfter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveAdjBefore</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>58eeedf919894828454d29c6e4cedcec</anchor>
      <arglist>(adjEntry adjMove, adjEntry adjBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseAdjEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>8a674f3103a4f34e30788639e81ffa1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapAdjEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>610863350349a1aa84fcfde9a13360a5</anchor>
      <arglist>(adjEntry adj1, adjEntry adj2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readGML</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>e5372aa4172c3845f3ce3dfc1dfe7edf</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readGML</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>801f813791b01b5d7b2dd6c959d04f16</anchor>
      <arglist>(istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>a4b4b33306e6292e26e1a89349d3c81d</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>90d2cfd2ce7d5feb5145066fcbbfbe95</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readLEDAGraph</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>10d324ec76a873f508c48534e781ddf0</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readLEDAGraph</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>9214b0dbaf0832e3c8a121f63629ac4d</anchor>
      <arglist>(istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>genus</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>27acc8a41c1b4be155efa1043d6acd89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>representsCombEmbedding</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>431d258072b44996d7df54cb622e8d30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>254e948d659496dafbae6cff404afe31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; NodeArrayBase * &gt;</type>
      <name>registerArray</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>3378d109b18e7036fcec4e1b4306c7f1</anchor>
      <arglist>(NodeArrayBase *pNodeArray) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; EdgeArrayBase * &gt;</type>
      <name>registerArray</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>48cde5de3df6b0abcace5baebb9535ca</anchor>
      <arglist>(EdgeArrayBase *pEdgeArray) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; AdjEntryArrayBase * &gt;</type>
      <name>registerArray</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>b9e770cdfa7a13b3421035e0cfacebe1</anchor>
      <arglist>(AdjEntryArrayBase *pAdjArray) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; GraphObserver * &gt;</type>
      <name>registerStructure</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>b077f4f86b48663f2b5b659fc816ef65</anchor>
      <arglist>(GraphObserver *pStructure) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterArray</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>208537166aff3d03dd32637ef0b43393</anchor>
      <arglist>(ListIterator&lt; NodeArrayBase * &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterArray</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>80aad0686649c2387888aa462cbf83a8</anchor>
      <arglist>(ListIterator&lt; EdgeArrayBase * &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterArray</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>7c26789f5f5782f6f84b849e0a48f565</anchor>
      <arglist>(ListIterator&lt; AdjEntryArrayBase * &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterStructure</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>0225cea82d3360efddf0918af71d7003</anchor>
      <arglist>(ListIterator&lt; GraphObserver * &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetEdgeIdCount</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>7e5fcf1d7bc3e32f5296371ab3e81fea</anchor>
      <arglist>(int maxId)</arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>ce9429b514dcdcbc4f383e87fe8681e7</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>a3ec3700132f765ec660ac968f681be3</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>f2bff699e1d92d0744991e3642106b5d</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>9d40b19183ae7423bd190d9ed0bbc0ab</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nextPower2</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>cb422dc135e33859e4e59b139eea8235</anchor>
      <arglist>(int start, int idCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>0b58b28902b27e0adb5e8a02f98ce220</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; node &gt; &amp;mapNode, EdgeArray&lt; edge &gt; &amp;mapEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>9bed01e2a1161395893bfb55a96cccdc</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; node &gt; &amp;mapNode, EdgeArray&lt; edge &gt; &amp;mapEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructInitByNodes</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>8c78d1aea3a1240204628f6055399134</anchor>
      <arglist>(const Graph &amp;G, const List&lt; node &gt; &amp;nodes, NodeArray&lt; node &gt; &amp;mapNode, EdgeArray&lt; edge &gt; &amp;mapEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructInitByActiveNodes</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>8ddbf5ee5168b2c5fdd43a49af8f4cae</anchor>
      <arglist>(const List&lt; node &gt; &amp;nodes, const NodeArray&lt; bool &gt; &amp;activeNodes, NodeArray&lt; node &gt; &amp;mapNode, EdgeArray&lt; edge &gt; &amp;mapEdge)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>8ea705e5f84bf19373b0fbcac19144ad</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; node &gt; &amp;mapNode, EdgeArray&lt; edge &gt; &amp;mapEdge)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>c8c70fa975b75874be7699f15627703c</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>createEdgeElement</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>43b6d6661a3942bb3ace80a6a385b91d</anchor>
      <arglist>(node v, node w, adjEntry adjSrc, adjEntry adjTgt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>pureNewNode</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>aea824488394ed874649b0842b076e41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>moveAdj</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>e464d11da71dc212a28e62fdbf60dd5d</anchor>
      <arglist>(adjEntry adj, node w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reinitArrays</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>5ecf511a843a321f48fdb5be40c9bc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reinitStructures</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>a00498a75a0c9549f920ce844f4d75d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetAdjEntryIndex</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>4d0cff91e81253bbe8119b99edd90221</anchor>
      <arglist>(int newIndex, int oldIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>readToEndOfLine</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>037b33fd3e4281c64c8d21141c084ed8</anchor>
      <arglist>(istream &amp;is)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphList&lt; NodeElement &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>733e90b92ef943bb21c58a8ea6758832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphList&lt; EdgeElement &gt;</type>
      <name>m_edges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>76d6193125f56e4cd03ed31bf59f4d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nNodes</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>75766385d6f9aab5bde938d7de0b2b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>2f2ef575500d9e6f635664d403d6e1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nodeIdCount</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>748e9b939671355f5936d18852458df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_edgeIdCount</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>73fb0fa5c5d8eea863e7f79914984a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nodeArrayTableSize</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>427577b4e31068ffb3650814df078d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_edgeArrayTableSize</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>ec8b58ef17f326fb2012e750e6c73e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; NodeArrayBase * &gt;</type>
      <name>m_regNodeArrays</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>bc7971f4b3d6a9b0e755dcc2753dc8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; EdgeArrayBase * &gt;</type>
      <name>m_regEdgeArrays</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>332101e089e87576a1d10820e8df336d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; AdjEntryArrayBase * &gt;</type>
      <name>m_regAdjArrays</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>3b2b0129737a2648b3fbe0aa7b8c6f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; GraphObserver * &gt;</type>
      <name>m_regStructures</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>3a9ecb16dd380dc3500896d4f22e9a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphList&lt; EdgeElement &gt;</type>
      <name>m_hiddenEdges</name>
      <anchorfile>classogdf_1_1_graph.html</anchorfile>
      <anchor>9bf1f9dd1aef44ce6ea00801ba2cda97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BucketSourceIndex</name>
    <filename>classogdf_1_1_bucket_source_index.html</filename>
    <base>ogdf::BucketFunc</base>
    <member kind="function">
      <type>int</type>
      <name>getBucket</name>
      <anchorfile>classogdf_1_1_bucket_source_index.html</anchorfile>
      <anchor>1a652cb47e417a43c94a74da25c14526</anchor>
      <arglist>(const edge &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BucketTargetIndex</name>
    <filename>classogdf_1_1_bucket_target_index.html</filename>
    <base>ogdf::BucketFunc</base>
    <member kind="function">
      <type>int</type>
      <name>getBucket</name>
      <anchorfile>classogdf_1_1_bucket_target_index.html</anchorfile>
      <anchor>538b1e198563643030932df31b2f7b32</anchor>
      <arglist>(const edge &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphAttributes</name>
    <filename>classogdf_1_1_graph_attributes.html</filename>
    <member kind="enumeration">
      <name>EdgeArrow</name>
      <anchor>28ee9ab38225956ef0b57e6e51773c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchor>28ee9ab38225956ef0b57e6e51773c93c1bab52cdf4e637319eb7c600ebc7c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>last</name>
      <anchor>28ee9ab38225956ef0b57e6e51773c9300fe8d1eed3b53ec173df2af15fae9a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>first</name>
      <anchor>28ee9ab38225956ef0b57e6e51773c938ed1b9022068b016930c7bfddf4832db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>both</name>
      <anchor>28ee9ab38225956ef0b57e6e51773c93e33cf4a8ae3f365cdba76f52ece34a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>undefined</name>
      <anchor>28ee9ab38225956ef0b57e6e51773c93f63f14c271a59cb38bbaace970e550af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EdgeStyle</name>
      <anchor>774e58a3b3434aacb5bd9b149705b655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esNoPen</name>
      <anchor>774e58a3b3434aacb5bd9b149705b655532e79fc693ec501c35cf688012b6c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esSolid</name>
      <anchor>774e58a3b3434aacb5bd9b149705b655e828d0b9816c1d73989650c0ab2366de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esDash</name>
      <anchor>774e58a3b3434aacb5bd9b149705b6550d2020512d1879e39d98e70bd4be6b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esDot</name>
      <anchor>774e58a3b3434aacb5bd9b149705b655cf79ce9ad48ce19eaf68188bb2b7706a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esDashdot</name>
      <anchor>774e58a3b3434aacb5bd9b149705b655fe1d156d8a6b43c9015de41764acc5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esDashdotdot</name>
      <anchor>774e58a3b3434aacb5bd9b149705b6551a2216064827bde1f5d2cc28916dff38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BrushPattern</name>
      <anchor>546a042968a42f0297545cf45417b7f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpNone</name>
      <anchor>546a042968a42f0297545cf45417b7f9c80de2f4aee37ba7e7122286743ea82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpSolid</name>
      <anchor>546a042968a42f0297545cf45417b7f91e364253345926d1036c88be41fec08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpDense1</name>
      <anchor>546a042968a42f0297545cf45417b7f9894b9d5776a4bfe724a57364c7205025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpDense2</name>
      <anchor>546a042968a42f0297545cf45417b7f94f77b52d2eeaa8cfc1c2a7e36af8dec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpDense3</name>
      <anchor>546a042968a42f0297545cf45417b7f928682a6d456d45a969dd6cde1db43f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpDense4</name>
      <anchor>546a042968a42f0297545cf45417b7f9480b8076b8c80d3b09722f1334fdd9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpDense5</name>
      <anchor>546a042968a42f0297545cf45417b7f950b0aa821b0a841b2116e993de935b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpDense6</name>
      <anchor>546a042968a42f0297545cf45417b7f9175237a4eb05a97a8e272a17160819c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpDense7</name>
      <anchor>546a042968a42f0297545cf45417b7f9d93d0507cd9ae629ea1e2f65ceb1b4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpHorizontal</name>
      <anchor>546a042968a42f0297545cf45417b7f919bd53527aa9d6abbc9c6139ba721d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpVertical</name>
      <anchor>546a042968a42f0297545cf45417b7f94b1b0e3585313674057a16c629b1b20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bpCross</name>
      <anchor>546a042968a42f0297545cf45417b7f9d921d1b7d8827316012ede8c72df3c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackwardDiagonal</name>
      <anchor>546a042968a42f0297545cf45417b7f9b3ed851fac3912922429fadad229180a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForwardDiagonal</name>
      <anchor>546a042968a42f0297545cf45417b7f930a9a9bb88abf74f49a42c13f900d996</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DiagonalCross</name>
      <anchor>546a042968a42f0297545cf45417b7f969344fc5bf8bcdeb52e0942281293b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeGraphics</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c43feaba99f1d841ba39b9c7bf9c8156e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeGraphics</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4015ad053e544d4a983d1a646ad20fe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeLevel</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4b7bcfbcffa862f7a7cff028fac724e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeIntWeight</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4f7ea351a987e86aa6eebfde9b3559352</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeDoubleWeight</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c49156c5f26772b0e432ee09e7469042dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeLabel</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4e426f8d80837d86ed71afd3d0270eb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeLabel</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4bae4ac33f997c6df32c59fe5f70307be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeType</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4cb73a91bbef01106e647e24f3d345317</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeType</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4746c2c96f5e219037a0c54c54c49de2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeColor</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c43f94d8a22a62e5ba75fade67d812cc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeId</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4518ecfa23845ad9811aeb67008c153da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeArrow</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c45da6f8f8f3e39e87caa69f7b0ee7ac9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeColor</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c45cfbf3a373f05f081152d7dc80b8d449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeStyle</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c49f26a320ad9e5d184a9a652744f8a882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeStyle</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4c616059614efc1941717d41c825a04eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodeTemplate</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4f8ce3b6a7046b850f2bb4fdc5b3b0b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgeSubGraph</name>
      <anchor>86afaf5cdd008036bcfcf42970a0a4c4a4145d19270571d5166027008ecb7649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>oval</name>
      <anchor>2d749f26af4746b8f874c47fcc2f1125085a7a883a99fcc60e8e770c13f7b9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rectangle</name>
      <anchor>2d749f26af4746b8f874c47fcc2f1125a996c90c00db6e7aeb61e6ae2ac24384</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphAttributes</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ec62a5a476690e1fa951d59ec59393b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphAttributes</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>1bf5a921e290810c283d8f92328a44d8</anchor>
      <arglist>(const Graph &amp;G, long initAttributes=nodeGraphics|edgeGraphics)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GraphAttributes</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>035c678588e5ad6025b422872e1d13a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>5ebc65282f4eac4cf8c2364ca641fa43</anchor>
      <arglist>(const Graph &amp;G, long initAttr)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>attributes</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>017814b84e01a58f1454655844675b54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAttributes</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>9e4e13bc39e2d8a4ebe32c1b0a7ada05</anchor>
      <arglist>(long attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyAttributes</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>63b217a3ca83f0f22d35f779561ea9a8</anchor>
      <arglist>(long attr)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>constGraph</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>27ee0d683df44868a2b49f37dcad459e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>templateNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>0ccc9904fab3b607d95e2d9f5a3bd7bb</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>templateNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ec3b69a59b562d808ce8c9fb32339d50</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>7018c21a9a09cd83be266c654b5ccf2d</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>145c8a112b004639e3f29303fad30009</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ed4b68ffeca882c90c51e98796342c72</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>7b2b460662e3407a52c62bfa57cd3226</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ebd01782739d416b8dd8985a24c9885f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; double &gt; &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>34d39200642ec5f8f57438094dd60a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>4bdc5986dd49e81d5d35393a738a053e</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>4d7ef6de455200f27979cfab4b59fa6e</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>63ad1d82c82328e70a9baa74d6901a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; double &gt; &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>4f3b3acd0368be67d637d144de4d8074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>b2e85c31b46f2127c0fe06d4f3e1fd05</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>dbd6e89eb64ac6d7d696e065ccb7153b</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>level</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>f10081bcf1c5afe9273cb5ece6abc212</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>level</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>0322ce093ac03cd44ce7f2f05aa7896a</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const BrushPattern &amp;</type>
      <name>nodePattern</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>498f64d58cef127d75ae57e03d84fb63</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>BrushPattern &amp;</type>
      <name>nodePattern</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>3a6d8529ddde231fb23d28566339309b</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const EdgeStyle &amp;</type>
      <name>styleNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>cb41396946f02d67245b04314c57d166</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeStyle &amp;</type>
      <name>styleNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>d1b10750276a0f62086da1dbe7cba913</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>lineWidthNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>f0eb5d1c4c923b51ac39954c8bdd23cd</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>lineWidthNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>b79dab96574fde4d25ac2016bc0b802f</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>nodeLine</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>869ea1b9685092a185c7041ffdf27a2b</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>nodeLine</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>aef2a9c11dd871f47ee9323318cbc55f</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const DPolyline &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>e1ac359ef01ba5332c93f0862acafd76</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>DPolyline &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>3a16872170a9fc352b1c6c2eeec549b3</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>intWeight</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>babb928e5bdacadb249ab99f092bc2e1</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>intWeight</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>f426b23d1fc088a40284b5d2dca5e02b</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>doubleWeight</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>b0b39917ae8ea166b4a28bfb62d031ed</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>doubleWeight</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>e33a6d8aaf639c9bd3653d8abd54d7f2</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>edgeWidth</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ba347773734bd742d65847790403d1ff</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>edgeWidth</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>be7598db26b09c970e47a01bddb327ad</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>colorNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>b5a6b383894e6941792fa487b64b71aa</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>colorNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>6ab4174bd4228c6819363a4e7023f555</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>shapeNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>9b0d7d4a16f8408d14b55ad20fd5e910</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>shapeNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>190ad668678e486d22a7659da5e41378</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>labelNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>d9a9a804aa0ced469c43064f5b2ae83f</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>labelNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>f8f0891eabb4a46c3bbc6f6f8183665a</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>labelEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>459e8fa002a0bc4f0819e3c96dca6432</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>labelEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>c9a1bb980256eaddc7544739f64902ba</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>Graph::EdgeType</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>4ef5aa6cebcb68c00c45149081cd14f3</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>Graph::EdgeType &amp;</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>2860ad4103964ac2542fdb6d4ece6215</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>Graph::NodeType</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>236c30cd5c98c5a7e1c2c50cb3d5aed0</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>Graph::NodeType &amp;</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>b10890aa958bc451777710515919db95</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>idNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>9815d07bdb9d205408911096fd8f7283</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>idNode</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>0db6a5bca51829bf7cba0f1a30514a2d</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const EdgeArrow &amp;</type>
      <name>arrowEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>a1209cfc8407f6b6b087c4b02f9f0d46</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeArrow &amp;</type>
      <name>arrowEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>d55806678d9dd1cf3277bd6e1193861a</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const EdgeStyle &amp;</type>
      <name>styleEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>998b3ae8ce9c6c96b8a7f04899f680ed</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeStyle &amp;</type>
      <name>styleEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ab0a6b61725f31450205558a6909e9e4</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>colorEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>302adbc5bdc738c64b7237b5272a0014</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>colorEdge</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>36fd7b1b50ef6ae11b354388f959492a</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int &amp;</type>
      <name>subGraphBits</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>3b52f3b0a5e32bff2fc267b0aed34130</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>subGraphBits</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>697e55ba143cea189d7b7d4ba417d427</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inSubGraph</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>75455ee60405af16f0e694c4a3e718de</anchor>
      <arglist>(edge e, int n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubGraph</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>5aeca497fe1979e65096b471c35b5ac9</anchor>
      <arglist>(edge e, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSubGraph</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>b2afd10dd93ed3cb6e81a34e4740618b</anchor>
      <arglist>(edge e, int n)</arglist>
    </member>
    <member kind="function">
      <type>const DRect</type>
      <name>boundingBox</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>eb38693214f818560732ca1d618e3d35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAssociationClass</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>73374bee4055c0c7a6bc26d85513a5e7</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNodeCenter2Bends</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>b2d195c342b99c0a69a7a28a9f0bc008</anchor>
      <arglist>(int mode=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllBends</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>c10f9ed79e4d44892eeaac80315a4c3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hierarchyList</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>e8e40f0c9f5d1204d25d921033f36865</anchor>
      <arglist>(List&lt; List&lt; node &gt; * &gt; &amp;list) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hierarchyList</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>a8540b0749412124a8e637dcd9da072f</anchor>
      <arglist>(List&lt; List&lt; edge &gt; * &gt; &amp;list) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllWidth</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>3c244076f2824290aa16ca38fdabb8e8</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllHeight</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>a84917b2d0142503b2c23674ddba78a8</anchor>
      <arglist>(double h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readGML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>4aa6caf9ed421179ab1babf7cb8f7553</anchor>
      <arglist>(Graph &amp;G, const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readGML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>29d8b11b75283fd3071be09ea2c02955</anchor>
      <arglist>(Graph &amp;G, istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ede297982c915a7839bf188e484a16fa</anchor>
      <arglist>(const String &amp;fileName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>38181728815cd135e52156f767289f35</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readXML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>62ff381722cb0ef864da389f0bc1e3bf</anchor>
      <arglist>(Graph &amp;G, const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readXML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>5c76f64cd887081adf91ee700a8761df</anchor>
      <arglist>(Graph &amp;G, istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeXML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>07b3363b4af92a5ac202c22b347c5524</anchor>
      <arglist>(const String &amp;fileName, const char *delimiter=&quot;&quot;, const char *offset=&quot;&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeXML</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>f0350277489ce1453404b21ec7a5e92a</anchor>
      <arglist>(ostream &amp;os, const char *delimiter=&quot;&quot;, const char *offset=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readRudy</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>6e0cdfa989f99723328cebd871b71c25</anchor>
      <arglist>(Graph &amp;G, const String &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readRudy</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>2fe7bfe04917fec25add421cf7801f2c</anchor>
      <arglist>(Graph &amp;G, istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRudy</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>4c3b298ed8fee39f09ad1935ce645481</anchor>
      <arglist>(const String &amp;fileName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRudy</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>2b9e7007178df971a92c7fa536633b9c</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeUnnecessaryBendsHV</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>3155ffa41978d89397740f324f05adec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EdgeStyle</type>
      <name>intToStyle</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>26e4f793621bd32733dc122c13a09bc4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BrushPattern</type>
      <name>intToPattern</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>bb7a90b09bfb07aa3b3ab305ec8875f0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeLongString</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>925b5ee17e2096fe1fa6a1dd62ebdcba</anchor>
      <arglist>(ostream &amp;os, const String &amp;str) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>594fa7bbafde34cd6088de38bf2fef37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>6782af150157f365b358dd36647b89e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>8c8ed7bd964824157ef87931b9833137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_width</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>c2959079a5ea80f4397d913c777ed188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_height</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>70e1e69c643da9d41ce0b1a739e5c464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; String &gt;</type>
      <name>m_nodeLabel</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>8531378a3d95926e915d9067196372fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; String &gt;</type>
      <name>m_nodeColor</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>f9d14dadcb915971d0e55bed2dc62621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; String &gt;</type>
      <name>m_nodeLine</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>797ca1b6d2e40e7d3f4c8fcde0547761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_nodeShape</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ee51d7eecba25b3e0080d1851c3d7927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_nodeLineWidth</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>6b8b76b1aae62b9e43f3aad735234fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; BrushPattern &gt;</type>
      <name>m_nodePattern</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>f01df2b6ba95e5c25527667119e673a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; EdgeStyle &gt;</type>
      <name>m_nodeStyle</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>96e098111e6664b8c3d4c61fbf0b65f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; String &gt;</type>
      <name>m_nodeTemplate</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>ad9b9daa2cc24be74e8d56087242fd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_nodeId</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>7ed200ba4a5396135d1a3fcee1e2d751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_level</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>2bdea88cf8d099bc518f0a9f768a750e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; Graph::NodeType &gt;</type>
      <name>m_vType</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>2e42501dd9c2055d1b0ead831cb1b623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; DPolyline &gt;</type>
      <name>m_bends</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>1c020e09f1dc120aa1c334090251119c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; String &gt;</type>
      <name>m_edgeLabel</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>af3ced236e14399f4d2cb9a903eeea84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; EdgeArrow &gt;</type>
      <name>m_edgeArrow</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>1742a606978a2af3125c40138dd75bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; EdgeStyle &gt;</type>
      <name>m_edgeStyle</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>de9c0b53d16057ca6c57eb7aff13ab94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; String &gt;</type>
      <name>m_edgeColor</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>d5767505defea3d2e299e86f95eba38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; double &gt;</type>
      <name>m_edgeWidth</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>fd792c04a71861d25211e59b08a437ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; Graph::EdgeType &gt;</type>
      <name>m_eType</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>542d78f7912f7c3f0639d4507d12afe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_intWeight</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>7e8c4b9841a589632b414fb345d6fd5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; double &gt;</type>
      <name>m_doubleWeight</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>188fb361283c8287b5b79b8c9f21bdd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; unsigned int &gt;</type>
      <name>m_subGraph</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>8db9686415690827359f5be72e7a78ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>m_attributes</name>
      <anchorfile>classogdf_1_1_graph_attributes.html</anchorfile>
      <anchor>c2db09eddc4dfc860d05ef22206d588e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphCopySimple</name>
    <filename>classogdf_1_1_graph_copy_simple.html</filename>
    <base>ogdf::Graph</base>
    <member kind="function">
      <type></type>
      <name>GraphCopySimple</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>4e16c98d7b27d9e38ec0cf808e765c85</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphCopySimple</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>43804c093a1572c93e1f8300b0f771e9</anchor>
      <arglist>(const GraphCopySimple &amp;GC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GraphCopySimple</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>8eeb0f625864b7f7f5ac4b7658018c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>0956f60bd59738f4fd3d5dbb8544c62a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>9b339511509d2e5eebcf6acd67a53ee7</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>35e1fbe69d8a3f0cc79a71a9e5422c92</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>bd8c888af1d226e0cfc88b39362a6461</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>7fddb2ab1abe88fc5ff8f076f94789b1</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDummy</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>8a8d0ab72debf61c6aa71b062f9ec4b5</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDummy</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>79d24d9527a61b51a0db236e30009e29</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>GraphCopySimple &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>1ff12667ffe125903b7e1a219f947ae5</anchor>
      <arglist>(const GraphCopySimple &amp;GC)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>newNode</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>eaec8417518f9c0f9029e9b7c58c5c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>newNode</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>4d130fa0ea4ffea78c9275d13ca38cdd</anchor>
      <arglist>(node vOrig)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>b916216ecb1cb6c1c1ef61998fa315b0</anchor>
      <arglist>(node v, node w)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>0609b1ee09d074bace09ab34789b6fef</anchor>
      <arglist>(edge eOrig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initGC</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>55bad70902b3cd98c35765e6385d5a4e</anchor>
      <arglist>(const GraphCopySimple &amp;GC, NodeArray&lt; node &gt; &amp;vCopy, EdgeArray&lt; edge &gt; &amp;eCopy)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>e8807bb6739078e02196fc9341993ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vOrig</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>e3551ee980ecf49bee2efc98e84814bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vCopy</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>7b544014a649918a56d9e30f577e2832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eOrig</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>facc10d6f791fd15120340e87db487e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eCopy</name>
      <anchorfile>classogdf_1_1_graph_copy_simple.html</anchorfile>
      <anchor>e1608184f821d3616f4e076955f6c957</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphCopy</name>
    <filename>classogdf_1_1_graph_copy.html</filename>
    <base>ogdf::Graph</base>
    <member kind="function">
      <type></type>
      <name>GraphCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>8a5cfbb2f7ecc0a5421eb8d3061a2e07</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>2be60000604c660c3153537057e4d5f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>127eba8825080e8814707a1e3c4dd6ff</anchor>
      <arglist>(const GraphCopy &amp;GC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GraphCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>aba50956794d53fe6772483213ae8518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>4bca53306e449766356ac30078ef319a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>fd4f8e421ff83f731316c43df90e7268</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>b1aa0a6a4a7752b9ca0282a0660dfeed</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>5014bca10c4fd1fc8b76c26788fa6277</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; edge &gt; &amp;</type>
      <name>chain</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>1b2e2009cf236c040c3732f148099e0f</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>a8f04a401089c282a6297435e4cdb891</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDummy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>7713aa3d853692efb86db9b7987c46a9</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDummy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>aec1a32cfafa49580e8fd0dabdbb6678</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReversed</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>9e6aacadc76059a7413aa6adf2ac7fd9</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>newNode</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>627b8ef152ea1351a50c40413c7cf3a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>newNode</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>08c7725c8a34bcde921c1022b6d6bc6a</anchor>
      <arglist>(node vOrig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>56baca65ca3a8d46ad864023f0fbfb1a</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>72b977afb3069e006f8aa014aab846b3</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>2bf945f9bc83542b227b12e671b8a737</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsplit</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>efc5f8790608b4773618293905b418b6</anchor>
      <arglist>(edge eIn, edge eOut)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>fa878a77d5ce6b1a85a532cff6350fe1</anchor>
      <arglist>(edge eOrig)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>8f7d7afbcd788786363f196aeb05af35</anchor>
      <arglist>(edge eOrig, adjEntry adjSrc, node w)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>b6451288284594c7da976c5c9a753ba1</anchor>
      <arglist>(edge eOrig, node v, adjEntry adjTgt)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>b58bd7a7ff5119b4731545ff62e2a1f2</anchor>
      <arglist>(node v, node w)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>47b3c010377cdcb4a3f3dfc16580453b</anchor>
      <arglist>(adjEntry adjSrc, adjEntry adjTgt)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>622751f47da70ea7bafab05898932ec6</anchor>
      <arglist>(node v, adjEntry adjTgt)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>92cb67259c2ecd5234696cc7421ed496</anchor>
      <arglist>(adjEntry adjSrc, node w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>14c643866f8235b1c07adf038901a882</anchor>
      <arglist>(edge eOrig, edge eCopy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdgePath</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>1d19045f22841d5f74f44d6eb8dcd612</anchor>
      <arglist>(edge eOrig, const SList&lt; adjEntry &gt; &amp;crossedEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgePath</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>242c0de9bf656347b34c09c7b2d889a3</anchor>
      <arglist>(edge eOrig)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>insertCrossing</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>77f500abd26dfb10073a133ce942deae</anchor>
      <arglist>(edge &amp;crossingEdge, edge crossedEdge, bool topDown)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newEdge</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>c84729053e532eaf2a32c38a75e2413a</anchor>
      <arglist>(node v, adjEntry adj, edge eOrig, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOriginalEmbedding</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>18ceff0f2e7f43d1462b9169a42e58b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdgePathEmbedded</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>43dcc3f88396b6d1fe08b9930365af3e</anchor>
      <arglist>(edge eOrig, CombinatorialEmbedding &amp;E, const SList&lt; adjEntry &gt; &amp;crossedEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgePathEmbedded</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>3208a49e80f2491198bd07d907bd8ea2</anchor>
      <arglist>(CombinatorialEmbedding &amp;E, edge eOrig, FaceSetPure &amp;newFaces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>2cf2b37b7b7eb733e774b347ae43650e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createEmpty</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>d6c8b52eb5d97e6a5c80a7a2c297c0ab</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initByNodes</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>657da9a63a5ddbf57df832fd660fb6d5</anchor>
      <arglist>(const List&lt; node &gt; &amp;nodes, EdgeArray&lt; edge &gt; &amp;eCopy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initByActiveNodes</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>2a941e158562b042c70dd5d63332a1a2</anchor>
      <arglist>(const List&lt; node &gt; &amp;nodes, const NodeArray&lt; bool &gt; &amp;activeNodes, EdgeArray&lt; edge &gt; &amp;eCopy)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>34d7766d8823bd4e249d90fab6f623e0</anchor>
      <arglist>(const GraphCopy &amp;GC)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>69484a3e89679adf23c01025a3ca0d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vOrig</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>7d18dc566cd213877ea857cd3ad7c944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eOrig</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>307ccc9f509b38e62366c9a2be9149cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; ListIterator&lt; edge &gt; &gt;</type>
      <name>m_eIterator</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>4c55362c577a8dfd06f614dd7d4ab1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>083a9152d128bbcb8c645f745e68c34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; List&lt; edge &gt; &gt;</type>
      <name>m_eCopy</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>7339a65ca7765b52b363c5f010cee98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initGC</name>
      <anchorfile>classogdf_1_1_graph_copy.html</anchorfile>
      <anchor>f03bece03bd7ccf98f30f82fc5684bad</anchor>
      <arglist>(const GraphCopy &amp;GC, NodeArray&lt; node &gt; &amp;vCopy, EdgeArray&lt; edge &gt; &amp;eCopy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphCopyAttributes</name>
    <filename>classogdf_1_1_graph_copy_attributes.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphCopyAttributes</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>3765f39d8b09d6db5e4ca14411b6f2b4</anchor>
      <arglist>(const GraphCopy &amp;GC, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GraphCopyAttributes</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>65c13893bed7cdeac1afefd8db49f08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWidth</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>1229f9aa070bfaac29a6d5b58280fc11</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeight</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>1eeb629be93b984d8e819a7aa54ace7a</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>a7dcc8c59662af72bd5a06bc7c76db59</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>9e3eb3616c8ae498fcae7ef957fe32b0</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>ab5eeaa10c36c52ec5dba81b1f46c7e4</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>cdb94fb7ca12216c48fa53e56abcdc19</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>0d4ba600fe09abe32ba032bb74f33b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GraphCopy *</type>
      <name>m_pGC</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>b5f4bccbbcc24c97dac3d7dbecff3463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphAttributes *</type>
      <name>m_pAG</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>d51003d48e4d92cbfeb6e2d6738cd927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>7309e2d9fad0eb3f55c0cc319e9e34d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_graph_copy_attributes.html</anchorfile>
      <anchor>9323631242036c0b8fca097d1e407af8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphObserver</name>
    <filename>classogdf_1_1_graph_observer.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphObserver</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>ef410fd50368283758e1e24a23be6454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphObserver</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>ed141285eb4ce9ab2ea3337091bb4d91</anchor>
      <arglist>(const Graph *G)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GraphObserver</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>01ac938fb292c2fb62054590ff62da50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reregister</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>1b213b9285e1963454ac01347c3f46c0</anchor>
      <arglist>(const Graph *pG)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nodeDeleted</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>4f4294d0aab463976057d81cca6778a1</anchor>
      <arglist>(node v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nodeAdded</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>75e0b609cc199d017ef43916c37ba461</anchor>
      <arglist>(node v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>edgeDeleted</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>13b7f0af0701e5483c9fc8b5b8295e26</anchor>
      <arglist>(edge e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>edgeAdded</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>53ff76a54c135b05877ba8c9b754b799</anchor>
      <arglist>(edge e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reInit</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>6c74030ab34e797a5cbb92e493fc2353</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cleared</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>c1a3589a6431eed3a635a28d9a831a54</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const Graph *</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>a272ba1bfa3f4ca6f1568303ba38ea1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>484a7c1b9aa7e0ebb1757c79b679be50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListIterator&lt; GraphObserver * &gt;</type>
      <name>m_itGList</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>40879fd9b7e7f0b512030978510148cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Graph</name>
      <anchorfile>classogdf_1_1_graph_observer.html</anchorfile>
      <anchor>fab89afd724f1b07b1aaad6bdc61c47a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GridLayout</name>
    <filename>classogdf_1_1_grid_layout.html</filename>
    <member kind="function">
      <type></type>
      <name>GridLayout</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>27abc54c07b51f709943f1daf80495f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridLayout</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>1f1a386900b5708dba2055915b3f3e5e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridLayout</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>80f3802e9009f1cb80a0a0a4e3fb7e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>345c34108694807649509619f8da24ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>aea559fdfa84cead76f763cabac8751c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>9036262aa4edc126697cd0942adeb645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>91e9363a3e52432ed04b6525a5dd9ab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EdgeArray&lt; IPolyline &gt; &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>876ed482fd1b88093bde12f8b53d446d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EdgeArray&lt; IPolyline &gt; &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>1ef47ba8aceb3c91bf6308e05b4468cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>a998565b981e14c6df3b9b5dfaecb298</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>7ebea2f84e4915f2ab74d3be03023e2d</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>3740bb9677be8ae48e6b19352b437ff7</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>e55ec6f5b20f9c7f53b642194b066361</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const IPolyline &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>3269e6239b56f208e87b8ee413e66198</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>IPolyline &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>39c4fca379d07614958bd7c1deb117c5</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>IPolyline</type>
      <name>polyline</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>c904c553c79b10896793627376ebe2fe</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>bfe595e403dfb2b9c169711a274cd2da</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>b7d7292255ddaaf4240c64deb41d7c01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPolyline</type>
      <name>getCompactBends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>d84c4152b86dd224fb05d8bc8b5efab0</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compactAllBends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>37f1a9f31bc611c7abd2a7f4bdb1f7ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkLayout</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>7192e0e0db44f09e7d46194a1bd60a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>4eebf7db7a7f91bd64de2a96e54be7ca</anchor>
      <arglist>(int &amp;xmin, int &amp;xmax, int &amp;ymin, int &amp;ymax)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalManhattanEdgeLength</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>229fb3b53fc9606eb18784e8a9cb9eb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalEdgeLength</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>1581ee30275cee73fc4f8c3adf56b883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfBends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>83bf4237b5eb58e3ea0bb05685109ee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remap</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>8c306d34569842ba8aee6b01cfbce01f</anchor>
      <arglist>(Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>f9b5610cfa52b8f0bd055ee2a8f1e6f8</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>f92da6f174bc9f16eabc6361f2ed8d36</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>2b344fa0e661e376eabb27833f05245a</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>manhattanDistance</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>c64e69db120d698a3aac1dacbaf6f24b</anchor>
      <arglist>(const IPoint &amp;ip1, const IPoint &amp;ip2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>euclideanDistance</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>d7c04fb753b92543caf487ec5b18ed23</anchor>
      <arglist>(const IPoint &amp;ip1, const IPoint &amp;ip2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>4ab899988c0e30e3c6a6cdaff488e907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>dee2e94e1e6104a94c672f1845898123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; IPolyline &gt;</type>
      <name>m_bends</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>5369b86c06f4f33ea8e4e7021b0834e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>isRedundant</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>a1a714812d5134832173f4984c186d3f</anchor>
      <arglist>(IPoint &amp;p1, IPoint &amp;p2, IPoint &amp;p3)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>compact</name>
      <anchorfile>classogdf_1_1_grid_layout.html</anchorfile>
      <anchor>c9a20e72d11da38008c0b26203902dff</anchor>
      <arglist>(IPolyline &amp;ip)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GridLayoutMapped</name>
    <filename>classogdf_1_1_grid_layout_mapped.html</filename>
    <base>ogdf::GridLayout</base>
    <member kind="function">
      <type></type>
      <name>GridLayoutMapped</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>a248e38bd4ac70a434ee50459bf9bb6e</anchor>
      <arglist>(const PlanRep &amp;PG, const OrthoRep &amp;OR, double separation, double cOverhang, int fineness=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remap</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>f87a69746b1a14e4934d2a7b0a9b3737</anchor>
      <arglist>(Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>toGrid</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>c9deb65420bd5d54bc35d080e402dfe5</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDouble</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>e33f30263401ae5c4d6e2011065ed934</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>233f4d5c5f017264c92e88011e923fa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>1ca2a0caff8a38e416924dbc9ccb6256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>172effb184055fc749fba171a479ec4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>bc7035fb1f41a9192a779ee86ee230f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>4f966a393ebf5c5b2698c6d0f09012d0</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>dad4d34f93c85021eef4e1e21bafdb1b</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>d4acf405dc964dcee6de4f06b4f9b710</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>fe82da0249e89ec6cea3c3a991b010b0</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_gridWidth</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>a9afcaaa7499265636700b790ee988a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_gridHeight</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>0598ffcb57cf86f93ba6f7b0fbf58f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PlanRep *</type>
      <name>m_pPG</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>b782759b5bc547ce4d7c3764d6c2a0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_fMapping</name>
      <anchorfile>classogdf_1_1_grid_layout_mapped.html</anchorfile>
      <anchor>0a0048cb9e9c18aa41977cc8f5b03fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashArray</name>
    <filename>classogdf_1_1_hash_array.html</filename>
    <templarg>I</templarg>
    <templarg>E</templarg>
    <templarg>H</templarg>
    <base protection="private">ogdf::Hashing&lt; I, E, H &gt;</base>
    <member kind="typedef">
      <type>HashConstIterator&lt; I, E, H &gt;</type>
      <name>const_terator</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>bff4c88df591ed5e2d54270ddfb45d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashArray</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>f1a48d1f9918fb4d92cd031a66c90552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashArray</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>03d7ca7efdf444fdeebc0f9c784be118</anchor>
      <arglist>(const E &amp;defaultValue, const H &amp;hashFunc=H())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashArray</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>8e57d20a4fa6f3831e89869b0c63afc6</anchor>
      <arglist>(const HashArray&lt; I, E, H &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>HashConstIterator&lt; I, E, H &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>165d583c21df64fd92c7d657a129974d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>292c445daa546452b771bc58908dd4fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>804d1e2ae2f3e448beb7a3037a44961f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>a372227011b89a1e87148a21811c5d48</anchor>
      <arglist>(const I &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>562687944fd07ae566ec0d63472ad360</anchor>
      <arglist>(const I &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefined</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>7e0c96b474ebf2e920a4cfce91065148</anchor>
      <arglist>(const I &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undefine</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>db1c958e23ec264c109fac05ded788af</anchor>
      <arglist>(const I &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>HashArray&lt; I, E, H &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>359f36df55217352b1ee7688e20ab8e0</anchor>
      <arglist>(const HashArray&lt; I, E, H &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>9219728bfa2942cc008e5b2e3e200dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E</type>
      <name>m_defaultValue</name>
      <anchorfile>classogdf_1_1_hash_array.html</anchorfile>
      <anchor>3e2edfc2ec0194a7d4636d0d732a1dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashArray2D</name>
    <filename>classogdf_1_1_hash_array2_d.html</filename>
    <templarg>I1_</templarg>
    <templarg>I2_</templarg>
    <templarg>E_</templarg>
    <templarg>Hash1_</templarg>
    <templarg>Hash2_</templarg>
    <base protection="private">ogdf::Hashing</base>
    <member kind="typedef">
      <type>HashConstIterator2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt;</type>
      <name>const_terator</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>dc8bdfc7c6ee6669ba144ac1abee675d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashArray2D</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>85a85072f057b689a4cf48029c48c9fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashArray2D</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>2966c1935665bd3b28a838a02b0242db</anchor>
      <arglist>(const E_ &amp;defaultValue, const Hash1_ &amp;hashFunc1=Hash1_(), const Hash2_ &amp;hashFunc2=Hash2_())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashArray2D</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>591995a074ad875e0906c6893d7710b5</anchor>
      <arglist>(const HashArray2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>HashArray2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>3720a78b0316cc27d9a2c98c8ba64980</anchor>
      <arglist>(const HashArray2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HashArray2D</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>ea3878c9413efc6ec6f1fd7a95620ded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E_ &amp;</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>cc10e4a067cbe57bd2da6a3ae81bf9bf</anchor>
      <arglist>(const I1_ &amp;i, const I2_ &amp;j) const </arglist>
    </member>
    <member kind="function">
      <type>E_ &amp;</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>ef7a3f12507600d3f31bd9048d06b67a</anchor>
      <arglist>(const I1_ &amp;i, const I2_ &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefined</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>6e977551cc4485419ef1bcbe35269ee5</anchor>
      <arglist>(const I1_ &amp;i, const I2_ &amp;j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undefine</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>9780036b2a4744de2ad0e1a6b33e23f2</anchor>
      <arglist>(const I1_ &amp;i, const I2_ &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>HashConstIterator2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>817dc80acbc5f5fcdbbc546295233cbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>1bde661e9b7de207b8bf1e1d005760cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>f5e165abc4f7b35503bda01ccab72823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>155e70b21953287b70505de3bb5ba887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E_</type>
      <name>m_defaultValue</name>
      <anchorfile>classogdf_1_1_hash_array2_d.html</anchorfile>
      <anchor>7b22c26b427276a172325668dabece81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashElementBase</name>
    <filename>classogdf_1_1_hash_element_base.html</filename>
    <member kind="function">
      <type></type>
      <name>HashElementBase</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>e619c551321a9e0cdf760d4442d9e0b1</anchor>
      <arglist>(int hashValue)</arglist>
    </member>
    <member kind="function">
      <type>HashElementBase *</type>
      <name>next</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>90194fb74b6a40d9879cbdd54649bdb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hashValue</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>c0489fd50c91ef2fe09ade20194e9c73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>92833a7fafe68a5becd0e7eb7968ddb4</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>6c5a24135e7e8b5499078be4328af045</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>86aa82fc0180e98b48779bb725db3ad7</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HashElementBase *</type>
      <name>m_next</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>d3ee437fefedb925898e7bb63431442f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_hashValue</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>75ea32c2b1e8cdfd01ce0e932a1b6b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HashingBase</name>
      <anchorfile>classogdf_1_1_hash_element_base.html</anchorfile>
      <anchor>d053b7c83969bb7e2c02965e500555aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashingBase</name>
    <filename>classogdf_1_1_hashing_base.html</filename>
    <member kind="function">
      <type></type>
      <name>HashingBase</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>672e5a4eaa2cc3405c556cac8e63dcf3</anchor>
      <arglist>(int minTableSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashingBase</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>a47199e4973cc46f6b92c1b83c35d86c</anchor>
      <arglist>(const HashingBase &amp;H)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HashingBase</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>302f3d1980771f40b4720c6cf17a859f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>7c2a45aff1bce5a413eb6062a91c5f5c</anchor>
      <arglist>(int newTableSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>aada1f6990e780a482ec8b2dcece6fff</anchor>
      <arglist>(HashElementBase *pElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>del</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>28454ae8f2cb4c7861ab88bfea323421</anchor>
      <arglist>(HashElementBase *pElement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>77917efff9b0d0cc5a875108c1cdb912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HashingBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>b4e09b6a66be8be899b6ffd5e7183c45</anchor>
      <arglist>(const HashingBase &amp;H)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>8770c577128646d7e6eb9dbebc86ba5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>10ebdd383a954a950b29919bfda5e9e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HashElementBase *</type>
      <name>firstListElement</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>0f95ba48eb79528a37db81adc30587ec</anchor>
      <arglist>(int hashValue) const </arglist>
    </member>
    <member kind="function">
      <type>HashElementBase *</type>
      <name>firstElement</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>087d55c6ca95f1ef5ec0f622895351d9</anchor>
      <arglist>(HashElementBase ***pList) const </arglist>
    </member>
    <member kind="function">
      <type>HashElementBase *</type>
      <name>nextElement</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>9f786262238d85456708e96c2d874660</anchor>
      <arglist>(HashElementBase ***pList, HashElementBase *pElement) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroyAll</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>e0b16ad1c97cbc7844133156ece96d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>818b19d34988fb40833724d26567c2c3</anchor>
      <arglist>(HashElementBase *pElement)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual HashElementBase *</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>00833fcab7a85995963bb897b33686b8</anchor>
      <arglist>(HashElementBase *pElement) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_tableSize</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>9443a6c7b3ad48e99523b2dd27ca9673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_hashMask</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>ac4b5a95a3c81fb91bb357003a23f352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_minTableSize</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>7ff819d3a399442a5537bbc98456ca07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_tableSizeLow</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>9c638d77097398047f8c337d379c6b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_tableSizeHigh</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>5eb5574ac3c85741674a1f96e1ff91ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_count</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>68c7b9d6f1d513410151b43d785a85f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HashElementBase **</type>
      <name>m_table</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>2251a04f6163f7166329efd6fc60c2e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>1a87954f67d253cd55e27995fc08a976</anchor>
      <arglist>(int tableSize)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copyAll</name>
      <anchorfile>classogdf_1_1_hashing_base.html</anchorfile>
      <anchor>c3505d6b1d07df1039406f8131779a1a</anchor>
      <arglist>(const HashingBase &amp;H)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashElement</name>
    <filename>classogdf_1_1_hash_element.html</filename>
    <templarg>K</templarg>
    <templarg>I</templarg>
    <base>ogdf::HashElementBase</base>
    <member kind="function">
      <type></type>
      <name>HashElement</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>5be4ebc710599427dcd4e6d4232a96f4</anchor>
      <arglist>(int hashValue, const K &amp;key, const I &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>next</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>b884908e3492fe6661a925839cd9e25b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>key</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>07be95d52f7137ec4f8cf0660a7b379b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const I &amp;</type>
      <name>info</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>077323fb5115eb6a8b7c25a60a6af769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>I &amp;</type>
      <name>info</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>11bf59178d498872e871021207576377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>26748d961ae78f130540aa30aa1512c3</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>ca25451d6cd9faf741f7d39b109e5707</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>a966655854d7147b42af12827f029735</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>K</type>
      <name>m_key</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>6866d4f80f6929181b40bf90b8338585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I</type>
      <name>m_info</name>
      <anchorfile>classogdf_1_1_hash_element.html</anchorfile>
      <anchor>fc16aed4e5391ab2a45ef219d24a2423</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DefHashFunc</name>
    <filename>classogdf_1_1_def_hash_func.html</filename>
    <templarg>K</templarg>
    <member kind="function">
      <type>int</type>
      <name>hash</name>
      <anchorfile>classogdf_1_1_def_hash_func.html</anchorfile>
      <anchor>c2d20affef079301de68748e4835f426</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DefHashFunc&lt; void * &gt;</name>
    <filename>classogdf_1_1_def_hash_func_3_01void_01_5_01_4.html</filename>
    <member kind="function">
      <type>int</type>
      <name>hash</name>
      <anchorfile>classogdf_1_1_def_hash_func_3_01void_01_5_01_4.html</anchorfile>
      <anchor>52a6a6f957444512a7e449bc6609fe33</anchor>
      <arglist>(const void *&amp;key) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DefHashFunc&lt; double &gt;</name>
    <filename>classogdf_1_1_def_hash_func_3_01double_01_4.html</filename>
    <member kind="function">
      <type>int</type>
      <name>hash</name>
      <anchorfile>classogdf_1_1_def_hash_func_3_01double_01_4.html</anchorfile>
      <anchor>bf90defe8da9c87582e0bc8719d2b04c</anchor>
      <arglist>(const double &amp;key) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Hashing</name>
    <filename>classogdf_1_1_hashing.html</filename>
    <templarg>K</templarg>
    <templarg>I</templarg>
    <templarg>H</templarg>
    <base protection="private">ogdf::HashingBase</base>
    <member kind="typedef">
      <type>HashConstIterator&lt; K, I, H &gt;</type>
      <name>const_terator</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>54485700fcc2821425c07da44c9879ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hashing</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>17af181249918e6aa595d81432681ff0</anchor>
      <arglist>(int minTableSize=256, const H &amp;hashFunc=H())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hashing</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>61980aa5270c6b6fea760d6790507d5d</anchor>
      <arglist>(const Hashing&lt; K, I &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Hashing</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>2a6e256d928f28a7154f82ea6d5e5cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>74e130077e913644d5acb6a17f115e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>6771da1f203a66683d722622c3efd108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>member</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>e2a5b14718b14a251a2048755d587907</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>HashConstIterator&lt; K, I, H &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>86d41105cd81804024e7b60c48a4fb7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>lookup</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>52cc0343e4614610bb0513ee83392ad5</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Hashing&lt; K, I &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>780e44ce05afd2f3fb480ee46010c46a</anchor>
      <arglist>(const Hashing&lt; K, I &gt; &amp;hashing)</arglist>
    </member>
    <member kind="function">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>a2536c1fd70a64bd606228630fbaf7a2</anchor>
      <arglist>(const K &amp;key, const I &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>insertByNeed</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>17143cd6df49b678dc6c0266ec7a9eb6</anchor>
      <arglist>(const K &amp;key, const I &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>fastInsert</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>b313090013ebf18521a85dacd6383ec0</anchor>
      <arglist>(const K &amp;key, const I &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>del</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>0d5fcffd81efd0d3e3dc6c54cd3ae516</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>568a52af2aecad7ee6549e90b821dd64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>firstElement</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>6edacc281d12f0dbd5679aa44b629d0d</anchor>
      <arglist>(HashElement&lt; K, I &gt; ***pList) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>nextElement</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>93770aa6f891cb7b09b270ab505d976d</anchor>
      <arglist>(HashElement&lt; K, I &gt; ***pList, HashElement&lt; K, I &gt; *pElement) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>6e7e8f583398b242cca19cec6c60e742</anchor>
      <arglist>(HashElementBase *pElement)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual HashElementBase *</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>bedab2955e65a331256e1d7f6b297279</anchor>
      <arglist>(HashElementBase *pElement) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>H</type>
      <name>m_hashFunc</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>7c3a89e380908642d07293f974562d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>HashConstIterator&lt; K, I, H &gt;</name>
      <anchorfile>classogdf_1_1_hashing.html</anchorfile>
      <anchor>6e03733950f164b154b68e0c3fdf3af2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashConstIterator</name>
    <filename>classogdf_1_1_hash_const_iterator.html</filename>
    <templarg>K</templarg>
    <templarg>I</templarg>
    <templarg>H</templarg>
    <member kind="function">
      <type></type>
      <name>HashConstIterator</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>2754e5417b6a1aad9137974ca0ae8ddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashConstIterator</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>de8b1f58b58f82bb76a68ec9acefb39e</anchor>
      <arglist>(HashElement&lt; K, I &gt; *pElement, HashElement&lt; K, I &gt; **pList, const Hashing&lt; K, I, H &gt; *pHashing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashConstIterator</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>0ab1992d24a893f9cc15110f859d62a4</anchor>
      <arglist>(const HashConstIterator&lt; K, I, H &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>HashConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>edfd5d9de0da869a96c4f70a9845adb2</anchor>
      <arglist>(const HashConstIterator&lt; K, I, H &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>a74fc4e572eb49df56f498b6201fa1aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>key</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>c22d2ee0236c4c309b897335955fe21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const I &amp;</type>
      <name>info</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>5d0f6ce421f807b99427b70d150ed3d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HashConstIterator&lt; K, I, H &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>962b9bdc123c6d086f314777e65e476c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HashElement&lt; K, I &gt; *</type>
      <name>m_pElement</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>50c60d938f5fc6fe5e3e00943a0eb0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HashElement&lt; K, I &gt; **</type>
      <name>m_pList</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>d812f230e097fabbc9ffc394125c522c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Hashing&lt; K, I, H &gt; *</type>
      <name>m_pHashing</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>c184b621623989e65efe2adaf1738c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>42512ceea8be6f60d1399997e9eb17cd</anchor>
      <arglist>(const HashConstIterator&lt; K, I, H &gt; &amp;it1, const HashConstIterator&lt; K, I, H &gt; &amp;it2)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_hash_const_iterator.html</anchorfile>
      <anchor>d013a65b746c982d0ea538696eb3981f</anchor>
      <arglist>(const HashConstIterator&lt; K, I, H &gt; &amp;it1, const HashConstIterator&lt; K, I, H &gt; &amp;it2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashConstIterator2D</name>
    <filename>classogdf_1_1_hash_const_iterator2_d.html</filename>
    <templarg>I1_</templarg>
    <templarg>I2_</templarg>
    <templarg>E_</templarg>
    <templarg>Hash1_</templarg>
    <templarg>Hash2_</templarg>
    <base protection="private">ogdf::HashConstIterator</base>
    <member kind="function">
      <type></type>
      <name>HashConstIterator2D</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>6d7ef40069ccae3875cc211901679842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashConstIterator2D</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>b27ecbd9eb536ce79cb44c076cb81178</anchor>
      <arglist>(const HashConstIterator2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashConstIterator2D</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>77257f0a2529d9b276fc8d51b4d9731f</anchor>
      <arglist>(const HashConstIterator&lt; Tuple2&lt; I1_, I2_ &gt;, E_, HashFuncTuple&lt; I1_, I2_, Hash1_, Hash2_ &gt; &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>HashConstIterator2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>9d37b36d98668a66c7b1ce73dd4454e6</anchor>
      <arglist>(const HashConstIterator2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>3daa101857d8dbd8061ed247ed30b794</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const I1_ &amp;</type>
      <name>key1</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>180f08257541a69c945240b46db2bc62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const I2_ &amp;</type>
      <name>key2</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>8ceb4c4de67abcd8e19c950045663551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E_ &amp;</type>
      <name>info</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>10a8444e497b40e2957bb53f894c4ab1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HashConstIterator2D&lt; I1_, I2_, E_, Hash1_, Hash2_ &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_hash_const_iterator2_d.html</anchorfile>
      <anchor>76db6dff3680b7483d52b038a8964242</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HeapBase</name>
    <filename>classogdf_1_1_heap_base.html</filename>
    <templarg>Priority</templarg>
    <templarg>HeapObject</templarg>
    <member kind="function">
      <type></type>
      <name>HeapBase</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>5d3cb44abb573c7332ed985374cfc025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HeapBase</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>5ea5a099ec2ca26e35fa1af150b07969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeHeap</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>e0b07d93292366ee84530e52a7cd11f1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>HeapObject</type>
      <name>minRet</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>088ae7d3f051f431d59adc04b33a96de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>248b5b72d0084eb6e70103054d0e57ba</anchor>
      <arglist>(HeapObject, Priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decreaseKey</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>4fdf264a1065a55f12bc84f63a3d6515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>b1c83f5e720394923f7591370a32d431</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>4f8a92fb174c4082bbdbeb10afbb7116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>classogdf_1_1_heap_base.html</anchorfile>
      <anchor>3ac0740138e9ad3b3fce4c22649c3ede</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::IncNodeInserter</name>
    <filename>classogdf_1_1_inc_node_inserter.html</filename>
    <member kind="function">
      <type></type>
      <name>IncNodeInserter</name>
      <anchorfile>classogdf_1_1_inc_node_inserter.html</anchorfile>
      <anchor>8100285211514d6525eb3ffed661dd8b</anchor>
      <arglist>(PlanRepInc &amp;PG)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertCopyNode</name>
      <anchorfile>classogdf_1_1_inc_node_inserter.html</anchorfile>
      <anchor>51b28fef475c16882ad1ffaa018aa955</anchor>
      <arglist>(node v, CombinatorialEmbedding &amp;E, Graph::NodeType vTyp)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual face</type>
      <name>getInsertionFace</name>
      <anchorfile>classogdf_1_1_inc_node_inserter.html</anchorfile>
      <anchor>8326840b5a0a67a50bef393e2ffd2773</anchor>
      <arglist>(node v, CombinatorialEmbedding &amp;E)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlanRepInc *</type>
      <name>m_planRep</name>
      <anchorfile>classogdf_1_1_inc_node_inserter.html</anchorfile>
      <anchor>e1240598533117bb389a81019e524657</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Layout</name>
    <filename>classogdf_1_1_layout.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>49e7da7e5afd4224f95557a92a1ee8d8</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>adf5fa9d9db4107de09019be38071f1c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>39d9113b7051303f56330821cc2a05a7</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Layout</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>6a4a9f0e8e691a166b24495cdd2b8826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Layout</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>9aecf6efa9959f06d5e16ef02d2d7cb1</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Layout</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>77828a2241e9f12a39431c1fd5114019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>861adebb9dd6079b239b6b28f7697d95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; double &gt; &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>f4e10edcd9b42ad77ae924bb9f744397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>806c69ff105ab680088316c0b77d9d68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; double &gt; &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>50f6ff2372ebf7add92c43e130f9632b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>fecef8380f8d42e9c1a130fec149d9f0</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>b45565e5e6932bcd8c116d69dfbd8732</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>c8bac549127a22f00fe6fec7f93f3fe3</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>3b4e3806de9736065817725cc3dd168e</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const DPolyline &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>c00ba7603f7ba3d27f5744eee41ca105</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>DPolyline &amp;</type>
      <name>bends</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>93a024b3e89787eb62be54e578a94f7f</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePolyline</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>5e416ae67ade884c6774ec9c8a743216</anchor>
      <arglist>(GraphCopy &amp;GC, edge eOrig, DPolyline &amp;dpl) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePolylineClear</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>5374e9ac9db19a07be54e64d14035c14</anchor>
      <arglist>(PlanRep &amp;PG, edge eOrig, DPolyline &amp;dpl)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>8e588825b7199040d54c2e8cc6cd17bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>6b09518468eda6617fd6329e13a97ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; DPolyline &gt;</type>
      <name>m_bends</name>
      <anchorfile>classogdf_1_1_layout.html</anchorfile>
      <anchor>374a690f3a6a066741d2a6a176a7e10d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ListElement</name>
    <filename>classogdf_1_1_list_element.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>a7893fbadd1391dd58b92e41fcc6ab9e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>68538ee42ee15962e48055a715180d35</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>46cd361ea17523804bf46dd6d3430e6d</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ListElement</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>03a13456d864d3b2aa32f367ded208c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ListElement</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>1270d2f13e3812c80c088711f10fcefd</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ListElement</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>935336bbf19445ed58a78866c33bb56e</anchor>
      <arglist>(const E &amp;x, ListElement&lt; E &gt; *next, ListElement&lt; E &gt; *prev)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListElement&lt; E &gt; *</type>
      <name>m_next</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>9a3e6e1d8911cd9cf28b23a153863452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListElement&lt; E &gt; *</type>
      <name>m_prev</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>9d8512c265b38150c2d616d86fb6679d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>7a2cc446a80623789a2309382b745c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListPure&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>b725b0c230c786388dbc5e3c305d96e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>List&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>9789918f98f4a0dd437d6f93285d083c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListIterator&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>47baa7e2d67d368c6f230ea9b7b8d63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListConstIterator&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_list_element.html</anchorfile>
      <anchor>0fc1630c5a694a22a4422f629dab4c03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ListIterator</name>
    <filename>classogdf_1_1_list_iterator.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>6e03c8b73f099e6a22629aadb7b5e6c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>b4d544c945dad82bc021d4acbee7c207</anchor>
      <arglist>(ListElement&lt; E &gt; *pX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>55674330a7fd29e7ecf3db6bd0dc022f</anchor>
      <arglist>(const ListIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>c089e1786f241bfac203a1b09086dd94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>e4f583da3af4f7ee3a653eefd9a4a0c0</anchor>
      <arglist>(const ListIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>978279da525fde12ed2532977617d984</anchor>
      <arglist>(const ListIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>92f63b4730d990946328943227e1c11c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>pred</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>42bf7bfaa52bf19534bcbd9fa9322fd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator *</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>75d1a5fad7a55c58806124f63d1f7139</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>a2d3c4fa0073b93ba004b3085d560913</anchor>
      <arglist>(const ListIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>cdea7ffa4752d271082cf1577576dcda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>7c3ddfb9c5e7cf373531d9b67b7db29d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>846085331e72a261ccf37b7bdb28137c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>operator--</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>31f4047f0a672524e9bfc8924da1dd1b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>b20c9a81b0a4fc15031ca8f224344faf</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>95d929c2c857d8b0f0d51a9e32182a8e</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>b5923b472b37f4a26164d24fe04694b5</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>o</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>0cfa321b135cd65bb3ce806c8367e677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>o</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>e7e6abdeb5f77586e2453389c7649b68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListElement&lt; E &gt; *</type>
      <name>m_pX</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>5d92860576168c613a9d4a3fd6665b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListConstIterator&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>0fc1630c5a694a22a4422f629dab4c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListPure&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_list_iterator.html</anchorfile>
      <anchor>b725b0c230c786388dbc5e3c305d96e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ListConstIterator</name>
    <filename>classogdf_1_1_list_const_iterator.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>ListConstIterator</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>d6866350b943c2bfa11f44852f5da6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListConstIterator</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>a4c6c7cc0c65c7020fd392570cc82ee5</anchor>
      <arglist>(const ListElement&lt; E &gt; *pX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListConstIterator</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>f29428a92b03b26be4b32e62fe2c59a5</anchor>
      <arglist>(const ListIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListConstIterator</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>de3f053786e53167753c31e7c8cab397</anchor>
      <arglist>(const ListConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>9b0ea93f770583e0ed6fcb9771aaf2fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>c9df1911feea37a1237dc8b3ef342ce8</anchor>
      <arglist>(const ListConstIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>e8b8aeb9b648522e7113c345c613dd11</anchor>
      <arglist>(const ListConstIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>9f73d9a451b63600e1ade2bbf39c57b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>pred</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>d9215884ead3d7360d4bd91b68079fd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator *</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>99f8f6abd3f1bbf88cdcb651cb1ad441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>5f9184ffa692c39dcc98f1046e0588c1</anchor>
      <arglist>(const ListConstIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>303f20c5b5dd70563a9dc85d847a8b63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>81fc335c089411ee36a3a8330531afca</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>618876661f35f20187ba993d0b7be2eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>operator--</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>ef3401985e639138befbe3afc7ded51a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>4297c7350d4a04d17c482ec22e2b8648</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>de230b5affdb41844cdc1c5436c14540</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>c664b7e11cf7aef598962fcbdd0c673d</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>o</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>cdf34a7a80cec75c975f2f72b335265a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ListElement&lt; E &gt; *</type>
      <name>m_pX</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>22ccb6536429ed83afd073ded2b79861</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListPure&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_list_const_iterator.html</anchorfile>
      <anchor>b725b0c230c786388dbc5e3c305d96e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ListPure</name>
    <filename>classogdf_1_1_list_pure.html</filename>
    <templarg>E</templarg>
    <member kind="typedef">
      <type>E</type>
      <name>value_type</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>74f52f2dfa851be88b19e0b67e93ce07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListElement&lt; E &gt;</type>
      <name>element_type</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>0051e3682df6dc6f52be42ce7699f4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>0e39860023fc62feb09a7e6f6a0dd331</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListIterator&lt; E &gt;</type>
      <name>iterator</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>af260d0c818ad18d76352a8f56f15e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPure</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>86c79aa848bd776c8147f3ee6c501441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPure</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>2893baf4bcbc8ba4f0b2eafb6279335d</anchor>
      <arglist>(const ListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListPure</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>70b8cd750d898737632f5b1ce5b67c59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>1e59094187ad4571cadd85dd92a37b43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>27e3b67fa550f1b78b4d243cc2725e97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ListConstIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>282e17c0f85aa7049f0dea77d032e344</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>7ba7ecc8de7de06e4811cbdea13a4b75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>f099addff39747e8a2901089311856e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>1f564824882891ab400a138e18dbdd86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListConstIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>fb4d1facf48f7d03f93c428cdb3e7bd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>e8acf92b78a88cc8fbd57dcf4adc10d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>rend</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>63ddeb47d74feb21f7809e550828601f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>rend</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>156a0e836bbd51256f8b51b7968a4243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>7c4a526b324f62c7420f7f04339c0f6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>921611c094fb3b86751b340d102808ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>4124b35869977240ecc9726e86fd832f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>c4bd2cd73886a56879fd6c6936a66140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>c64ba4018ff2fb23bfa973cd3f5b9df0</anchor>
      <arglist>(ListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>729a99d0327198fb96f3437e746b8a64</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>cyclicPred</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>6223f3912693d53c038b15f8092b1921</anchor>
      <arglist>(ListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>cyclicPred</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>0db6be8a73c3d1a12b3924d3448cdd7d</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>afa5de674811860a58ba25877b2321f2</anchor>
      <arglist>(int pos) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>728a693a1f849bc5bae70206e9f5fc25</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>f5dba2562cc47c4099eea3b4d3ddc337</anchor>
      <arglist>(ListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>ListPure&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>9cb454e98ac0d918dc5336ee67c3c05d</anchor>
      <arglist>(const ListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>pushFront</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>903da0a8029a24f09c727436ea05aba7</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>pushBack</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>7622c2facac3afac5bcab6e1ea45e9ae</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>b8fa1dda01861cc4087243e776779b33</anchor>
      <arglist>(const E &amp;x, ListIterator&lt; E &gt; it, Direction dir=after)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>insertBefore</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>f92eff99eb976129703af50a02add800</anchor>
      <arglist>(const E &amp;x, ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>insertAfter</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>c7cb331cbcce2da0c021c4be74c32e9c</anchor>
      <arglist>(const E &amp;x, ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>fdf1936c8916de211eac1e9e2ea5e301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>popFrontRet</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>563595216f40654630559b2a1fc631eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popBack</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>81e003c4bb29b531ae7db7c1a93215b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>popBackRet</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>d26e6e6996cbe0294dfd0ae0c7bbe678</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>del</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>34059e2d477e29a2e5cc506752fd4a6b</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchange</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>b226bb8e0889b2746723248643b1d50f</anchor>
      <arglist>(ListIterator&lt; E &gt; it1, ListIterator&lt; E &gt; it2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFront</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>eed0012f68903c6baba460454dab6979</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToBack</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>a819548407f460c21c5e99d1266a057f</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToSucc</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>d4f1983928356dd5be2d236e01cdfa4b</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToPrec</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>91bf181cc141ce0459c1f169d1a22f43</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListIterator&lt; E &gt; itAfter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFront</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>8bcce1775fca0037a2fd8ffaec6f580f</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToBack</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>662c529f303f2cbaa4eaf97cedaca11d</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToSucc</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>ea1d9274ff9901db528679c157b37865</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListPure&lt; E &gt; &amp;L2, ListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToPrec</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>c7534efa758e6a2371bb39cf82c64258</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListPure&lt; E &gt; &amp;L2, ListIterator&lt; E &gt; itAfter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conc</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>a318d5a48571a2b08f7195ff763febb9</anchor>
      <arglist>(ListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concFront</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>18215d8710c1692d6818ef8b3dd309d2</anchor>
      <arglist>(ListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchange</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>1b889ddacea80283b34463a1f3eb609d</anchor>
      <arglist>(ListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>a359d5d2fc8a548ee7c7688605e4bd8b</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListPure&lt; E &gt; &amp;L1, ListPure&lt; E &gt; &amp;L2, Direction dir=before)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitAfter</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>dfd47ab0a9b12b57291f6fd5d5a90cad</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitBefore</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>457b5e8ae9edda7dafcee90058a04802</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>1838c94b95007881bccef1e091681840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>64e8e9f288eb965cdbfd7a3517c6cff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>e3552258a63d0108a4fe83311d394894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>af28fe8fccfe0b1cd9b3a738d0e12801</anchor>
      <arglist>(Comparer&lt; E &gt; &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCT</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>e69f9877e8bcdd6ba75b746dbd386ceb</anchor>
      <arglist>(C &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>b7b94f90f8525d31af8f36499b9c944c</anchor>
      <arglist>(int l, int h, BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>4559ea142811b2fb244fde238b95b3ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>fe972314583fa0fd9ba73d12959681b0</anchor>
      <arglist>(const E &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>bf9024308be699ab756bccb0715b5a3a</anchor>
      <arglist>(const E &amp;e, Comparer&lt; E &gt; &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>a30060fe025ea693c81979c6113d9746</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>b2233e9370b975b77f69ebfe9167af3b</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>37f377c14e6ecf33f910ce161188ac8d</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>4b7acf8cacc2b986ee3ecbcaeda82882</anchor>
      <arglist>(const ListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>c7ad05e9e0ce48d9dc0a74c1dd31a4a7</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListElement&lt; E &gt; *</type>
      <name>m_head</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>e46e35635879a8398e8b1309705d07e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListElement&lt; E &gt; *</type>
      <name>m_tail</name>
      <anchorfile>classogdf_1_1_list_pure.html</anchorfile>
      <anchor>8ee93466661119a9f18aa54f5fc47ffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::List</name>
    <filename>classogdf_1_1_list.html</filename>
    <templarg>E</templarg>
    <base protection="private">ogdf::ListPure</base>
    <member kind="typedef">
      <type>E</type>
      <name>value_type</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>84f3c762882df596aa767ead59e53a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListElement&lt; E &gt;</type>
      <name>element_type</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>379e7fba35c7264f8ed87a97db7ee9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>b33d25793e30fe563a1fab41e303b27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ListIterator&lt; E &gt;</type>
      <name>iterator</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>b6a4d4560fd6010e7c4db187239c5ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>4462d9c54ea98a1836e4a584090d4557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>27bb42ab42b4d3b397bd9ee69029c1aa</anchor>
      <arglist>(const List&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~List</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>2a62450276a60d5c8398e523cfc525ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>cb43a66b1a0eac39164dea99414e82da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>e2d2d82dd11d58db3163b84de9fec583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ListConstIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>e805def5428054f38225f2073656694b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>837944406b60dd76a7bf9b58180c91d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>ec4edb8586dc0b2c90f2df27c97b351d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>9354d07552c897b657138446323255e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListConstIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>7da1fe1423b66a54923f2d93833e3bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>d0dbbfa0efea8e97b9bda9f9944289fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>rend</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>e6d4cbb5f5168d821d5a81ce1a7746c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>rend</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>8f3e5447d322319de92509932872cbf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>768675bdb712d38321780b24c2c3849f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>26a10cabeba5320d7d68cf15d6c760f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>5a71210d07eb7ef19ba2646692118e2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>3639f4fff28d7fc4dfaeca32f6781485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>89b022a950ed8b4b8a25e7a5e19801f5</anchor>
      <arglist>(ListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>237464a4253b9b345e6347cb23b420be</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>cyclicPred</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>99d3a3204e510ac5ac6c172a5e869339</anchor>
      <arglist>(ListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>cyclicPred</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>612298db101abdfbcf04033e63230ba5</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>c7c8942caa9a0ffadb5669398769bf2b</anchor>
      <arglist>(int pos) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>e29dc251046ee8a1e322b355fe06efcd</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>51c5da95e57152c0249178c3b0a89c3e</anchor>
      <arglist>(ListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>269ea62cb38d722bf4fb8dc245abe820</anchor>
      <arglist>(const List&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>pushFront</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>78895dca4d87eb4bef61b8767daab359</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>pushBack</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>0c0fc89cb36d2db3e43580e752bf1674</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>2aa2947d4ec53df9a763b81fe6710900</anchor>
      <arglist>(const E &amp;x, ListIterator&lt; E &gt; it, Direction dir=after)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>insertBefore</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>547393ecf1d9a3333ea4916db91ceaec</anchor>
      <arglist>(const E &amp;x, ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; E &gt;</type>
      <name>insertAfter</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>25a62fde646a185540c3624cf605cda7</anchor>
      <arglist>(const E &amp;x, ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>1c7a45995da15a3d912ae38d19d3f817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>popFrontRet</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>f47c6b7b187c4224b2c3fdf335f1cb64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popBack</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>f23625f70eff0ed1a3b59da2dd6d6fac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>popBackRet</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>bce2dbd35dbab3e144ebafcd30d9677e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchange</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>6b5d827c18b92a8a4016d87a76ee5e32</anchor>
      <arglist>(ListIterator&lt; E &gt; it1, ListIterator&lt; E &gt; it2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFront</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>f4408d98c8afc61ba296100d3a53599a</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToBack</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>4a9cfc0521ebd2a41f3918fc2f839f83</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToSucc</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>1d6827d4311ec6f1f32e2a4d07cf1a78</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToPrec</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>c24f60e8e1b1072bad095c710b7e06e3</anchor>
      <arglist>(ListIterator&lt; E &gt; it, ListIterator&lt; E &gt; itAfter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFront</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>2583598b7995a75e15bd27cb27da5deb</anchor>
      <arglist>(ListIterator&lt; E &gt; it, List&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToBack</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>07f41267c0208748f2dfe0f8af7213d5</anchor>
      <arglist>(ListIterator&lt; E &gt; it, List&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToSucc</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>69492534333446fa7adf576bebdbae57</anchor>
      <arglist>(ListIterator&lt; E &gt; it, List&lt; E &gt; &amp;L2, ListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToPrec</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>e47abe73b280db087d455fb92e0974db</anchor>
      <arglist>(ListIterator&lt; E &gt; it, List&lt; E &gt; &amp;L2, ListIterator&lt; E &gt; itAfter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>del</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>5f9fb0779c15aa5e0611c3a85c02f25a</anchor>
      <arglist>(ListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conc</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>f863a8df8e039d29a3fbd05c4e29bb7d</anchor>
      <arglist>(List&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concFront</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>f5125a4a2d2fe0106a37bf1440ab8374</anchor>
      <arglist>(List&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchange</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>20c5ad73654fdf204c803d5345e4c6a6</anchor>
      <arglist>(List&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>7bbdcc91f46c163d48e435929a72a5cf</anchor>
      <arglist>(ListIterator&lt; E &gt; it, List&lt; E &gt; &amp;L1, List&lt; E &gt; &amp;L2, Direction dir=before)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>383a1dc9acd484027132cd34af399b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>4676fb81e4c30313b061b72620adf14e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListPure&lt; E &gt; &amp;</type>
      <name>getListPure</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>50bccad98a2af9ee4ea33c8116b937c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>42b914a618780ab67c6fdd4877d74096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>e9be720d719699a1c5a4502b249eb166</anchor>
      <arglist>(Comparer&lt; E &gt; &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCT</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>e0b84dd0f326052464e29f1adc839c1e</anchor>
      <arglist>(C &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>f226ff6e7aca8d08708edcf3107650de</anchor>
      <arglist>(int l, int h, BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>0353ba8e41750ad9e21978a964af3f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>d768b016d52ac811844f3980f138032d</anchor>
      <arglist>(const E &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>61932c931eb1a3aaf235c9a8f11748a7</anchor>
      <arglist>(const E &amp;e, Comparer&lt; E &gt; &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>92f7c48f39955667d01ebac2e3243cae</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>abcc576add0dc0a777e5d3b3514073c4</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>60a30fa5962651461191579ec4b1d015</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_count</name>
      <anchorfile>classogdf_1_1_list.html</anchorfile>
      <anchor>bcc5a839d7de6420ab32c3e279c18191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Logger</name>
    <filename>classogdf_1_1_logger.html</filename>
    <member kind="enumeration">
      <name>Level</name>
      <anchor>a6ec46453653c0683914adccceda1e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LL_MINOR</name>
      <anchor>a6ec46453653c0683914adccceda1e040165ba90ad32a5e12d51096a9cd5a606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LL_MEDIUM</name>
      <anchor>a6ec46453653c0683914adccceda1e040bb5f693848c50009b7f1f44d7fe66b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LL_DEFAULT</name>
      <anchor>a6ec46453653c0683914adccceda1e04236b4b8f70d5035db5eeee9a9f0b6bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LL_HIGH</name>
      <anchor>a6ec46453653c0683914adccceda1e0419469ca0b860ffd90ee55c63636e228e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LL_ALARM</name>
      <anchor>a6ec46453653c0683914adccceda1e0432d129a0765766a9642581cbf9f289e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LL_FORCE</name>
      <anchor>a6ec46453653c0683914adccceda1e044c5cd5b8fca0e7fae64cf8678a56c437</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LogMode</name>
      <anchor>aebe8815f699342714fcde7dedeaad09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_GLOBAL</name>
      <anchor>aebe8815f699342714fcde7dedeaad0916c4cf21b79c60d4f7d47dd940693ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_GLOBALLOG</name>
      <anchor>aebe8815f699342714fcde7dedeaad097f3af105fb124e18e0ed206f10c46d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_LOG</name>
      <anchor>aebe8815f699342714fcde7dedeaad098e99eb53dc2d221a837de198ec7f9e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LM_STATISTIC</name>
      <anchor>aebe8815f699342714fcde7dedeaad0963aee7d428382068bca28ad7b7931555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>b9fcf1d4497f447cce271751fb7b1cb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>8d4ff16b9793247f4fb4ac86b69d1957</anchor>
      <arglist>(LogMode m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>f7b8d575883ccd56c0c2674fc1d8ed4b</anchor>
      <arglist>(Level l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>ebdb7ea3fcab04ea7025dcf1efc02090</anchor>
      <arglist>(LogMode m, Level l)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>lout</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>8af41c7f976c1a87db8b9fa12d762834</anchor>
      <arglist>(Level l=LL_DEFAULT) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>sout</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>cea7968e7d88e22c04f4165cbd20bba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>fout</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>d57488dd5a83a6837dd4475d0e2a6ce8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>localLogLevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>e0ee3481396b3987ed353dc1050b2d9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>localLogLevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>98af6f032aeff3e1307cd50c71375ac4</anchor>
      <arglist>(Level l)</arglist>
    </member>
    <member kind="function">
      <type>LogMode</type>
      <name>localLogMode</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>133f9d8d6cc64740ba92292b8bb22964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>localLogMode</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>467f33d2c50644c10f6408c0714cf28c</anchor>
      <arglist>(LogMode m)</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>effectiveLogLevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>b153d1367ecc13ce77374f4feece9520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>effectiveStatisticMode</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>7f4611c4f1d7714dc6ba991eb96b137f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>slout</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>59d20f465667fa3231996b4b62d6e242</anchor>
      <arglist>(Level l=LL_DEFAULT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>ssout</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>778b45fe2103b2ed25ae345f92218d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>sfout</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>f91d34f16b89cca593e66cf30f72b92e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Level</type>
      <name>globalLogLevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>942e01e3d9868f80805553eac484a328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>globalLogLevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>7e162a14458d618f7efc8fa961793f89</anchor>
      <arglist>(Level l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Level</type>
      <name>globalMinimumLogLevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>cfaca1219aa9c6d3721b08bf0da7a362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>globalMinimumLogLevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>ec3503a5e48793620f98bad00ada74fd</anchor>
      <arglist>(Level l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>globalStatisticMode</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>94bce2bf3544180bfb53037c0a8851de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>globalStatisticMode</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>f8fa968f70b434111d859d51e2b4accb</anchor>
      <arglist>(bool s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setWorldStream</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>d7399861ae0df34259a02b64f3ce116b</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Level</type>
      <name>m_loglevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>7b5b9169368bca997f7ea1c60c049393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LogMode</type>
      <name>m_logmode</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>5ce3442467ce27ad254d74fe6b3cf0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::ostream</type>
      <name>nirvana</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>6fbd58a080b3d274074740b3ecd6c5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::ostream *</type>
      <name>world</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>03e73f911afe112f4132a09c2bec05b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static Level</type>
      <name>m_globalloglevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>a3fc6244a13905734a51c892f48ad0d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static Level</type>
      <name>m_minimumloglevel</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>c8381e151daeb64801d397dc17322d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static bool</type>
      <name>m_globalstatisticmode</name>
      <anchorfile>classogdf_1_1_logger.html</anchorfile>
      <anchor>bf3073bb5084c540d832ed00ae44eb6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Math</name>
    <filename>classogdf_1_1_math.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>equald</name>
      <anchorfile>classogdf_1_1_math.html</anchorfile>
      <anchor>5638a3fc0310e76d2f170c160424a156</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>binomial</name>
      <anchorfile>classogdf_1_1_math.html</anchorfile>
      <anchor>addd525a5d6cc6a0fd1966ddaff0f41e</anchor>
      <arglist>(int n, int k)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>binomial</name>
      <anchorfile>classogdf_1_1_math.html</anchorfile>
      <anchor>034aabbf47f761abc3f3f36debcf36ab</anchor>
      <arglist>(double n, double k)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>factorial</name>
      <anchorfile>classogdf_1_1_math.html</anchorfile>
      <anchor>1ccdae60676495633f2c9ed10e5eaa1e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>factorial</name>
      <anchorfile>classogdf_1_1_math.html</anchorfile>
      <anchor>cd4b66eab837ffdd6b81f00ff034e897</anchor>
      <arglist>(double n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::MemElem</name>
    <filename>structogdf_1_1_mem_elem.html</filename>
    <member kind="variable">
      <type>MemElem *</type>
      <name>m_next</name>
      <anchorfile>structogdf_1_1_mem_elem.html</anchorfile>
      <anchor>a6210aba6ea15542f202022554e15b93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MemoryManager</name>
    <filename>classogdf_1_1_memory_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>MemoryManager</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>f35a1d274cafc6064cc6bb074c42a065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryManager</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>d15a538b6b204dc04283783b5cb90006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>8f2077ca4f9bf5cba59659163939050e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>e697dbefe4d25b55ad9c33a542ecb98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateBlock</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>ff6c9a933ab98da351c2b0b0bb2ab550</anchor>
      <arglist>(size_t nSizeSlice)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>452fddb9d8ad5e1f6eb55ccd9d84d04e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>6fd19c6de5840a4901547b6f17895566</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateList</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>054df4bbfcb9f5708a189cabba6970b3</anchor>
      <arglist>(void *pHead, void *pTail, int nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>MemElemPtr *</type>
      <name>m_freeList</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>8dbe82069a3032fc67af2796ecfb8e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MemElemPtr</type>
      <name>m_blockList</name>
      <anchorfile>classogdf_1_1_memory_manager.html</anchorfile>
      <anchor>3cb6b1eed2ba598ea270ee088f7dfdde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimpleMemoryManager</name>
    <filename>classogdf_1_1_simple_memory_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleMemoryManager</name>
      <anchorfile>classogdf_1_1_simple_memory_manager.html</anchorfile>
      <anchor>6076efd56216a8a2f4a93204c4ff1e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleMemoryManager</name>
      <anchorfile>classogdf_1_1_simple_memory_manager.html</anchorfile>
      <anchor>4c0f9ae6dce2bfcacc5796441504888d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_simple_memory_manager.html</anchorfile>
      <anchor>ee83794b422513c617ed87c6e0de291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classogdf_1_1_simple_memory_manager.html</anchorfile>
      <anchor>27093a7cd069ec352f8f2e04ef49ccc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>classogdf_1_1_simple_memory_manager.html</anchorfile>
      <anchor>766d89b69efcc78732435477a3901146</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classogdf_1_1_simple_memory_manager.html</anchorfile>
      <anchor>9ebf95d45ce7a5d27c7c28c74d2aa10e</anchor>
      <arglist>(void *p, size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateList</name>
      <anchorfile>classogdf_1_1_simple_memory_manager.html</anchorfile>
      <anchor>767dafea6ef75bae26fd2ee1d1be6c1c</anchor>
      <arglist>(void *pHead, void *pTail, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Valued</name>
    <filename>classogdf_1_1_valued.html</filename>
    <templarg>Score</templarg>
    <templarg>X</templarg>
    <member kind="function">
      <type></type>
      <name>Valued</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>ee631e793404e760babe5967a6afe34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Valued</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>32a5a45081289b92ec14f68ac74b8912</anchor>
      <arglist>(Score vt, X xt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Valued</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>5086b43e1a9e611c9b9c431439d63bd4</anchor>
      <arglist>(const Valued &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>Score</type>
      <name>value</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>1a704e9b510efe89eadb954378d39c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>X</type>
      <name>item</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>76935191c3e49fdb8eecdf767b7ad7a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>e6bfc2e6116aec5bf5d5270ba5993dd0</anchor>
      <arglist>(const Valued&lt; Score, X &gt; &amp;V) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>bc8182c93476c7ef282c2bddd820adb1</anchor>
      <arglist>(const Valued&lt; Score, X &gt; &amp;V) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>529580f280be8efee62948eb128aefcc</anchor>
      <arglist>(const Valued&lt; Score, X &gt; &amp;V) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>78dd3c98003ab561b9f774c520e16e22</anchor>
      <arglist>(const Valued&lt; Score, X &gt; &amp;V) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>40bf63a6adae15a51d837681ad7756d6</anchor>
      <arglist>(const Valued&lt; Score, X &gt; &amp;V) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>ad0265627219d3940d882abc902ca1f8</anchor>
      <arglist>(const Valued&lt; Score, X &gt; &amp;V) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Score</type>
      <name>v</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>2c17497d158e623303421ec72cf1f30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>X</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_valued.html</anchorfile>
      <anchor>888b324b6f9137637b868905327f18db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MinHeap</name>
    <filename>classogdf_1_1_min_heap.html</filename>
    <templarg>X</templarg>
    <templarg>INDEX</templarg>
    <member kind="function">
      <type></type>
      <name>MinHeap</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>6b187997028b9c87922661ada9bd26bf</anchor>
      <arglist>(INDEX size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>2d9a746bf75ee81f6d942e533f6f382b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>bb6170f9ef85b6fee961e9b625c5dd41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>4cae113646860821470a4b7716296b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const X &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>2e0d5aa7e767f0c43cdb0f256b9eedf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>52cf831acd3028f703e285384fba12cc</anchor>
      <arglist>(X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>X</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>bcabf336013440932d4383d3c5fe7b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const X &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>c699df254395bf424caf4a5559a78459</anchor>
      <arglist>(INDEX idx) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INDEX</type>
      <name>capacity</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>8dff6264b40daa3fa241b75ac9b88904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>heapup</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>ec14fdd04d296414d2052ca17dc82384</anchor>
      <arglist>(INDEX idx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>heapdown</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>d35b485cf944d9715f4381acd400ed22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; X, INDEX &gt;</type>
      <name>data</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>24dfb216ceb1a469dd8aec912937f057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>INDEX</type>
      <name>num</name>
      <anchorfile>classogdf_1_1_min_heap.html</anchorfile>
      <anchor>57a82dd3e32c258de2fae49338f370b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Top10Heap</name>
    <filename>classogdf_1_1_top10_heap.html</filename>
    <templarg>X</templarg>
    <templarg>INDEX</templarg>
    <base protection="protected">ogdf::MinHeap</base>
    <member kind="enumeration">
      <name>PushResult</name>
      <anchor>f4cedf5ab29c56ab5c0b86c9666f747f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Accepted</name>
      <anchor>f4cedf5ab29c56ab5c0b86c9666f747f382d27897523c819a9fe117dc7925324</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rejected</name>
      <anchor>f4cedf5ab29c56ab5c0b86c9666f747f41a28367d3a788002e929dd3b0f9b7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Swapped</name>
      <anchor>f4cedf5ab29c56ab5c0b86c9666f747fabb3fd759fef3ae318e31146f75ce958</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Top10Heap</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>821347c0987aa583459c26f7b785f882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Top10Heap</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>a45817e7ce54b2b32906f3b1a4bc77e2</anchor>
      <arglist>(INDEX size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>0b55a031029e47e8d3e8ce36ccfbcbba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>f3d6619dd13fd9f337da29aad7e1efe8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>6310d1db2e7d16c2faa4aa09f7e9c4b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>INDEX</type>
      <name>capacity</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>49bbad0f9319493ab26d99cc0237490c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>bc19921c764f64f97cfa621ba3b50528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PushResult</type>
      <name>push</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>53082a02d7e3291591e7c4af07eeda1c</anchor>
      <arglist>(X &amp;x, X &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBlind</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>72b4fa22c86a6b647b46dc065645555c</anchor>
      <arglist>(X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const X &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>a36edf7c7990ef515f663377f24cb58b</anchor>
      <arglist>(INDEX idx) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>successful</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>c592c0dfe6d3c83542ab6b9fc7429c60</anchor>
      <arglist>(PushResult r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>returnedSomething</name>
      <anchorfile>classogdf_1_1_top10_heap.html</anchorfile>
      <anchor>050f9ef340ab106e636814cf4261eb11</anchor>
      <arglist>(PushResult r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Module</name>
    <filename>classogdf_1_1_module.html</filename>
    <member kind="enumeration">
      <name>ReturnType</name>
      <anchor>9331df5a6aa5c9856a0df1e8b74f8f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>retFeasible</name>
      <anchor>9331df5a6aa5c9856a0df1e8b74f8f9ac7c9770b97e0bd3f43e7b89b23d8a1de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>retOptimal</name>
      <anchor>9331df5a6aa5c9856a0df1e8b74f8f9a5858a91dc1873a2fdcfe41ac36bf4d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>retNoFeasibleSolution</name>
      <anchor>9331df5a6aa5c9856a0df1e8b74f8f9aa5c58067a03fa27b6e173dc630fea932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>retTimeoutFeasible</name>
      <anchor>9331df5a6aa5c9856a0df1e8b74f8f9a547909e0b3a9b4735db37a8cc65c52fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>retTimeoutInfeasible</name>
      <anchor>9331df5a6aa5c9856a0df1e8b74f8f9a5c04873cbb377750d27e69024af8c931</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>retError</name>
      <anchor>9331df5a6aa5c9856a0df1e8b74f8f9a17e745f52967194fc0b7b941abf06a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Module</name>
      <anchorfile>classogdf_1_1_module.html</anchorfile>
      <anchor>583d04aa1c8fa295b53068a33a37c709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Module</name>
      <anchorfile>classogdf_1_1_module.html</anchorfile>
      <anchor>94facb914c2446ea91f9730c49da7c1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isSolution</name>
      <anchorfile>classogdf_1_1_module.html</anchorfile>
      <anchor>f06f77ce9303ae90d6c7670d2f453715</anchor>
      <arglist>(ReturnType ret)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ModuleOption</name>
    <filename>classogdf_1_1_module_option.html</filename>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>ModuleOption</name>
      <anchorfile>classogdf_1_1_module_option.html</anchorfile>
      <anchor>7dc3987160f19bd9bfcdf4966be91ab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModuleOption</name>
      <anchorfile>classogdf_1_1_module_option.html</anchorfile>
      <anchor>0cf6adf6656647daaff793f69981d130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classogdf_1_1_module_option.html</anchorfile>
      <anchor>e33868385a5c15599fe9cc1077882e47</anchor>
      <arglist>(M *pM)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_module_option.html</anchorfile>
      <anchor>4540f37c2281ce14151ae80a67f2f547</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>M &amp;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_module_option.html</anchorfile>
      <anchor>b152fc7e117c1f052df1b206c740e908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_pModule</name>
      <anchorfile>classogdf_1_1_module_option.html</anchorfile>
      <anchor>e633bbe3a4e9bbac3d5bddfeee0564b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NearestRectangleFinder</name>
    <filename>classogdf_1_1_nearest_rectangle_finder.html</filename>
    <member kind="function">
      <type></type>
      <name>NearestRectangleFinder</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>4462385626f4733a047f715707e1f9d1</anchor>
      <arglist>(double mad=20, double td=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxAllowedDistance</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>2fa9a301afc49f5b1f6dcdac24f065e9</anchor>
      <arglist>(double mad)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxAllowedDistance</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>154458f72e55b257de0e6408527b1fe4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toleranceDistance</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>75693fe9f99baa54e05ec66cb0c8a510</anchor>
      <arglist>(double td)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toleranceDistance</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>3122287b81f9b767ed15e2f7d478dcfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>74a2328e9d2c3a8020dc6710c5ff1e92</anchor>
      <arglist>(const Array&lt; RectRegion &gt; &amp;region, const Array&lt; DPoint &gt; &amp;point, Array&lt; List&lt; PairRectDist &gt; &gt; &amp;nearest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSimple</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>0f39f7abe4d5cb8c80d3b93b673c7eca</anchor>
      <arglist>(const Array&lt; RectRegion &gt; &amp;region, const Array&lt; DPoint &gt; &amp;point, Array&lt; List&lt; PairRectDist &gt; &gt; &amp;nearest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_maxAllowedDistance</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>05775e1730a0ce532a0aceb80e48cb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_toleranceDistance</name>
      <anchorfile>classogdf_1_1_nearest_rectangle_finder.html</anchorfile>
      <anchor>21da23403d151a1d98a4249472b8fe3c</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::NearestRectangleFinder::PairRectDist</class>
    <class kind="struct">ogdf::NearestRectangleFinder::RectRegion</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::NearestRectangleFinder::PairRectDist</name>
    <filename>structogdf_1_1_nearest_rectangle_finder_1_1_pair_rect_dist.html</filename>
    <member kind="function">
      <type></type>
      <name>PairRectDist</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_pair_rect_dist.html</anchorfile>
      <anchor>06d6547a7aaf2ea294fc6d9277636704</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairRectDist</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_pair_rect_dist.html</anchorfile>
      <anchor>ed951da2f6ea48b1f73794ad0276dea3</anchor>
      <arglist>(int index, double distance)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_pair_rect_dist.html</anchorfile>
      <anchor>45ccf71d2e83d5516c5ba564f1208eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_distance</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_pair_rect_dist.html</anchorfile>
      <anchor>d5a3ee0424ddb84405da57ed48777465</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_pair_rect_dist.html</anchorfile>
      <anchor>bcd23f066c9540225c4262de2c552243</anchor>
      <arglist>(ostream &amp;os, const PairRectDist &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::NearestRectangleFinder::RectRegion</name>
    <filename>structogdf_1_1_nearest_rectangle_finder_1_1_rect_region.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>m_x</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_rect_region.html</anchorfile>
      <anchor>20cc6bdf5ff5beba3997f291581156da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_y</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_rect_region.html</anchorfile>
      <anchor>b93bb6cc9cfbee5613a8e9f52adbd869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_width</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_rect_region.html</anchorfile>
      <anchor>3092823371719b708f9445cf6dfb7f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_height</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_rect_region.html</anchorfile>
      <anchor>360909c37998296138aa134669095393</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structogdf_1_1_nearest_rectangle_finder_1_1_rect_region.html</anchorfile>
      <anchor>8ed3f3c2db4060b6fd0ec7ec3d78c5c1</anchor>
      <arglist>(ostream &amp;os, const RectRegion &amp;rect)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeArrayBase</name>
    <filename>classogdf_1_1_node_array_base.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeArrayBase</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>542c779e5bade0d4da4eac0750639616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeArrayBase</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>faef9692e04b0beac3cb06eeb7f63569</anchor>
      <arglist>(const Graph *pG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeArrayBase</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>a138e29440ad957682d3e0239c7c85b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>d78a8526e137ee0483038e3358a70915</anchor>
      <arglist>(int newTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>3ded9eb46a56aaf87b3640f2f40f4b9f</anchor>
      <arglist>(int initTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>65ee33a5cdba9f2394c71cf9da5576bc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reregister</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>92697a984be73a966d6816f2765bf7e1</anchor>
      <arglist>(const Graph *pG)</arglist>
    </member>
    <member kind="variable">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>3940eef259d3df7a50a93a9a414e1b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; NodeArrayBase * &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_node_array_base.html</anchorfile>
      <anchor>66cc641cf6ffbb57e3aa60e6aecaf0de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeArray</name>
    <filename>classogdf_1_1_node_array.html</filename>
    <templarg>T</templarg>
    <base protection="private">ogdf::Array&lt; T &gt;</base>
    <base protection="protected">ogdf::NodeArrayBase</base>
    <member kind="function">
      <type></type>
      <name>NodeArray</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>532a4f025896b8d98eb9d34012146645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeArray</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>095950dffea1f7b638de2381c28d1bc2</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeArray</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>4a8c182a49fbb3184e7c4f8dc38780e4</anchor>
      <arglist>(const Graph &amp;G, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeArray</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>40bb5c188a034559ff55c21b77022bd4</anchor>
      <arglist>(const NodeArray&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>b62d8fb73bf650a33b060bd32dc73a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph *</type>
      <name>graphOf</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>3be95b7f778d96e7fe2e5d26b2188369</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>7b4dad86ec030ccc40c965399889bf3d</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>82acc93284cc56ce97be4909da686d1b</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>8c83d0ba6a81e1a692b1b5f79d8e289d</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>11d69e4c6fe122d6e24e3d3032082e83</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>NodeArray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>3c0609cce7d62012054955e830b37b13</anchor>
      <arglist>(const NodeArray&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>f588d7f333ac5131b8bfce3b3bcff524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>6f043b79a663bf4f1a8d2374946cff4b</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>511a231e87fd6e3a3f44591b3eadff03</anchor>
      <arglist>(const Graph &amp;G, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>6dd08ac6b4f51038de59f1e4d1cb5ff1</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>579b299bd9540757ba063c60b973789f</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>255100c03dbb6439ebe7ad1ed3e6170a</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>fb0ec493d0df05ab9cbd7fb41b9907c2</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>39380cce0bd015587395ac49296b0e44</anchor>
      <arglist>(int newTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>76f9b9d0e327c35058b8e6d0315fcaea</anchor>
      <arglist>(int initTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>59f0613ee91a1bd511680377aeaf1b67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_node_array.html</anchorfile>
      <anchor>4fa501fdf42f302c9cd5ee50a204e2fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeComparer</name>
    <filename>classogdf_1_1_node_comparer.html</filename>
    <templarg>sorterType</templarg>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type></type>
      <name>NodeComparer</name>
      <anchorfile>classogdf_1_1_node_comparer.html</anchorfile>
      <anchor>73caa2913a4577e831faedbc5524ed6c</anchor>
      <arglist>(NodeArray&lt; sorterType &gt; &amp;valArray, bool ascending=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_node_comparer.html</anchorfile>
      <anchor>66e172b75297eedc9e600691fcf7c92e</anchor>
      <arglist>(const node &amp;v1, const node &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_node_comparer.html</anchorfile>
      <anchor>6ce0cb5e9ba6e8d26545c243acb32bef</anchor>
      <arglist>(NodeArray&lt; sorterType &gt; &amp;valArray)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; sorterType &gt; *</type>
      <name>m_valArray</name>
      <anchorfile>classogdf_1_1_node_comparer.html</anchorfile>
      <anchor>79a4b32bef003745ca6431c68277936e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_smaller</name>
      <anchorfile>classogdf_1_1_node_comparer.html</anchorfile>
      <anchor>e8aafdc5a1c3b99f203b81dda0308d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_greater</name>
      <anchorfile>classogdf_1_1_node_comparer.html</anchorfile>
      <anchor>99a5bf33b65344da9af0dab4e44ef843</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeSetSimple</name>
    <filename>classogdf_1_1_node_set_simple.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeSetSimple</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>3e93467ffd39c9e46e8e3ba0d1552aba</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeSetSimple</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>4f9d6057dbb9c89e4e3fde863c320d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>6466eabbd71148542b8141cb43ccd4a0</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>8f0bf7b1ea0225e65c14ddfbd385c120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>4fb9d15d51dea00320db9746cf270686</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; node &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>a60cd9c04fc48fe44c867024149541ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_isContained</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>1b8e1dbe7e2d886a8802ba1d5a3683b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; node &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_node_set_simple.html</anchorfile>
      <anchor>f0515565bcadba06c8ec5bffe3804a73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeSetPure</name>
    <filename>classogdf_1_1_node_set_pure.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeSetPure</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>77a02fad2d662ef607b7cd5d353ff26e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeSetPure</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>9ef87708830d959bdd90884923ee169d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>20bad41aa9697b0e52f14e3212615f99</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>aa6772f54702fbe208b4e057436545d1</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>ed27c3c7ab229bf555d003773370722a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>56b7e631671082c5c9fcb1e602bc2a21</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const ListPure&lt; node &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>1fafaef8ff9b4bfc68b5b9ef8539557b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>1c9254fc99c80541fd2e39c4f760f6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; node &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_node_set_pure.html</anchorfile>
      <anchor>925097bd954033bf81a2317e0aa8c656</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeSet</name>
    <filename>classogdf_1_1_node_set.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeSet</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>4ce2d82fbfe791ac68e428e97e58ea9a</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeSet</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>925b042efb42e5be75b51aec769c5ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>9f223f76fed59da0b688086e5ff5ebd7</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>e7d82e1dcfa2446132ee458c2c9b044e</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>20b1db1066ea7cabc7855acc2472d422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>10f6a12c49695482c6070fb36e9a238f</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>9f735ea8290ac2e7ed35c7c75cf3e0c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; node &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>84cc5026657bb35f7691786ee9defedb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>5ef91b6c97bddb2a31b6f635293a0b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_node_set.html</anchorfile>
      <anchor>6f3bf0d7e7eabe1d16e5c476a9d6eee6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::QueuePure</name>
    <filename>classogdf_1_1_queue_pure.html</filename>
    <templarg>E</templarg>
    <base protection="private">ogdf::SListPure</base>
    <member kind="function">
      <type></type>
      <name>QueuePure</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>7d794b5af7f10fc6de78e22ac8582a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueuePure</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>e1382cb6b6e861f476789a4c3d3ec54b</anchor>
      <arglist>(const QueuePure&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QueuePure</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>243606cf2c751d134d9ae67f9afbce17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>2e795c5dda40bfe7e794766d17aa03cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>b8b89dae19e2dee9eb498157c92bd2b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>9b34c2e9f60b5ab031a3a04a8d0ac2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>69888eb95351c17be440247cf0b522bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>472a95db371e0fdb2ee87e36c71b079c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QueuePure&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>327dee3e951002b20cc0fdf1c123ad13</anchor>
      <arglist>(const QueuePure&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>append</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>1bfd9f99623fba6c8490b827d3246924</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>653632976a90382eda246b46f247929f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>01b95e6204a51c99dbb10e9dd27775c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; E &gt; &amp;</type>
      <name>getListPure</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>33848e82f2a4d74aeedaa0583ea99dbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>30cb11b9d05731e608b35fe7d5354f41</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>7e83d5e3b464edb24ff81a1b77e62310</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_queue_pure.html</anchorfile>
      <anchor>08cb0dbd781f503ca47fab5c2d09ad2b</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Queue</name>
    <filename>classogdf_1_1_queue.html</filename>
    <templarg>E</templarg>
    <base protection="private">ogdf::SList</base>
    <member kind="function">
      <type></type>
      <name>Queue</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>02b8c48f9e78c0f21f325916f3fefc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Queue</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>0863b4fe0684cd8fea44fba62bfa896e</anchor>
      <arglist>(const Queue&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Queue</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>3bb56c82b82a327f6d40fcd100939f56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>31d3414da479c1b452c43901b3d49870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>8fedef0ebe7465c8eda64dd07386c535</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>a8731e61914be59252799abe1c4a91dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>8c24d231806a4538942b7ac6282155a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>ed7026ca7c610e149e698dcecfcc8fdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>c583bf5f525544d8e7c3227635c9c97d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Queue&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>6f6f88b7e8ca9cd4f54fab381aea8408</anchor>
      <arglist>(const Queue&lt; E &gt; &amp;Q)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>append</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>cb6e967d45e1978cbdc1b8e4fd13c98c</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>889e833a15c9689906011fa109b4ec01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>77cb39e557fb0be1b1c64f84c74d60ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; E &gt; &amp;</type>
      <name>getList</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>6b75fea03efc664c5fd5db9e94d7de2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; E &gt; &amp;</type>
      <name>getListPure</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>256c5aa12d2f9c65118dea7da7595e7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>8eda92c5b89478673999bc756ff8e2db</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>a988f5c4f9b6a1aab2a9415cf4f2f37c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_queue.html</anchorfile>
      <anchor>b2a0cab151ec9179ccdcb8f859152a6c</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Skiplist</name>
    <filename>classogdf_1_1_skiplist.html</filename>
    <templarg>X</templarg>
    <member kind="function">
      <type></type>
      <name>Skiplist</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>cc7637395ab1221c621638a77f5f9fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Skiplist</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>49c442d87adda787dd2e03fe8e0c5867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isElement</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>6eb749cb4f2e6d4a7e39caac32ac2e5a</anchor>
      <arglist>(X item) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>a87cd08aa3bec628a9b16a2f4d7fad33</anchor>
      <arglist>(X item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>a1b4ea70542f5bf071b522037de408f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>76d7cda33525ba91a4a499318479b3aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>601ebb48f207faa813a4c52de862f857</anchor>
      <arglist>(bool killData=false)</arglist>
    </member>
    <member kind="function">
      <type>const SkiplistIterator&lt; X &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>f535b9d6653bb9ed7c1be9842a2b70d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>random_height</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>bc9c5b6180e6551760b80efa9446aa65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>041d79529018b0e2e94de8db864bb449</anchor>
      <arglist>(int newheight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lSize</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>b3d6bb7470c48d8a772d56fe637d7acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Element **</type>
      <name>start</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>f4af7a32ceb195bc697f8f2d5eb0366c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>d5c840249984a33edd6f8fae5dc05b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>realheight</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>9d408b019139522b8ba7584efbc32853</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SkiplistIterator&lt; X &gt;</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>360126d16061b311b4115da10910d714</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Element</name>
      <anchorfile>classogdf_1_1_skiplist.html</anchorfile>
      <anchor>016b821f88c7c0a2de1451c175cefbf9</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ogdf::Skiplist::Element</class>
  </compound>
  <compound kind="class">
    <name>ogdf::Skiplist::Element</name>
    <filename>classogdf_1_1_skiplist_1_1_element.html</filename>
    <member kind="function" protection="private">
      <type></type>
      <name>Element</name>
      <anchorfile>classogdf_1_1_skiplist_1_1_element.html</anchorfile>
      <anchor>f34d25283663114dda8e276cee24c4dd</anchor>
      <arglist>(const X &amp;item, int height)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~Element</name>
      <anchorfile>classogdf_1_1_skiplist_1_1_element.html</anchorfile>
      <anchor>b7f3f1b213c6670f2f8117e48c2d5c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>X</type>
      <name>entry</name>
      <anchorfile>classogdf_1_1_skiplist_1_1_element.html</anchorfile>
      <anchor>04f160da6538c0cc6ba6c655759bc047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Element **</type>
      <name>next</name>
      <anchorfile>classogdf_1_1_skiplist_1_1_element.html</anchorfile>
      <anchor>1516662258b811677b5615bafe2acb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Skiplist&lt; X &gt;</name>
      <anchorfile>classogdf_1_1_skiplist_1_1_element.html</anchorfile>
      <anchor>329266ba4910458e333a3ff095a15550</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SkiplistIterator&lt; X &gt;</name>
      <anchorfile>classogdf_1_1_skiplist_1_1_element.html</anchorfile>
      <anchor>360126d16061b311b4115da10910d714</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SkiplistIterator</name>
    <filename>classogdf_1_1_skiplist_iterator.html</filename>
    <templarg>X</templarg>
    <member kind="function">
      <type>const X &amp;</type>
      <name>operator *</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>15a9acd9ea14766b67ebf49679029465</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>979048a1e5fbd4774b44eec2c934330d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SkiplistIterator&lt; X &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>d744386ab05cd47536b5fb9aeb036c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SkiplistIterator&lt; X &gt;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>3e0722a3f2131a57ff2f166501026b36</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>SkiplistIterator&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>ead9bea2a0a320b256dbc5c277996028</anchor>
      <arglist>(const SkiplistIterator&lt; X &gt; &amp;it)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SkiplistIterator</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>2880ef3c8aa4118b534d6b8bd6831b47</anchor>
      <arglist>(const typename Skiplist&lt; X &gt;::Element *e)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Skiplist&lt; X &gt;::Element *</type>
      <name>el</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>8da83cbaad90fcbd9e37a735aabf81ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Skiplist&lt; X &gt;</name>
      <anchorfile>classogdf_1_1_skiplist_iterator.html</anchorfile>
      <anchor>329266ba4910458e333a3ff095a15550</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SListElement</name>
    <filename>classogdf_1_1_s_list_element.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>ab421ebf9e27f853f3ded6ee5f96b930</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>1b6da43bde5ae44060b002c338f0e639</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>e2aea527c17194f5d86ed65f65642129</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SListElement</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>849a2a8aa1c3c78fd0c90486661fc872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SListElement</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>ef77c737ee7d9bf04ff7af1abd6b88f0</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SListElement</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>60535c4f012edfe29ec427ca6c1ca729</anchor>
      <arglist>(const E &amp;x, SListElement&lt; E &gt; *next)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListElement&lt; E &gt; *</type>
      <name>m_next</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>b990c295eb7da991ea7fef34aab90639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>E</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>6fcb40a0dbbd9d1e860f6fa2af35809d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SListPure&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>8f23a820ea5965d9c08e68dddce93608</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StackPure&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>9149a19a2a4aeedc76a4b207e3827cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SListIterator&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>305f76692fb8e3b206f4950cebeb4ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SListConstIterator&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_s_list_element.html</anchorfile>
      <anchor>39b12010d76887faf064308589eb4209</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SListIterator</name>
    <filename>classogdf_1_1_s_list_iterator.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>SListIterator</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>83172aaa92077714219a062cb3f9ab56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListIterator</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>7ab2e7bca43582ac361f6bd9ab2b8fc8</anchor>
      <arglist>(SListElement&lt; E &gt; *pX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListIterator</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>8ce18f83d2a24a3268380e3882fbd793</anchor>
      <arglist>(const SListIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>4e74a68845a4c3b236ad1e6dc71a7916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>babfcba0fc3021d631d201291ce0f7b4</anchor>
      <arglist>(const SListIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>4b9a0cc8a05fbe8915424310ac549dc3</anchor>
      <arglist>(const SListIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>ff9c6cda507cf194f34ff956ad59b1be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator *</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>90a693a43bd5093c61cf194d2f571377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>72be0fdab5d6c6ad254efe3deb950ed2</anchor>
      <arglist>(const SListIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>10175385db6b3cb5a30d81f1991dd266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>718aae83704bf16b69751726207fa6a2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>f6cd921e0f250c431163ddbd5973d0c0</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>59f527a85faa832c22372a0d5e1b3652</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>66c6fc7db7372f660ff50dce7e2c1a21</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>o</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>433320b9fd26078609fc4c6ff73debf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>o</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>4db4d70fcb969fedeae1cab390f34c6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListElement&lt; E &gt; *</type>
      <name>m_pX</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>a57c9baa99c3bcff0d16f2fc885f901b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SListConstIterator&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>39b12010d76887faf064308589eb4209</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SListPure&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_s_list_iterator.html</anchorfile>
      <anchor>8f23a820ea5965d9c08e68dddce93608</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SListConstIterator</name>
    <filename>classogdf_1_1_s_list_const_iterator.html</filename>
    <templarg>E</templarg>
    <member kind="function">
      <type></type>
      <name>SListConstIterator</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>f31121cc8bfa274e93246730c3fa08de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListConstIterator</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>92a023acd86e1dc0364e49b45cb0c4c9</anchor>
      <arglist>(const SListElement&lt; E &gt; *pX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListConstIterator</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>15c01fb9ada61b790d3bcdba043b5759</anchor>
      <arglist>(const SListIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListConstIterator</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>9179e355313ba7c84fe0d5568afc64f2</anchor>
      <arglist>(const SListConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>517fe3f899a739d389bbba61749f0952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>f059a657945f05be2554b7bcc14172a8</anchor>
      <arglist>(const SListConstIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>840245b886ed994420edc0a5b7a52d9f</anchor>
      <arglist>(const SListConstIterator&lt; E &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>e4a11aae8933a0ad96fe936abb9d9805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator *</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>0e85ecaadbb3577ed4c592c38409c59a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>b82af7aaceda080d5f11b2f272d68d86</anchor>
      <arglist>(const SListConstIterator&lt; E &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>c116567ef24147e6c44c84c2b16b0380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>operator++</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>d78719c204b713f7ac823d241ff7b210</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>a428515d057c0a85ec859916e5fb6e59</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>cd5b0a47477841f38471c75c9d3486f6</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>9efb9e88004153c128cb6607e980e7e5</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>o</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>f0da610b7b6a2db78cd9d091953281c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SListElement&lt; E &gt; *</type>
      <name>m_pX</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>a63c1516a34a1023f5858154c3e2b489</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SListPure&lt; E &gt;</name>
      <anchorfile>classogdf_1_1_s_list_const_iterator.html</anchorfile>
      <anchor>8f23a820ea5965d9c08e68dddce93608</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SListPure</name>
    <filename>classogdf_1_1_s_list_pure.html</filename>
    <templarg>E</templarg>
    <member kind="typedef">
      <type>E</type>
      <name>value_type</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>25638369ba05a7765fc4ea1981399431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SListElement&lt; E &gt;</type>
      <name>element_type</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>515b260a3cecbcc7c17aaeb8f50c6856</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>419a236bdb1d9209ace32509db87a8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SListIterator&lt; E &gt;</type>
      <name>iterator</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>451116ac0ef3378b57350f0b4d7d4dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListPure</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>19d696bd443d3372e00198c65edd8425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListPure</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>0f48115cdd25d61fc12f45ffdc371b75</anchor>
      <arglist>(const SListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SListPure</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>4d04080cfda678e46cd1649735a90572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>bf8c651b8a8c0a23a37cf18faff17d14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>7bc9a599c36e1038ea76a4f8b31acb49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>f55687e27cbf3a28755134dd819611e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>477ebbabfa44cf19d4b665fe75e69180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>234a1636fdb308402749a3b0e8b85955</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>cb6d4177b46fc4b6eff7b32c295f0b95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>7fa7a5c66714ad400c7e5a212721a7dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>57b6fcebcd73aa064317d57954f8aa45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>d0fb59d90f6701be5d609a9e6ea6c6a7</anchor>
      <arglist>(int pos) const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>fc525e53a9d59041363617a9e3edccd9</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>6e8593672d99694100b3acaed5b6d387</anchor>
      <arglist>(SListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>8a4f15b17fd82d437b19ab79a43dc3af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>9cbd981c2aa20099de71dd741bfc1b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>57f4af0107cd1c174ac4388724b448f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>2f6d6588b8ac94f812cfff44cc842adf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>54e1c16eacd22c2cedc33880af21c5a7</anchor>
      <arglist>(SListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>8791a75425c2afeb36e735e4fd2a7117</anchor>
      <arglist>(SListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>SListPure&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>14beccce2f30bcdc395a2969fbb0b907</anchor>
      <arglist>(const SListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>pushFront</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>e5ba71a2deef7004bb0917120467fe32</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>pushBack</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>8a62cf3eceae807498545125c5e79fd6</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>insertAfter</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>45fe684f6622cb90a23fd7d6ee2032c9</anchor>
      <arglist>(const E &amp;x, SListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>fe0111ad799ee183aa800790644d783e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>popFrontRet</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>c43b77162b114fb5104ff18144ea52cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delSucc</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>4d58cf49193fa03a23448f1a049e96f9</anchor>
      <arglist>(SListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveFrontToFront</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>faa1ca5ac8486d9332ee6ecb41cf2e1c</anchor>
      <arglist>(SListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveFrontToBack</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>c82f606e504435cd569c01b3921f9253</anchor>
      <arglist>(SListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveFrontToSucc</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>ecb4e52959bd9169aecea206e1f97a42</anchor>
      <arglist>(SListPure&lt; E &gt; &amp;L2, SListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>16ad477eabdad61d7d60233ea82c6eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conc</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>ff77a3d04273c5fd212cfdc5395407af</anchor>
      <arglist>(SListPure&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>541d6885ca880ad710dbb0a3eef4ea04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; E &gt; &amp;</type>
      <name>getListPure</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>37bdd731236ce0910b2272d7db2207f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>826181d0b4fcfabede9ac59d17354bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>5934dc601c03ba95e731dca6b73abc22</anchor>
      <arglist>(Comparer&lt; E &gt; &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCT</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>590cd039f34cc23fc36ac9fb78ed9dd2</anchor>
      <arglist>(C &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>59e2cdfc1f9f0bdd8e7bcb40b52eeb94</anchor>
      <arglist>(int l, int h, BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>02a4984a8fe8dfd250d67f42c32b3dc3</anchor>
      <arglist>(BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>c6d78596c9555f69d06425aa077d741b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>f6f5a6d1a3bdcfe5054e9d61f813fa39</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>49a536a90b4695a8d8b259b9572dcbe3</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>d2957b42eeebf68060cf67740d3485ed</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>e1886faa562a3b81d93538fc48333de6</anchor>
      <arglist>(const SListPure&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>f4d8f6a57e91f355f1e6acbdf569bd9a</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListElement&lt; E &gt; *</type>
      <name>m_head</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>7512a6984f4a35a4ec86de09384ff650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListElement&lt; E &gt; *</type>
      <name>m_tail</name>
      <anchorfile>classogdf_1_1_s_list_pure.html</anchorfile>
      <anchor>2be32861e51ab04e5a362e1ea1427e8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SList</name>
    <filename>classogdf_1_1_s_list.html</filename>
    <templarg>E</templarg>
    <base protection="private">ogdf::SListPure</base>
    <member kind="typedef">
      <type>E</type>
      <name>value_type</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>0b43a611f07a786d2cfd61c70fd3f5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SListElement&lt; E &gt;</type>
      <name>element_type</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>2c9f9bb163b39b9f4776c11e5db96b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>0658486089d68097153ca7fb336787ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SListIterator&lt; E &gt;</type>
      <name>iterator</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>b977f25b57acddb601089230c59e4ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SList</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>cb55f10abc51fec96d80fc774810b0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SList</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>7c20a05a19722657d4a037833ae0bd12</anchor>
      <arglist>(const SList&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SList</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>b43dc98d41f116d318baa1142e86b471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>939adcb48bf5905ecef16b9a3f0dcf15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>f66b15ba1e0630f133d44ca7ad9d3aee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SListConstIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>3a7a198ec47ce40afd017afdb894c4ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>begin</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>826a7951078aec4281123e7d6a7727e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>1a0c40bc22d48d9c1c01f8f84cd942b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>58552c0c6e080d8f9a2d45bae7f42e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListConstIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>9a820a90bde9677bb7b0c3741e582ebd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>rbegin</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>8ef900314d0a7e932bcf04ddcceba608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>ba407f446a3f550df184931caea3e85d</anchor>
      <arglist>(int pos) const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>get</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>6e324667f3202afe958634471e7103ed</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>a5700bd579bb7d2f3b523c5a368b3acd</anchor>
      <arglist>(SListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>d342d619e588a5c61a04828f8d4b61d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>5201cd5a97b1c4ffe83f7c4eb9ce1a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>79fe6497e6cb06dcfdd553cf746b50cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>back</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>b4e0f8fe96b104f634f7fee9c40f2f33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SListConstIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>418591c8e482eeee58ca901f3949adbd</anchor>
      <arglist>(SListConstIterator&lt; E &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>cyclicSucc</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>fe68c5b7c3d9f8f768bdc682ebfcfea9</anchor>
      <arglist>(SListIterator&lt; E &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>SList&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>327c84384ef4784438e64c24fddba3ee</anchor>
      <arglist>(const SList&lt; E &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>pushFront</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>e43c7ba27e44abe48bf270c27869563f</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>pushBack</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>ebb6939db1bccb9c519d6010ad461fc7</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>insertAfter</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>391e5dc64b9c5f2b5f6acaa8480a1ee6</anchor>
      <arglist>(const E &amp;x, SListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>4b5deb99d4f0dd0c340ba17c1a6a3229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>popFrontRet</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>85d6c3ce74603880f1e9ea6087f05574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delSucc</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>85d52c1caa16e2416f5efa53923134ac</anchor>
      <arglist>(SListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveFrontToFront</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>3be577deb84235aaf407df3e745e44b6</anchor>
      <arglist>(SList&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveFrontToBack</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>6c6847f7dc56f495b0c359a58beb548a</anchor>
      <arglist>(SList&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveFrontToSucc</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>1ed3b34d3a9c58e0db376e22feb7db09</anchor>
      <arglist>(SList&lt; E &gt; &amp;L2, SListIterator&lt; E &gt; itBefore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>30c1a8a5db758e877438136b0b534c54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conc</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>4599ed5d177f10627f4ee68bc988b6a8</anchor>
      <arglist>(SList&lt; E &gt; &amp;L2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>157d713fd93dafdd2e572b73c96bc7b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; E &gt; &amp;</type>
      <name>getListPure</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>155215c10318715b58fa6cd7056d6a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>800e36bc82717c7ddc60c4797d15c79f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksort</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>8c6f912d5f25a74a86c6897359010d7f</anchor>
      <arglist>(Comparer&lt; E &gt; &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quicksortCT</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>cb43037e191f522bcaf7589acc77131f</anchor>
      <arglist>(C &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>3f7f5dc684f218a68ef3d351fd86325f</anchor>
      <arglist>(int l, int h, BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bucketSort</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>a930e7a6e4876e6da2e9a7c4f8e022c2</anchor>
      <arglist>(BucketFunc&lt; E &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>75f79776859f261b9c403c9a72c49441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>604952cf91cb560e366aed97e211685a</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>a16f71a7e8006a0ec184cf179c3514f6</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>a800be13351e82238c1f857f3c279c56</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_count</name>
      <anchorfile>classogdf_1_1_s_list.html</anchorfile>
      <anchor>a6865852aa9afb566f4261066c306f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::StackPure</name>
    <filename>classogdf_1_1_stack_pure.html</filename>
    <templarg>E</templarg>
    <base protection="private">ogdf::SListPure</base>
    <member kind="function">
      <type></type>
      <name>StackPure</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>57a99428adcebf13380f4443e521e307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackPure</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>8246b8b1c2ef017dac55000ed3e71d05</anchor>
      <arglist>(const StackPure&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StackPure</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>a42284035266514f307ffc9625bf698d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>0b97a1bfbfaf7592ba4616b49ba73ed5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>4e902f99641c84cd7b4fa7bb4eddf6ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>14f68680daa599367a9c1c2435be3ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StackPure&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>b38d9b6490776382cd5b78970ce09b1d</anchor>
      <arglist>(const StackPure&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>push</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>c3cb04208dc31d940845b2c458cbe329</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>5bb274134ac78303972da98d638ca104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>eef743248d420ece62e6fb157b7c6e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; E &gt; &amp;</type>
      <name>getListPure</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>86078a8863b138a1f8607dfda9af1e7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>f25fc6679b0cdde9d54dcb0a88689dd5</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>21d7f044e6381a62c56d34fb67df353c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_stack_pure.html</anchorfile>
      <anchor>b0108a4576d36cb611e2640f7d0376df</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Stack</name>
    <filename>classogdf_1_1_stack.html</filename>
    <templarg>E</templarg>
    <base protection="private">ogdf::SList</base>
    <member kind="function">
      <type></type>
      <name>Stack</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>5cbfde19c3bb2629a905b27af9847c3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stack</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>b91e501d4ffadd51207cc66c8b8a78bb</anchor>
      <arglist>(const Stack&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Stack</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>159f025361c9f6e5337e5323f97440ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>03f6a031f5ec28e70bd179176a537244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>df0f8d8448fe590961848bc94e42315e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>9dbaa526b6fc1a062da00a9e0640c855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>67a06e6f74325789a44e460e01ee083d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Stack&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>816b46043a518325029dfc8c65a0601d</anchor>
      <arglist>(const Stack&lt; E &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; E &gt;</type>
      <name>push</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>c4d5600264cfb3f219d95ba6ac3b3706</anchor>
      <arglist>(const E &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>89af5241220cfb8eac40166c54da4a7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>565a9d084177f19dfcaeb1ab173f7ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; E &gt; &amp;</type>
      <name>getList</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>cc1087b0ee14cd78b2973de531e62e37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>f14a82bfb8bb2f2061159f0b39339dd6</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>0da25833db06e6ab2167308d3ef7d2c9</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_stack.html</anchorfile>
      <anchor>4ee6693a484d3f994066b887e715136e</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::String</name>
    <filename>classogdf_1_1_string.html</filename>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>9577b7803b33bf1688a7948d2860c67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>8b550d384e8768e49bab93a94085b581</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>c40a1676f688cb971a97f061229619cc</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>f79284ac001bed6cb1691a30c63b0c80</anchor>
      <arglist>(size_t maxLen, const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>87e74878123172b4d875027518fb1e35</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~String</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>02822ba94bc243af16b629092b0e8a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>cstr</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>2d2fa4407aa7685f83f8e383bd436436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>b9c13a85ecda4e67e7007aa8d6b68594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>a48bea91ffd657987f710c71ae06d54c</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>1d364ac91c14b56591cc75f5bb2bebb3</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>29fac7ff60862c43a387de1c2b69f1f4</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>e01955d82a6e05f547727a5304eb19fc</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator+=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>13080ee7d17f3c65ba40bca5dccd5422</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sprintf</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>c8e27e9c9f5ff40e6b6956fdf879b110</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>d906586669433efab083fa803131a280</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>a9e2418e7c1bcd667947a8e23d10bc99</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>59a34d19f49281eb4dc5141b0428f957</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>4aa4ab25e444fb36b02dc98adc09f327</anchor>
      <arglist>(const String &amp;x, const String &amp;y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pChar</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>908fadc568bedef07dd4c78856b989a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>m_length</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>cc0a803fb6bdc65948603e91be16d7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static char</type>
      <name>s_pBuffer</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>28c88bd9fc6f2dbf0d086b547f27789f</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>8f0eb0609d90ed68eac7d8fc700fc1fb</anchor>
      <arglist>(const String &amp;x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>6abff1e36ef0070cedd41868f9b067d9</anchor>
      <arglist>(const char *x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>afdd2fdd6b8281187ab00f641afe062c</anchor>
      <arglist>(const String &amp;x, const char *y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>688ff732aba878207ef25611cbd962f6</anchor>
      <arglist>(const String &amp;x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>ed45273ea78ab422fcc88fe45758ac81</anchor>
      <arglist>(const char *x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>536e5d0f8cc4c2d637081e433ccc8def</anchor>
      <arglist>(const String &amp;x, const char *y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>5bece90eed10f67a76cbbb43823d970e</anchor>
      <arglist>(const String &amp;x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>44f1914ad8215d18ecff377ebfd3e36e</anchor>
      <arglist>(const char *x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>cfd73337f78528dde269683950d58096</anchor>
      <arglist>(const String &amp;x, const char *y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>51b9bdad1ef0fc1717cc7ad209c0e08f</anchor>
      <arglist>(const String &amp;x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>2b4c25fada6dba9b8cdfc08d1377a12e</anchor>
      <arglist>(const char *x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>15c9d184beb2bdd4cca2a418de9f4b10</anchor>
      <arglist>(const String &amp;x, const char *y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>41e363b4417bced17e207f46ac146ea4</anchor>
      <arglist>(const String &amp;x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>2862d9c7b716693c008be6d6a9e2cb89</anchor>
      <arglist>(const char *x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>7dc048f0b0fd1c972e705c1ff9a71a1b</anchor>
      <arglist>(const String &amp;x, const char *y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>9e19ae8b0db30285cccd804562e78c98</anchor>
      <arglist>(const String &amp;x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>d185439ee6cbf51b59d2964d66f4d984</anchor>
      <arglist>(const char *x, const String &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>c426823a0029e6a828fe07083947dd91</anchor>
      <arglist>(const String &amp;x, const char *y)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classogdf_1_1_string.html</anchorfile>
      <anchor>26a640514a5de6d44b59dae8cee48629</anchor>
      <arglist>(istream &amp;is, String &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DefHashFunc&lt; String &gt;</name>
    <filename>classogdf_1_1_def_hash_func_3_01_string_01_4.html</filename>
    <member kind="function">
      <type>int</type>
      <name>hash</name>
      <anchorfile>classogdf_1_1_def_hash_func_3_01_string_01_4.html</anchorfile>
      <anchor>bb180e6263aca902bbd485abfe561c0c</anchor>
      <arglist>(const String &amp;key) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Timeouter</name>
    <filename>classogdf_1_1_timeouter.html</filename>
    <member kind="function">
      <type></type>
      <name>Timeouter</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>997ca0f1bfbe2f1948e700278c902112</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timeouter</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>bafad47f54f53895bc971a4a03af66e6</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timeouter</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>f6eae2e98f414ee13fed7e2f1af66fa9</anchor>
      <arglist>(bool t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timeouter</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>7b1abd3448351b99080558df99dc0e71</anchor>
      <arglist>(const Timeouter &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Timeouter</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>659dc0e97dae0c9e0e7195c93e220979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeLimit</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>98433ecf73e949444da33207d7fdbe76</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeLimit</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>16ca71bc825e99a39874a4299e19fafd</anchor>
      <arglist>(bool t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeLimit</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>bfb0683e80338634752457cfee2b2663</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTimeLimit</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>c2a1bbfc5e0bdfb150b58297ddf6ea2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_timeLimit</name>
      <anchorfile>classogdf_1_1_timeouter.html</anchorfile>
      <anchor>bab76474e029b48d3907e09ea70c46eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::TopologyModule</name>
    <filename>classogdf_1_1_topology_module.html</filename>
    <member kind="enumeration">
      <name>Options</name>
      <anchor>0bf09211b11c288a64345c31b5c5cd64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opDegOneCrossings</name>
      <anchor>0bf09211b11c288a64345c31b5c5cd64cd432e2f2ebdf4737118b39220b22c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opGenToAss</name>
      <anchor>0bf09211b11c288a64345c31b5c5cd646948311271f6c0ef4d2c2e8db438e6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opCrossFlip</name>
      <anchor>0bf09211b11c288a64345c31b5c5cd64b868730e7726a89aa51ac397402793ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opFlipUML</name>
      <anchor>0bf09211b11c288a64345c31b5c5cd6437fc5135aa37de25bc9b2b70f748a3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>opLoop</name>
      <anchor>0bf09211b11c288a64345c31b5c5cd6403b56fe2a453c68d2c9eb63841b28678</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TopologyModule</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>2cd4a6d3b8f4384f1aa1c58d6d430564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TopologyModule</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>de16c35fa9c72b70ac691b9a8dd06c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptions</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>5b18824ecdc2428965713a730f031a5d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOption</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>0bd62de68457abc8b056c1fbef9065e0</anchor>
      <arglist>(TopologyModule::Options o)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setEmbeddingFromGraph</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>fd2670049ed8f48e9daac3e49fa6069e</anchor>
      <arglist>(PlanRep &amp;PG, GraphAttributes &amp;AG, adjEntry &amp;adjExternal, bool setExternal=true, bool reuseAGEmbedding=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortEdgesFromLayout</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>df6b88f53d3dc9b383a6821f94bd1134</anchor>
      <arglist>(Graph &amp;G, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>getExternalFace</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>5fd2808e2a2be508274290df80cda338</anchor>
      <arglist>(PlanRep &amp;PG, const GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>faceSum</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>3f841b56543dbca1fca19c875524e59b</anchor>
      <arglist>(PlanRep &amp;PG, const GraphAttributes &amp;AG, face f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>planarizeFromLayout</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>a91adf3150c397a894fa9603553e12a5</anchor>
      <arglist>(PlanRep &amp;PG, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasCrossing</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>b187349fa38788f7b2ab22318bcdfa12</anchor>
      <arglist>(EdgeLeg *legA, EdgeLeg *legB, DPoint &amp;xp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkFlipCrossing</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>47ca1d492fb6d03708fea5ee368bcdfb</anchor>
      <arglist>(PlanRep &amp;PG, node v, bool flip=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postProcess</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>9c1f3fc1f7fae4d8f0892f6a3023f074</anchor>
      <arglist>(PlanRep &amp;PG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleImprecision</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>ae6fe8b3f09ce9af04f84583f3011bb6</anchor>
      <arglist>(PlanRep &amp;PG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>skipable</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>d8b0dc92a8b8f03d2674e0425a01abc5</anchor>
      <arglist>(EdgeLeg *legA, EdgeLeg *legB)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>compare_vectors</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>d71e365009bc97f7599169c1b28be397</anchor>
      <arglist>(const double &amp;x1, const double &amp;y1, const double &amp;x2, const double &amp;y2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>5c2b5c4f4b784fc062e8392616fead38</anchor>
      <arglist>(DPoint p, DPoint q, DPoint r)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; DPoint &gt;</type>
      <name>m_crossPosition</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>e672d95e4f306f558f23a5627cffd0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; EdgeLeg * &gt; &gt;</type>
      <name>m_eLegs</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>5deaa199c98cc6574035dbacae978621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_options</name>
      <anchorfile>classogdf_1_1_topology_module.html</anchorfile>
      <anchor>0a0488d8f72c9204137d6f3c9485d771</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PointComparer</name>
    <filename>classogdf_1_1_point_comparer.html</filename>
    <base>ogdf::Comparer</base>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type></type>
      <name>PointComparer</name>
      <anchorfile>classogdf_1_1_point_comparer.html</anchorfile>
      <anchor>867f7884b5d8a5ed3c171d566a11388d</anchor>
      <arglist>(DPoint refPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_point_comparer.html</anchorfile>
      <anchor>e97ebd08bdf98de9c7568d7740176e0e</anchor>
      <arglist>(const ListIterator&lt; EdgeLeg * &gt; &amp;ep1, const ListIterator&lt; EdgeLeg * &gt; &amp;ep2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointComparer</name>
      <anchorfile>classogdf_1_1_point_comparer.html</anchorfile>
      <anchor>9f2985e3c7b33daf643da3bdb5e82fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_point_comparer.html</anchorfile>
      <anchor>9adb1ef5916798fe58c0d0be61baa978</anchor>
      <arglist>(const DPoint &amp;p1, const DPoint &amp;p2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DPoint</type>
      <name>m_refPoint</name>
      <anchorfile>classogdf_1_1_point_comparer.html</anchorfile>
      <anchor>f5b6ba1a90b03f73ac073af0fa9b1e72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeLeg</name>
    <filename>classogdf_1_1_edge_leg.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeLeg</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>f88c05487c7285966c88a843f9bd6d7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeLeg</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>8bae9428234246937532de321e7ce6bb</anchor>
      <arglist>(edge e, int number, DPoint p1, DPoint p2)</arglist>
    </member>
    <member kind="function">
      <type>DPoint &amp;</type>
      <name>start</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>47119754b310f7c974d9832c2880de3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DPoint &amp;</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>2a16b094ff5e66a0a3c5449ced0f926c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>number</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>2e03cb00d071d6f638850206837f818e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>edge &amp;</type>
      <name>copyEdge</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>a2674ac34207095dc0b14e424a8d34cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>DPoint</type>
      <name>m_xp</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>c2b5c304946f0843888efe62351ffc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_topDown</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>37301add9fdbafa2542bdcf1a0afd02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ListIterator&lt; EdgeLeg * &gt;</type>
      <name>m_eIterator</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>8dc51ab7e738b055e0bbbdf28af9c3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>edge</type>
      <name>m_copyEdge</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>9b2a40996a0caf617d50bf8be0936449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_p1</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>c790e0a75db860c8e7863edaa3b91d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_p2</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>a36d4278ef84158bdd7f6a4646d716a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_number</name>
      <anchorfile>classogdf_1_1_edge_leg.html</anchorfile>
      <anchor>fcfbbae00c6273f238b7a8031154bb64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Tuple2</name>
    <filename>classogdf_1_1_tuple2.html</filename>
    <templarg>E1</templarg>
    <templarg>E2</templarg>
    <member kind="function">
      <type></type>
      <name>Tuple2</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>60054a7eb1edcc7bb8c9adbd0ba9e9e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tuple2</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>112208c8dd0df4749d3cf84b514be6b6</anchor>
      <arglist>(const E1 &amp;y1, const E2 &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tuple2</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>562ceef21882cef720344a305a47e7b9</anchor>
      <arglist>(const Tuple2&lt; E1, E2 &gt; &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>const E1 &amp;</type>
      <name>x1</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>2df65d13d5dee1de941c88a071e52b51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E2 &amp;</type>
      <name>x2</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>28e6af3bab466b2ffcfbe0860deaaf7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E1 &amp;</type>
      <name>x1</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>18200a8fe11b6c3ff0d45e3ceda09eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E2 &amp;</type>
      <name>x2</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>0e8e6510fccc132ec8a65f5b6ff05635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>3180c78b28af226063b79be08af7e663</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>f9414f8b06ca202799fe84acc1000f23</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>cd50d4abfcd8e707890fcd5958999b30</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>E1</type>
      <name>m_x1</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>c6bf98f752f9bff3762014bbf5380a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>E2</type>
      <name>m_x2</name>
      <anchorfile>classogdf_1_1_tuple2.html</anchorfile>
      <anchor>5bd4b52c87e179b57b0980e20a97c214</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Tuple3</name>
    <filename>classogdf_1_1_tuple3.html</filename>
    <templarg>E1</templarg>
    <templarg>E2</templarg>
    <templarg>E3</templarg>
    <member kind="function">
      <type></type>
      <name>Tuple3</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>b61035bf5236d8e8dd258162088f7f44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tuple3</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>57dac4c029158b24ae7a0a8f69c0f55f</anchor>
      <arglist>(const E1 &amp;y1, const E2 &amp;y2, const E3 &amp;y3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tuple3</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>50046eea971cbf485437d97fd61a7970</anchor>
      <arglist>(const Tuple3&lt; E1, E2, E3 &gt; &amp;t3)</arglist>
    </member>
    <member kind="function">
      <type>const E1 &amp;</type>
      <name>x1</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>241aa95d24cc8aa614057b6bc3142442</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E2 &amp;</type>
      <name>x2</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>2b30051ae9b7003e6db6e5b4e71fbdb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E3 &amp;</type>
      <name>x3</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>ad0b34605bbfc4a323bcc7a3c22fb7d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E1 &amp;</type>
      <name>x1</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>4b252031acc0ebeaa811e484340f166d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E2 &amp;</type>
      <name>x2</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>59a85c5e223ec9e518e61a59b0c3c567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E3 &amp;</type>
      <name>x3</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>7fba3757c12a7e7da46d83d927cfce3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>2d77f672f86248bd41050aa65e7ae436</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>6ac9eeeb2e2d1ce7184311daafba680c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>1823888e5347bb2d9cdb88cb4c621a68</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>E1</type>
      <name>m_x1</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>f7de60ceefda4ee808ab0cc378c16de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>E2</type>
      <name>m_x2</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>610182258e03a0e10cc0a7a1b0196cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>E3</type>
      <name>m_x3</name>
      <anchorfile>classogdf_1_1_tuple3.html</anchorfile>
      <anchor>0422413ce51ec7a7030c91e633677a01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Tuple4</name>
    <filename>classogdf_1_1_tuple4.html</filename>
    <templarg>E1</templarg>
    <templarg>E2</templarg>
    <templarg>E3</templarg>
    <templarg>E4</templarg>
    <member kind="function">
      <type></type>
      <name>Tuple4</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>0b1feb789164d5f2e74f52807930713d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tuple4</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>a8b45d0795ccdc2f944e406857b719bd</anchor>
      <arglist>(const E1 &amp;y1, const E2 &amp;y2, const E3 &amp;y3, const E4 &amp;y4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tuple4</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>edc49198f9101775e6e6014b09d42737</anchor>
      <arglist>(const Tuple4&lt; E1, E2, E3, E4 &gt; &amp;t4)</arglist>
    </member>
    <member kind="function">
      <type>const E1 &amp;</type>
      <name>x1</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>3524c08fd771bb11f043059d15d66ff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E2 &amp;</type>
      <name>x2</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>04f3440767a7258afb20cadbb92de744</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E3 &amp;</type>
      <name>x3</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>1b5f003682bf10c00b5ed9169df0c5ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const E4 &amp;</type>
      <name>x4</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>f67ebae02e9b20b0b9cd322bfafe38c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>E1 &amp;</type>
      <name>x1</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>f917cbf7700355c5685c1a8f95754ad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E2 &amp;</type>
      <name>x2</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>7156d1f6041a68c1a90f7ab78c336bf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E3 &amp;</type>
      <name>x3</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>ae9ee5320cd329407ec03f41a6dbe4e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>E4 &amp;</type>
      <name>x4</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>f4e4f7f61f7fc9ede54aa935fd96a006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>ae7401d2cfc3a099936a26945809423b</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>7ac9a5aab0407f8759c7e15fedd99721</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>6723244fef28040d6ba1136de419af29</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>E1</type>
      <name>m_x1</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>94f6920fd780c0f9584971c7912b375d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>E2</type>
      <name>m_x2</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>091b0c484da29d3e3f89fd9c69045bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>E3</type>
      <name>m_x3</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>50cbad894302648bbe18c3d770d70dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>E4</type>
      <name>m_x4</name>
      <anchorfile>classogdf_1_1_tuple4.html</anchorfile>
      <anchor>09ab10ce662198deddff854e5ecce080</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HashFuncTuple</name>
    <filename>classogdf_1_1_hash_func_tuple.html</filename>
    <templarg>K1_</templarg>
    <templarg>K2_</templarg>
    <templarg>Hash1_</templarg>
    <templarg>Hash2_</templarg>
    <member kind="function">
      <type></type>
      <name>HashFuncTuple</name>
      <anchorfile>classogdf_1_1_hash_func_tuple.html</anchorfile>
      <anchor>b557631508324cd86ea7287d3ee039e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashFuncTuple</name>
      <anchorfile>classogdf_1_1_hash_func_tuple.html</anchorfile>
      <anchor>60edfe6e09d5fd33b71d65d819150ff2</anchor>
      <arglist>(const Hash1_ &amp;hash1, const Hash2_ &amp;hash2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hash</name>
      <anchorfile>classogdf_1_1_hash_func_tuple.html</anchorfile>
      <anchor>793e0b4c499671de47342be54412879f</anchor>
      <arglist>(const Tuple2&lt; K1_, K2_ &gt; &amp;key) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hash1_</type>
      <name>m_hash1</name>
      <anchorfile>classogdf_1_1_hash_func_tuple.html</anchorfile>
      <anchor>35fe6a5952aafb23d69e6645f820d9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hash2_</type>
      <name>m_hash2</name>
      <anchorfile>classogdf_1_1_hash_func_tuple.html</anchorfile>
      <anchor>67048a228b47bc034fafa46fa18ac821</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::UMLGraph</name>
    <filename>classogdf_1_1_u_m_l_graph.html</filename>
    <base>ogdf::GraphAttributes</base>
    <member kind="function">
      <type></type>
      <name>UMLGraph</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>91c78f353fb2593879c9bc4b61529fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMLGraph</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>c8096e400cf7ed28fa76dea4f0e4a659</anchor>
      <arglist>(Graph &amp;G, long initAttributes=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UMLGraph</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>237508ff2ffbdb83c416cc64e97b943c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>45ff50d32f1e2f02f286af42fb8d0af4</anchor>
      <arglist>(Graph &amp;G, long initAttr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Graph &amp;</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>fcd0bfd5c0bbfd072860dee035f76567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertGenMergers</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>f1e7fcb75c900f884e13642220143d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>doInsertMergers</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>992dcd5e55aa9d73fd8c02dc8851f207</anchor>
      <arglist>(node v, SList&lt; edge &gt; &amp;inGens)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undoGenMergers</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>eda35254012233d0747b1bdda8c2d4a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceByStar</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>205608c0645d716f4827e7d0460475e8</anchor>
      <arglist>(List&lt; List&lt; node &gt; &gt; &amp;cliques)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undoStars</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>01ead9434298291e1f205f53ef7d5e21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undoStar</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>b3d955d7e994b9bad78d2c7a046e2b92</anchor>
      <arglist>(node center, bool restoreAllEdges)</arglist>
    </member>
    <member kind="function">
      <type>DRect</type>
      <name>cliqueRect</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>b1d2b5485d93c82980d2232eb7280584</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>DPoint</type>
      <name>cliquePos</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>89b21369a18f60a0804d9b918f18b873</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCliquePosition</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>cb02d833debf79a76e46f44fa160733d</anchor>
      <arglist>(node center, double rectMin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCliquePosition</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>78f1e51a58f4b5f23cc7442626ec17a2</anchor>
      <arglist>(List&lt; node &gt; &amp;adjNodes, node center, double rectMin=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>pureGraph</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>042ca9b67048f8ab2508b890f68fd085</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpwards</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>063d45d2d511cc4505ded9319a29d49d</anchor>
      <arglist>(adjEntry a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upwards</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>c4823449fde1c8b79a9aaefabcc00551</anchor>
      <arglist>(adjEntry a) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>063b46fc3f02c7c7117bae769beb43df</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>3c0b14589ed3c3c4f9692e0faadf7ea0</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustHierarchyParents</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>dd51261ecd891d2f59041b0948c4d971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortEdgesFromLayout</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>01d4c504e3eede1c8fa303b7ed04b122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReplacement</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>38e4ce513bca83c4d36b0a2ddc0e7b6c</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; node &gt; &amp;</type>
      <name>centerNodes</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>430dbd7611a9bdc976b334fb74c70a1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultCliqueCenterSize</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>f6f4402c8024c5ab4b7c34218fd9c246</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultCliqueCenterSize</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>59c6d4076dfdab0dfe58697b146be845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; AssociationClass * &gt; &amp;</type>
      <name>assClassList</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>9a284224c1d3d3a35dc26a6404e73a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AssociationClass *</type>
      <name>assClass</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>5559f01d5be3242c1c4cf495dbf58014</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>createAssociationClass</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>5faffcd4154cb0f00be49ebcc0699ec6</anchor>
      <arglist>(edge e, double width=1.0, double height=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>modelAssociationClasses</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>1a0febda2810aff2c6b8aea8987e8029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>modelAssociationClass</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>cbd75e152a891c8447d045550d1aba27</anchor>
      <arglist>(AssociationClass *ac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undoAssociationClasses</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>6a65714c6fc13b544abd087d95f0ff4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undoAssociationClass</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>74b5434ce1c313a633a9017a6ddf88bd</anchor>
      <arglist>(AssociationClass *ac)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>replaceByStar</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>3073b84dd2d3beb61ed86848172c8325</anchor>
      <arglist>(List&lt; node &gt; &amp;clique, NodeArray&lt; int &gt; &amp;cliqueNum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DRect</type>
      <name>circularBound</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>d1b4ecd8be71552f6ba22c560f36dece</anchor>
      <arglist>(node center)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph *</type>
      <name>m_pG</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>b8638021a5f9def664aae1e5916aebe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_cliqueCenterSize</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>6bdf513bd22cef6151a4d1874be117d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; edge &gt;</type>
      <name>m_mergeEdges</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>101ea8b2bb1566fd23158cd60ced88dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; node &gt;</type>
      <name>m_centerNodes</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>9698cb0ea606e2e592ea31469fba3c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_replacementEdge</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>c5ce8844e5142309cfde8974ee2dae35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; DRect &gt;</type>
      <name>m_cliqueCircleSize</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>01f788db0c24db279c616982ba1874da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; DPoint &gt;</type>
      <name>m_cliqueCirclePos</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>3be502ee5a168adddfefba26b54fc5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; AssociationClass * &gt;</type>
      <name>m_assClassList</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>41b03d2f824645c9f85b66b09c6db120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; AssociationClass * &gt;</type>
      <name>m_assClass</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>144384c334830b159ce31e8dfc165609</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; node &gt;</type>
      <name>m_associationClassModel</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>0d05dcc015639f94a5a66e9b3c0b7fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; bool &gt;</type>
      <name>m_upwardEdge</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>4b5bae662485c8901700564211b6d258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_hierarchyParent</name>
      <anchorfile>classogdf_1_1_u_m_l_graph.html</anchorfile>
      <anchor>87d9c9f3c9583514672e488f70b0faf7</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ogdf::UMLGraph::AssociationClass</class>
    <class kind="class">ogdf::UMLGraph::CliqueInfo</class>
  </compound>
  <compound kind="class">
    <name>ogdf::UMLGraph::AssociationClass</name>
    <filename>classogdf_1_1_u_m_l_graph_1_1_association_class.html</filename>
    <member kind="function">
      <type></type>
      <name>AssociationClass</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_association_class.html</anchorfile>
      <anchor>ffe15cdf95dff8d37a43a57d781e98eb</anchor>
      <arglist>(edge e, double width=1.0, double height=1.0, double x=0.0, double y=0.0)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_width</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_association_class.html</anchorfile>
      <anchor>240845aedd0907ade64bafd350dbeb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_height</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_association_class.html</anchorfile>
      <anchor>c9dda33590da3f0b8cdef02663635608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_association_class.html</anchorfile>
      <anchor>743cd6777ddd71fc7eda871cf664746d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_association_class.html</anchorfile>
      <anchor>e7d446ba8d43e93121e4ea99aa80d949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>edge</type>
      <name>m_edge</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_association_class.html</anchorfile>
      <anchor>d4dca112dc3bc09bbf3d931d33a5b361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_node</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_association_class.html</anchorfile>
      <anchor>8b94b01e91a8ece66a613ff83f726a64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::UMLGraph::CliqueInfo</name>
    <filename>classogdf_1_1_u_m_l_graph_1_1_clique_info.html</filename>
    <member kind="function">
      <type></type>
      <name>CliqueInfo</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_clique_info.html</anchorfile>
      <anchor>e05923a91c54bc0a5abf10031d64566a</anchor>
      <arglist>(node v, int i)</arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_target</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_clique_info.html</anchorfile>
      <anchor>81a7d9bde03cb5d40a27c527027afd89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_edgeIndex</name>
      <anchorfile>classogdf_1_1_u_m_l_graph_1_1_clique_info.html</anchorfile>
      <anchor>c616df4c3e90a2227f9b466fc4ba52fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CconnectClusterPlanar</name>
    <filename>classogdf_1_1_cconnect_cluster_planar.html</filename>
    <member kind="enumeration">
      <name>ccErrorCode</name>
      <anchor>207d64d4955906f30709ba36d18493db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchor>207d64d4955906f30709ba36d18493db0ee4ff6055835e45178bb692d68a9b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonConnected</name>
      <anchor>207d64d4955906f30709ba36d18493db2ad8f25b1a273c5ebb9cc14e3d8df2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonCConnected</name>
      <anchor>207d64d4955906f30709ba36d18493db7c1c092665c3de18101ed470afd5d0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonPlanar</name>
      <anchor>207d64d4955906f30709ba36d18493db1fb49cb7caaf5e5bf66dd3c063463fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonCPlanar</name>
      <anchor>207d64d4955906f30709ba36d18493db734b43db12f2b9a7eb95b9c31b3d3321</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ccErrorCode</type>
      <name>errCode</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>3153f341345c349704ce9fdb5ddb23b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CconnectClusterPlanar</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>7c5fc7e1de5044a489ebc41d2714180a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CconnectClusterPlanar</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>87a5dccdcaf59759ff13f32d55927240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>64ceeb1d25a12830d74b414add156ba1</anchor>
      <arglist>(ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>4458c954b5ef15e51d7e2e1d90c7ed7e</anchor>
      <arglist>(ClusterGraph &amp;C, char(&amp;code)[124])</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>83226fac880e033d09d32c77fea4c442</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>planarityTest</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>5d744667e2b8adfc2c55db15baf58a84</anchor>
      <arglist>(ClusterGraph &amp;C, cluster &amp;act, Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>preProcess</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>0cb6c28fd2b5704d13d26d2f047ecd71</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>preparation</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>09f9add18ba5b109c55a7d76fee8a2da</anchor>
      <arglist>(Graph &amp;G, cluster &amp;C, node superSink)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doTest</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>6ebdcecddd678ef7058e1e34f999fdc4</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; int &gt; &amp;numbering, cluster &amp;cl, node superSink, EdgeArray&lt; edge &gt; &amp;edgeTable)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareParallelEdges</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>b0a67515460b830d0b82e469ee631dd5</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>constructWheelGraph</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>321d70caffb5be18c2bae58de260c305</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G, cluster &amp;parent, PlanarPQTree *T, EdgeArray&lt; node &gt; &amp;outgoingTable)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; ListPure&lt; edge &gt; &gt;</type>
      <name>m_parallelEdges</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>42450c25fb77145b3f21e60d14703cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_isParallel</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>d9c85962bce92a9c50336641eee4e64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; PlanarPQTree * &gt;</type>
      <name>m_clusterPQTree</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>a6aaeb9c878f5a4f48c0b84cc980e87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_parallelCount</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>ecd2590f47f6e12013a1a5de73881ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>errorCode</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>7f98ae4f43337711c396985627b71757</anchor>
      <arglist>[124]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ccErrorCode</type>
      <name>m_errorCode</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar.html</anchorfile>
      <anchor>8a6c0c9fafb0e98ac76af3b97f53f352</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CconnectClusterPlanarEmbed</name>
    <filename>classogdf_1_1_cconnect_cluster_planar_embed.html</filename>
    <member kind="enumeration">
      <name>ccErrorCode</name>
      <anchor>3fe0adb62d2447c47d23749ed72e6650</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchor>3fe0adb62d2447c47d23749ed72e66500e56abd10c9aa1c014ca799b5d4fb8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonConnected</name>
      <anchor>3fe0adb62d2447c47d23749ed72e6650738dc5ad28c061464472d471e3c6a370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonCConnected</name>
      <anchor>3fe0adb62d2447c47d23749ed72e6650d44666cf52dbd6afc5a78d757e8d1058</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonPlanar</name>
      <anchor>3fe0adb62d2447c47d23749ed72e6650f321b0afcf160582a2c63ea621e2bf5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonCPlanar</name>
      <anchor>3fe0adb62d2447c47d23749ed72e66504f6246458838239bf0ab0a63ee393b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ccErrorCode</type>
      <name>errCode</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>8c6684903101457453a59d006991f605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CconnectClusterPlanarEmbed</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>b3be8218470c88ac18f1ff1ebc10d41d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CconnectClusterPlanarEmbed</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>f331e341a06a08bab78eb6b9adf59eb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>47497bab5325159e4bc28d3795ea30c5</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>91e4c5288942c59cd99ccfe511e9483e</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G, char(&amp;code)[124])</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>planarityTest</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>455c3bdfcdce196f622184df4cad73c4</anchor>
      <arglist>(ClusterGraph &amp;C, cluster &amp;act, Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>preProcess</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>adb0d5593c7adef36ae69f16157bf50f</anchor>
      <arglist>(ClusterGraph &amp;Ccopy, Graph &amp;Gcopy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>preparation</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>2e44dd12304d5ac48ff5f9010a066740</anchor>
      <arglist>(Graph &amp;subGraph, cluster &amp;origCluster, node superSink)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doEmbed</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>4e70bf65987b5d1945e1af6918a66776</anchor>
      <arglist>(Graph *biconComp, NodeArray&lt; int &gt; &amp;numbering, cluster &amp;origCluster, node superSink, Graph &amp;subGraph, EdgeArray&lt; edge &gt; &amp;tableEdgesBiComp2SubGraph, EdgeArray&lt; edge &gt; &amp;tableEdgesSubGraph2BiComp, NodeArray&lt; node &gt; &amp;tableNodesBiComp2SubGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>entireEmbed</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>e3aa5a9d9dff07eaac41e0839574a25d</anchor>
      <arglist>(Graph &amp;biconComp, NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;entireEmbedding, NodeArray&lt; SListIterator&lt; adjEntry &gt; &gt; &amp;adjMarker, NodeArray&lt; bool &gt; &amp;mark, node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>recursiveEmbed</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>edb4977b8793fb8b8e3e2bb2e103a491</anchor>
      <arglist>(ClusterGraph &amp;Ccopy, Graph &amp;Gcopy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareParallelEdges</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>a0407ec9eae665be7462fde1c95c97d6</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>constructWheelGraph</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>534f5bccfab883a465bfea1ef9ad2bdd</anchor>
      <arglist>(ClusterGraph &amp;C, Graph &amp;G, cluster &amp;parent, cluster &amp;origCl, EmbedPQTree *T, EdgeArray&lt; node &gt; &amp;outgoingTable, node superSink)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>hubControl</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>3edf270cad412d68c1620fa43762277d</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; bool &gt; &amp;hubs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>nonPlanarCleanup</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>625a36b800f89f5730c91ec82cb09db6</anchor>
      <arglist>(ClusterGraph &amp;Ccopy, Graph &amp;Gcopy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copyEmbedding</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>0752243abdd9ead6134f5ef95df46774</anchor>
      <arglist>(ClusterGraph &amp;Ccopy, Graph &amp;Gcopy, ClusterGraph &amp;C, Graph &amp;G)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; EmbedPQTree * &gt;</type>
      <name>m_clusterPQTree</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>95fd3001186e332f99bffb7f6fb848f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ccErrorCode</type>
      <name>m_errorCode</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>3ab99921502cb3dab9f03ebf72a95981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>errorCode</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>7068daeb6585eaed2b586cb26ba9d2b1</anchor>
      <arglist>[124]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; ListPure&lt; edge &gt; &gt;</type>
      <name>m_parallelEdges</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>26e441f5e5cc75325ce480a58c4cbd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_isParallel</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>f5c52a5b4e2dacda8ab0f11eff1e4dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_parallelCount</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>5b6f32dd44f9bc6ddd11ad4aa5e20c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterGraph *</type>
      <name>m_instance</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>bc754fae162fe1eaacb9caebe41205ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; * &gt;</type>
      <name>m_clusterEmbedding</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>a0ecc9b6ec6bfb9517f7e6ba11fd6264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; Graph * &gt;</type>
      <name>m_clusterSubgraph</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>a14b29290e77a45b81ff1105c3cfdddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; NodeArray&lt; bool &gt; * &gt;</type>
      <name>m_clusterSubgraphHubs</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>888e686ac160947f88ebbcb2d0cb28ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; NodeArray&lt; cluster &gt; * &gt;</type>
      <name>m_clusterSubgraphWheelGraph</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>b77e0167ecb7247e9016471a50228f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; NodeArray&lt; node &gt; * &gt;</type>
      <name>m_clusterNodeTableNew2Orig</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>b9df1b3bda3b5017c573eab36d392adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; ClusterGraph * &gt;</type>
      <name>m_clusterClusterGraph</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>c0bb603cbd5261d68aca43e41b084c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; ClusterArray&lt; cluster &gt; * &gt;</type>
      <name>m_clusterClusterTableOrig2New</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>f53149a36f9185a44599c2d0d1f25bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; cluster &gt;</type>
      <name>m_wheelGraphNodes</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>91f8a9e1a0a93d427a39de3cf52ca5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_currentHubs</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>aeda18c5c25d12ab22158b2aae22c02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; cluster &gt;</type>
      <name>m_clusterTableCopy2Orig</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>5509d1382cc7239553b92ea0605ab60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; cluster &gt;</type>
      <name>m_clusterTableOrig2Copy</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>5aeaebf195694377acb54e218ed45e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; node &gt;</type>
      <name>m_clusterSuperSink</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>a45abc3f0d74b04ccc0abb415cf8ddea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_nodeTableCopy2Orig</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>6509982db32e2b1cdea81bab889f4b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_nodeTableOrig2Copy</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>39ec8cd9d5dc7ddb3754d41bacd48dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; Stack&lt; edge &gt; * &gt;</type>
      <name>m_outgoingEdgesAnker</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>ed1d62c4604b46cab80dc40ea3baaf3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; EdgeArray&lt; Stack&lt; edge &gt; * &gt; * &gt;</type>
      <name>m_clusterOutgoingEdgesAnker</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>64165e67f8b4746e98b3e7a3917d9b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; ClusterPQContainer &gt;</type>
      <name>m_clusterPQContainer</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>627375ebd6042c147765bf1f5c9c980c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Stack&lt; cluster &gt;</type>
      <name>m_callStack</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>4a55705b4e5d19bd2307e223a80c7495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; bool &gt;</type>
      <name>m_unsatisfiedCluster</name>
      <anchorfile>classogdf_1_1_cconnect_cluster_planar_embed.html</anchorfile>
      <anchor>f3af71ca01a564299a8b7fbfd1edebed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterArrayBase</name>
    <filename>classogdf_1_1_cluster_array_base.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterArrayBase</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>b802a7a939fb8274df368368a9c4efc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterArrayBase</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>d99684a04b96e143fabb6fa87e725785</anchor>
      <arglist>(const ClusterGraph *pC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterArrayBase</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>5f5d7a42ea5fcfeaf5832e3a31de2137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>6f64d1d4e27434bbfdeb2aa26130c846</anchor>
      <arglist>(int newTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>1819eec038032bf0ea29420f4b28113e</anchor>
      <arglist>(int initTableSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>e1102d92e04359251fa6d9e25703684c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reregister</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>77934601ff7b5031db79959d775bd76f</anchor>
      <arglist>(const ClusterGraph *pC)</arglist>
    </member>
    <member kind="variable">
      <type>const ClusterGraph *</type>
      <name>m_pClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>7e7de0b8d197b509dd9db374ff191d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; ClusterArrayBase * &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_cluster_array_base.html</anchorfile>
      <anchor>39550bdfe27be6befc78e917f37947d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterArray</name>
    <filename>classogdf_1_1_cluster_array.html</filename>
    <templarg>T</templarg>
    <base protection="private">ogdf::Array&lt; T &gt;</base>
    <base protection="protected">ogdf::ClusterArrayBase</base>
    <member kind="function">
      <type></type>
      <name>ClusterArray</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>7cfe1c852dfdab24379afca50602a586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterArray</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>274ec35c33b54a929814c401c9cd7de4</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterArray</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>426075c9538b74a9d37ea7333d0769e3</anchor>
      <arglist>(const ClusterGraph &amp;C, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterArray</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>5cbcc70312aca2a12bc1c0a0a8ff66f4</anchor>
      <arglist>(const ClusterArray&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>2495733d00a416aee7f16b14c47aad78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraph *</type>
      <name>graphOf</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>9a5cdba5216a85b758ae28c829a4120f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>1ba4e481c81a84bf2471f64df5a6ff92</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>2c98b7f3aca98cc66d9ff175488e60c3</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>25162ce86b5823111a459bc197c0d0fb</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>7e080c28a2b1a899c945d23032cf7085</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>ClusterArray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>04329c51169d22113abd7cdfa90b9a51</anchor>
      <arglist>(const ClusterArray&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>d69ffafa14770a5539003ee7d947c85a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>e5c03d026a7da00adabdc146c6e6c39c</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>89f1fcacfd496b21fffdc2568edc4b25</anchor>
      <arglist>(const ClusterGraph &amp;C, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>c141e11d7dcd4ab996c7b70a5f26741e</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>8db11fab1b7068e5bc86f8640eaeaa79</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>e018a023436e9ed417b65b4d8044dc03</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>a10be58325965ba1ebfa108ad7d1c320</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>enlargeTable</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>14152d2af48ce7d89e0bf48ffb1fd610</anchor>
      <arglist>(int newTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>reinit</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>fa5398d8d980a09091f0985e5bd7b880</anchor>
      <arglist>(int initTableSize)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnect</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>7ebf290b4efc1cca3245b8e06283f72d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_cluster_array.html</anchorfile>
      <anchor>11571d4e51521dfa2c9a1ca6d3a19a28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterElement</name>
    <filename>classogdf_1_1_cluster_element.html</filename>
    <base protection="private">ogdf::GraphElement</base>
    <member kind="function">
      <type></type>
      <name>ClusterElement</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>cd70ad540524c916f636ef33d73b239e</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>69c0d2e16bdf8e0bb3ab661b4232133a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>depth</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>fb7ba9986c30f2e9dc60248ce8c3aabc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>depth</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>e8f1c1f30d389099600094e50455d4e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ClusterElement *</type>
      <name>succ</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>c395da7a891f1c7caaf271e5229120f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ClusterElement *</type>
      <name>pred</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>1ba62a831d3879577efafee6843a5179</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ClusterElement *</type>
      <name>pSucc</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>081850b055349b2c6f26bac4f0de9840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ClusterElement *</type>
      <name>pPred</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>5c4f1ce03e04aa39cdf83020f7820907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; ClusterElement * &gt;</type>
      <name>cBegin</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>0c6f4dea92223f2e67b7a8d4666de808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; ClusterElement * &gt;</type>
      <name>crBegin</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>97b407cebba7af5772f66916eba54690</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cCount</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>65058b287153bc913e592de040836cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; node &gt;</type>
      <name>nBegin</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>52e16653aa5016e6e89a3e82055d7863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; node &gt;</type>
      <name>nBegin</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>ffa36552087cac222fc75157aa9ed089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nCount</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>d23e566ee888e2ac8dfca1251e57f415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ClusterElement *</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>bdcd5f4e0322ae26b7287a4b189990e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; adjEntry &gt;</type>
      <name>firstAdj</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>91fc75e9c19d751a4cc6d6b371a9763c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; adjEntry &gt;</type>
      <name>firstAdj</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>2fcd635a9cc65b6823c37f691c7665a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; adjEntry &gt;</type>
      <name>lastAdj</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>a028c963172c512ea40b7d5e99d17d9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; adjEntry &gt;</type>
      <name>lastAdj</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>6aed136a024694f7ee509409fc7feca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getClusterNodes</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>2121af6cc3fb4d7e66f38d7a89201266</anchor>
      <arglist>(List&lt; node &gt; &amp;clusterNodes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>068600212c1624d0c43b7ec562c5af72</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>c65e7bd31810c07caa9567abea77044c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>2357e799756005dc637f9b508f79afc9</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>ad26143438457a2e319723141884c3f8</anchor>
      <arglist>(List&lt; node &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>List&lt; ClusterElement * &gt; &amp;</type>
      <name>getChildren</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>8c43f8136c5a156e8a3088f867cfc812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>List&lt; node &gt; &amp;</type>
      <name>getNodes</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>f86869e0e09d975f7f2f5bc97a64984d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getClusterInducedNodes</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>d86288c790deedbbb73487e7ee730d32</anchor>
      <arglist>(List&lt; node &gt; &amp;clusterNodes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_id</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>788cd068b451eee1d6023e45c46adc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_depth</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>382762e5b1553daaca3858a8701178d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_entries</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>393b797126f64b21b1d9d16c2f103b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; ClusterElement * &gt;</type>
      <name>m_children</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>bbd98f02580a1b29e0b7989f967ee378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterElement *</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>cfa96e75bb16268ba22ebb0624f89f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterElement *</type>
      <name>m_pPrev</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>945e4c1125af3382eef298a62d3b9b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterElement *</type>
      <name>m_pNext</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>0ad9b977aa80fb8bfc7fa45961759263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; ClusterElement * &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>e3be060231b91791c1dee64b0cbf7960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; adjEntry &gt;</type>
      <name>m_adjEntries</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>1e1782779cd902b0f6a067d4aadb2405</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>2fc1b467e32d321f4f4cc2644bd228fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GraphList&lt; ClusterElement &gt;</name>
      <anchorfile>classogdf_1_1_cluster_element.html</anchorfile>
      <anchor>d930a08978cf49c7135438d7063d62fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterGraph</name>
    <filename>classogdf_1_1_cluster_graph.html</filename>
    <base>ogdf::GraphObserver</base>
    <member kind="function">
      <type></type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d99c6325d500133f14c6cb6436997fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>7896a63c18445fb6d8c46c546474c34c</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>e67663fdc0dad43d3624e99729733dbf</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>5cf3e86e4951cee372a3ac98222766a8</anchor>
      <arglist>(const ClusterGraph &amp;C, Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>943547566072563d260a5e8b91ee7c97</anchor>
      <arglist>(const ClusterGraph &amp;C, Graph &amp;G, ClusterArray&lt; cluster &gt; &amp;originalClusterTable, NodeArray&lt; node &gt; &amp;originalNodeTable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>738570933570cf8a790c02fbdfea0151</anchor>
      <arglist>(const ClusterGraph &amp;C, Graph &amp;G, ClusterArray&lt; cluster &gt; &amp;originalClusterTable, NodeArray&lt; node &gt; &amp;originalNodeTable, EdgeArray&lt; edge &gt; &amp;edgeCopy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>b501970a003e6774206254e444a445bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxClusterIndex</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>c7447d56ef5a37da08009f71a881997e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>f632017aa52ace5a15edb526a62452b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>semiClear</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>a0583d0bcd64fddb0e329098d85a0a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>b5b9e757fa117a0a39f2819938a7ca64</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Graph &amp;</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>906e319a09c0a5382fc60fe5da7716cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ClusterGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>4d4a85c4d955e9463d11cbccf4f4258e</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearClusterTree</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d022e01240c9983e91e10c67b9402eac</anchor>
      <arglist>(cluster C)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>dcc1a6ebcba8a277a941d64a77deb7b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>newCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>0a99065c8dd5e5fa32ecb866111e87d5</anchor>
      <arglist>(cluster parent, int id=-1)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>createEmptyCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>05b2712668a2f205e8313247e0d98afb</anchor>
      <arglist>(const cluster parent=0, int clusterId=-1)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>createCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>671ecddee7033023ebbe2e771ceb24d9</anchor>
      <arglist>(SList&lt; node &gt; &amp;nodes, const cluster parent=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>b1f99be674a750f18469d0dda665f9be</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>rootCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>cc1c79839c42d6b31526c40c12320958</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>clusterOf</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>456bcb09f01a81c7daba6b2191d098d4</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfClusters</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>f714b0966636267b0937dc382949232d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clusterIdCount</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>f3054cf71719465f691295e82a8a5f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clusterArrayTableSize</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>155425c27a49ff8dd064edf6b43cc0d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d044e300e00d611b0ba1f4c88435c505</anchor>
      <arglist>(cluster c, cluster newParent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reassignNode</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>442d75d2941c48b822abf40c5845f7f0</anchor>
      <arglist>(node v, cluster c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reInit</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>6c554dd138c5582d5eee9b2e3ceec1c3</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateDepth</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>048afe01ee10cca81f9b7d81f61375ed</anchor>
      <arglist>(bool b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pullUpSubTree</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>03a084203d0ee73493d5fb4e2713c661</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>treeDepth</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>1d66476b0a5d655d82b1747cdc516402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSubTreeDepth</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>f71934a3a1ad810cc3879f3bd3710455</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>clusterDepth</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>5b4db27ee1d23afefaf62a7cc893451f</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>commonCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>2aaa7cff93af43768ab5739a8aceee1c</anchor>
      <arglist>(SList&lt; node &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>commonCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>044998b1f0e4e7ff27cf6b7dad5f7e79</anchor>
      <arglist>(node v, node w) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>commonClusterLastAncestors</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>87d00f3bb8f1b5b5bf9162b640b5a528</anchor>
      <arglist>(node v, node w, cluster &amp;c1, cluster &amp;c2) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>commonClusterPath</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>4426ba430e3c1499e43a5fa4abe1bd6a</anchor>
      <arglist>(node v, node w, List&lt; cluster &gt; &amp;eL) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>commonClusterAncestorsPath</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>6055cc7a254e655741d59aa684a10f96</anchor>
      <arglist>(node v, node w, cluster &amp;c1, cluster &amp;c2, List&lt; cluster &gt; &amp;eL) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; ClusterArrayBase * &gt;</type>
      <name>registerArray</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>8a4568df89dd5901e1092248a6f7cfb7</anchor>
      <arglist>(ClusterArrayBase *pClusterArray) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterArray</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>6275198b5b448c1e0ba7e0b33af21a37</anchor>
      <arglist>(ListIterator&lt; ClusterArrayBase * &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; ClusterGraphObserver * &gt;</type>
      <name>registerObserver</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d258f330c2d46e63c47745968b263e0a</anchor>
      <arglist>(ClusterGraphObserver *pObserver) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObserver</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>8bb370e2d77f79585198c9b38828c33d</anchor>
      <arglist>(ListIterator&lt; ClusterGraphObserver * &gt; it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emptyClusters</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>058ffd36eee49341551ce3666844369f</anchor>
      <arglist>(SList&lt; cluster &gt; &amp;emptyCluster, SList&lt; cluster &gt; *checkCluster=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyOnNodeDelete</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>93e69887298b85cfe4748ceeee72eae7</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyOnClusterDelete</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>5ddfc7910dc7811357de8389d204e1d3</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>firstCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>380d123b0b4a4611b478b47898ec2816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>lastCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>a46027564111a346f0e9c4a63ac06d41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>firstPostOrderCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>1b29cb346af7b34e4dc28a82edb9043a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allNodes</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>74a91bf2afddd89f35291807738eca25</anchor>
      <arglist>(CLUSTERLIST &amp;clusters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collaps</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d4807e89ea83cc9edc30bee4a30f5511</anchor>
      <arglist>(NODELIST &amp;nodes, Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjEdges</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>10aca4b7bc035841c95e224ddea97634</anchor>
      <arglist>(cluster c, EDGELIST &amp;edges) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjEntries</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>8842970210a3065177157e530cffa563</anchor>
      <arglist>(cluster c, ADJLIST &amp;entries) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAdjEntries</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>6b7276a1ab530952e522cf2aac1631b5</anchor>
      <arglist>(cluster c, LISTITERATOR start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d8b5562692fa49554c98653f6b887b7a</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>85b0f7f9e7cf014445b56691461c4770</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>e077a84904b7fe5ca566dc321b704671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>representsCombEmbedding</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>bc4b7b806f6ee68c6cf21d40ed58f54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjAvailable</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>3a6b7940450210c059a91ceda2657b2c</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cluster</type>
      <name>doCreateCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>fcbd3276534d0629941d70b2698a3a9a</anchor>
      <arglist>(SList&lt; node &gt; &amp;nodes, const cluster parent, int clusterId=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cluster</type>
      <name>doCreateCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>0f5eda422af4e1a1443db56b30084ed4</anchor>
      <arglist>(SList&lt; node &gt; &amp;nodes, SList&lt; cluster &gt; &amp;emptyCluster, const cluster parent, int clusterId=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyLCA</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d4976e6162669b28e8bc527652fc8d5d</anchor>
      <arglist>(const ClusterGraph &amp;C, ClusterArray&lt; cluster &gt; *clusterCopy=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePostOrder</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>6f634a2ed1d7298708fdf57d6776b0e1</anchor>
      <arglist>(cluster c, cluster oldParent, cluster newParent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cluster</type>
      <name>postOrderPredecessor</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>94c1ce35597ab958712190c9462cce3d</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cluster</type>
      <name>leftMostCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d25e24624af93bed795e1310118c8c0c</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>nodeDeleted</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>770529585d5d73f6f584fdada91395c4</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>nodeAdded</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>4bc01ba657b536c52813e541c09e0114</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>edgeDeleted</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>f6931248709645cdb35ad7b45277b1a6</anchor>
      <arglist>(edge)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>edgeAdded</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>b46d0f29b0fc6c392e85981b12135eab</anchor>
      <arglist>(edge)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reInit</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>c61922fdb44c242817d5911c54396393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>cleared</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>61324dfacb555fa69ed069c214791295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClusterArray&lt; int &gt; *</type>
      <name>m_lcaSearch</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>4d9373d947fcabbce0489e82a9586a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_lcaNumber</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>94d07c47c981188ea0ae06f81f88685c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClusterArray&lt; cluster &gt; *</type>
      <name>m_vAncestor</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>dd14d3d543e48eb49c58fb44b1114dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClusterArray&lt; cluster &gt; *</type>
      <name>m_wAncestor</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>36c79a793a9d40efe1cda65006fa00a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_updateDepth</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>0e8abd819b4bfbc37a86f69bd3cc0f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_depthUpToDate</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>6ae1705c29440f1d02b68aa628231672</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assignNode</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>fce97c7ef3fc40538bfcbcbb3eb1ce5d</anchor>
      <arglist>(node v, cluster C)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unassignNode</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>77c8ca0adb3750ccd78d4710db7cc91e</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeNodeAssignment</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>8e2732aed6da0a6f8b1cbf0a572b5e23</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>shallowCopy</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>166c1970e626896231606353a7c11af3</anchor>
      <arglist>(const ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deepCopy</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>78701495a508475e100b4941b744c6e0</anchor>
      <arglist>(const ClusterGraph &amp;C, Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deepCopy</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>fa6a071088ae022dd0c01f457ed4b8d4</anchor>
      <arglist>(const ClusterGraph &amp;C, Graph &amp;G, ClusterArray&lt; cluster &gt; &amp;originalClusterTable, NodeArray&lt; node &gt; &amp;originalNodeTable)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deepCopy</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d426bba0f6d4d67e8f2e0c36e8295aa2</anchor>
      <arglist>(const ClusterGraph &amp;C, Graph &amp;G, ClusterArray&lt; cluster &gt; &amp;originalClusterTable, NodeArray&lt; node &gt; &amp;originalNodeTable, EdgeArray&lt; edge &gt; &amp;edgeCopy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clearClusterTree</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>f5d5da35f2c25efea6cf796dd73078ee</anchor>
      <arglist>(cluster c, List&lt; node &gt; &amp;attached)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>38de9a66fc50f18b6210081defe621ae</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reinitGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>9046897ca9b15d85d6700813e975824f</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>cluster</type>
      <name>newCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>d61926cc073c00b5bcaddaa24049f15f</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>cluster</type>
      <name>newCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>94830e81c960347888b93e88171268f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>postOrder</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>6ce4d47e2f335f9641283482ebe5fec6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkPostOrder</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>88cf9b353fd8af12a0306376b3a9ea07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>postOrder</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>8dc75d7410b28ebf8e2fbb23559f6b07</anchor>
      <arglist>(cluster c, SListPure&lt; cluster &gt; &amp;S) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reinitArrays</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>7015ccff4fb74219afefec994a77403e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>0e0c39fb707ffb2630af6d9942e1d8ea</anchor>
      <arglist>(ostream &amp;os, NodeArray&lt; int &gt; &amp;nId, ClusterArray&lt; int &gt; &amp;cId, int &amp;nextId, cluster c, String ttt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeGraphWinCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>5d3bfdc563bc5df81442546053b4765c</anchor>
      <arglist>(ostream &amp;os, NodeArray&lt; int &gt; &amp;nId, NodeArray&lt; String &gt; &amp;nStr, ClusterArray&lt; int &gt; &amp;cId, ClusterArray&lt; String &gt; &amp;cStr, int &amp;nextId, cluster c, String ttt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphList&lt; ClusterElement &gt;</type>
      <name>m_clusters</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>8d4943fda979b1efc7c87a7514a3d02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>ba1a44edbcd73c9b405e30f756c4ab92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nClusters</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>918cc419a9d40e35af0d58d284175821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_clusterIdCount</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>03f9d36bf5bbcd47c9e18a2d13feed5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_clusterArrayTableSize</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>e2f2c9e14a454d3a9bf1134b97c8760c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cluster</type>
      <name>m_postOrderStart</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>2814d7a2ea648a4ce94b26429c75dbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cluster</type>
      <name>m_rootCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>c21f8239a9751fdf34881b1777671f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_adjAvailable</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>28f32daafa958fdf63ffd85352932238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_allowEmptyClusters</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>4b026696b6c179176db503deed87651e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; cluster &gt;</type>
      <name>m_nodeMap</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>93457359c5d274ca60570bdfa1130eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_itMap</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>0c546de2a1ae6d9c2feefcab84edfd22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; ClusterArrayBase * &gt;</type>
      <name>m_regClusterArrays</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>231e4e962ce88efe86bf96f8ab05ee84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; ClusterGraphObserver * &gt;</type>
      <name>m_regObservers</name>
      <anchorfile>classogdf_1_1_cluster_graph.html</anchorfile>
      <anchor>bd49e5cef01e63c4a8e01a36c21e674a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterInfo</name>
    <filename>classogdf_1_1_cluster_info.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterInfo</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>d5a846537efefde402fa728293b6148a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>2f69eac34e9454c873a2b441c500d05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>96cd4f9a6b558bbe95c0f8e1a792cbcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_w</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>863eb55877049695dc72a4511a8ed63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_h</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>f93ef3ab9c62068873a99489040f412b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_lineWidth</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>cb60bb544e28c4984a9e2df7027f93c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>m_color</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>71b70323a79bf84bb729519c6f9bfd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>m_fillColor</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>3248e2e7a7ead394b47b21eb9ac20769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>m_backColor</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>d49f88363ff280de420330152e63e873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GraphAttributes::EdgeStyle</type>
      <name>m_lineStyle</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>0328e80aa870e15cba905cabebe20572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GraphAttributes::BrushPattern</type>
      <name>m_fillPattern</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>baeaab4ee1a4630ad49d73460a3d01b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>m_label</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>d504cc3f29953ca34a546a16b0864ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_clusterID</name>
      <anchorfile>classogdf_1_1_cluster_info.html</anchorfile>
      <anchor>51c83bfa1ccb3989c9cb8056ff70089f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterGraphAttributes</name>
    <filename>classogdf_1_1_cluster_graph_attributes.html</filename>
    <base>ogdf::GraphAttributes</base>
    <member kind="function">
      <type></type>
      <name>ClusterGraphAttributes</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>76bec458c934680782ff326ed62ea2be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraphAttributes</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>de0a7e5f2b2b00377731c350a8a92f21</anchor>
      <arglist>(ClusterGraph &amp;cg, long initAttributes=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterGraphAttributes</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>da4648fdd6d1ce22f8b9c7a8049d6b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>84265cdb63dd7c5e7f213d3264ee68e1</anchor>
      <arglist>(ClusterGraph &amp;cg, long initAttributes=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initAtt</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>78c9aacb99e4883f26a8ea13ad8d3e00</anchor>
      <arglist>(long initAttributes=0)</arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraph &amp;</type>
      <name>constClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>d70bd3e566818da1363b1a57ef7e55c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clusterID</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>73af24ac1b3b34ae68a1170facbb2c99</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>clusterOf</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>93060c91eeca94d054476cd59d8915be</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxClusterID</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>fafbf76dd84570336e8e312b72bd2892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterXPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>95c0c5781c3cdd3a73d7607625525a07</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterXPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>0139ea5a7a4dd45f0182d014d1c307c6</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterYPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>1a7ba45694817f5c37e41acfb97e198a</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterYPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>399a26f30b0731b99fd4494170a9fd1e</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterHeight</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>a1db68938dc339b2b17a66fe953b49b5</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterHeight</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>205c3eacf40dbb5831bfd4b215ec6e96</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>e09c3a2f0f59cf32053a40a4b1ad65ba</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>ac8af60523cfac967e67caad2a213d0b</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterLineWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>6d8c645146651ff6163623d8fcdec198</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterLineWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>cca863d9f6ac5b5a5c6231c4da8406ce</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>clusterFillColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>3b2c72a7ae8c5e25993feb19970ff4bf</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>clusterFillColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>4358c2bba9d141ad7f370436e103db9d</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>GraphAttributes::BrushPattern</type>
      <name>clusterFillPattern</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>682d3673d4c2d8d1d568f8fa7cf8e1ce</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>GraphAttributes::BrushPattern &amp;</type>
      <name>clusterFillPattern</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>db3d2a5c82fee2a676ff485a3f025851</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>clusterLabel</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>9d4431e0e36a1a2b640a0061da87e7e7</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>clusterLabel</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>f2e6b5ba266711cbdfa0e8996b32dd00</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>const ClusterInfo &amp;</type>
      <name>clusterInfo</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>14cc7a09265470d047dfa5bd303db978</anchor>
      <arglist>(int clusterID) const </arglist>
    </member>
    <member kind="function">
      <type>ClusterInfo &amp;</type>
      <name>clusterInfo</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>44d16efefa4a8a84bc52292eb99ea138</anchor>
      <arglist>(int clusterID)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterXPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>cdcf93f381fca2596256874ac3c5f6a3</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterXPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>8cf0db6e74fd95037a79493fff85a851</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterYPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>c572048f42c9dc528162ae56c1a2deaa</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterYPos</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>4494722e1d1ff52b5bdd4ffd9af515dc</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterHeight</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>db87117b22f7efe0215b2e46c4c20c02</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterHeight</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>e94bc69c575ded7fa8d4f7b73ad2de42</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clusterWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>d9c5ba3fd73090c51e38026dab21eaa7</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>f264fe64bf68834d27bb0f99a49daeb6</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>clusterLabel</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>f474b86fcee7c9c91608ffdc706712a6</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>clusterLabel</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>1377127d17d8560146442cfe2e266392</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>templateCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>3368d18e378d272cb9ef0d6d25889bea</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>templateCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>8c20f736999439418c7b3bd39c456285</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const ClusterInfo &amp;</type>
      <name>clusterInfo</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>7017602d894382f7ead3e9309045f7f3</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>ClusterInfo &amp;</type>
      <name>clusterInfo</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>ff4af2500fb4d25c8d2be41a9f485a87</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>clusterColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>6001e70ad8f17843a928f5f278774ca9</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>clusterColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>bfee764e0ee2d0fc580369aa4c350f00</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>clusterFillColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>cb219e9a056cdd350cc35ad26e4fbd9a</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>clusterFillColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>e86dbe50bea4daef191f9097f03dd0f7</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>clusterBackColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>6e3ae7fa17a0c8b6017d0d42961894e9</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>clusterBackColor</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>dcde9c8bb191d5c5be4b4facfc05af9c</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const GraphAttributes::EdgeStyle &amp;</type>
      <name>clusterLineStyle</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>e5a27606309c28bbbc9f795fe2073f42</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>GraphAttributes::EdgeStyle &amp;</type>
      <name>clusterLineStyle</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>8298bd4018942d139434a646a278e960</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const GraphAttributes::BrushPattern &amp;</type>
      <name>clusterFillPattern</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>31a9f44aca929743d55d9fb1814968bc</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>GraphAttributes::BrushPattern &amp;</type>
      <name>clusterFillPattern</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>b5804e6a484b32f8c1ab77e49ee55e7c</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>clusterLineWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>b7c42a4c9ef6f9c5719f86f12d29da19</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clusterLineWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>ed8d436144f777b40d8b542a15587e28</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusterFillPattern</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>10971e60871dc03f5d0c89f6ed497d54</anchor>
      <arglist>(cluster c, int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusterLineStyle</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>b6134d88fd36b6dac44dd9ab4d42b79a</anchor>
      <arglist>(cluster c, int i)</arglist>
    </member>
    <member kind="function">
      <type>const DRect</type>
      <name>boundingBox</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>429a1086242732cf355c83cf42912115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>ec92b249b7ad7f3cad7cd31f5db8f909</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>817d6564c4c0acc238b7187857ebe5e3</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readClusterGML</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>0e892d1585abd0a93840dc9079b8d619</anchor>
      <arglist>(const char *fileName, ClusterGraph &amp;CG, Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readClusterGML</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>34a0ba351bf1ba2925a895f1490b145a</anchor>
      <arglist>(istream &amp;is, ClusterGraph &amp;CG, Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readClusterGraphGML</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>ca8d14659e9ec2ac238964fc0bd66534</anchor>
      <arglist>(const char *fileName, ClusterGraph &amp;CG, Graph &amp;G, GmlParser &amp;gml)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readClusterGraphGML</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>f4a2f59a2ba9b42ec4a5fbffc1fa81c5</anchor>
      <arglist>(ClusterGraph &amp;CG, Graph &amp;G, GmlParser &amp;gml)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ClusterGraph *</type>
      <name>m_pClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>9ac01342e79b0157cf14faee15853408</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>cb59e7f5193832886c5ab0133c806da7</anchor>
      <arglist>(ostream &amp;os, NodeArray&lt; int &gt; &amp;nId, ClusterArray&lt; int &gt; &amp;cId, int &amp;nextId, cluster c, String indent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeGraphWinCluster</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>70aecfa1204457c0d826feec074d6877</anchor>
      <arglist>(ostream &amp;os, NodeArray&lt; int &gt; &amp;nId, int &amp;nextId, cluster c, String indent)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; String &gt;</type>
      <name>m_clusterTemplate</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>0a16ba80c2664b69e1662f22bfd144d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HashArray&lt; int, ClusterInfo &gt;</type>
      <name>m_clusterInfo</name>
      <anchorfile>classogdf_1_1_cluster_graph_attributes.html</anchorfile>
      <anchor>a844884d75cde6f9b57c18830eb9499f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterGraphCopyAttributes</name>
    <filename>classogdf_1_1_cluster_graph_copy_attributes.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterGraphCopyAttributes</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>2ffb99290ad77206b3a72f127b6921aa</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, ClusterGraphAttributes &amp;ACG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClusterGraphCopyAttributes</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>992bf16c6ffd4627852b612cb6182b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraphAttributes &amp;</type>
      <name>getClusterGraphAttributes</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>40a350f173fb0405496c475f4bd34537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWidth</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>dc7286db9793e5bf2d78d70fb0fec835</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeight</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>3430d4e8bc6956935bc0b4ff9737c4d9</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>0ce294be1a14224252672a6ec3b05882</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>f4a6fbab9ef583bee4fe63243ebeecc7</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>c4bd9fb29c7fb1d793049b3ec4d18740</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>9219154eca3900be5fec312867383708</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>9bf90fa0eb666ae2b8c123e15decb235</anchor>
      <arglist>(cluster cOrig) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>513b21d9f510eaf1094b0df181f6c22f</anchor>
      <arglist>(cluster cOrig) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusterRect</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>fea632fd085f95665a5572a6867da5a0</anchor>
      <arglist>(cluster cOrig, double left, double right, double top, double bottom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusterLeftRight</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>1c369784b3b1e1d2128eeef2e469323e</anchor>
      <arglist>(cluster cOrig, double left, double right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusterTopBottom</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>3c92f4fd528d30145f638b02afa58bb7</anchor>
      <arglist>(cluster cOrig, double top, double bottom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>a011a78ec06ce30b022fbc574be5510c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ExtendedNestingGraph *</type>
      <name>m_pH</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>dbd96e138ef5c2362788cab530809f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterGraphAttributes *</type>
      <name>m_pACG</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>13e05609e7cb453cd42229ba666cd37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>cfea12d7b2eb9c2fdb49d46232ca02d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy_attributes.html</anchorfile>
      <anchor>a3be740aa982695748256f89e85c7256</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterGraphObserver</name>
    <filename>classogdf_1_1_cluster_graph_observer.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterGraphObserver</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>cf84305daba1eba4c5b7974666782d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraphObserver</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>d539c91a28dd75a9208c95b5dbebb425</anchor>
      <arglist>(const ClusterGraph *CG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterGraphObserver</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>2ef79ae777eb40b4103603ee56fe77ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reregister</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>d72f3753d1f065f8d414d355c79de39a</anchor>
      <arglist>(const ClusterGraph *pCG)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clusterDeleted</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>a0dc4a2d5becc825ff470bef81ab982d</anchor>
      <arglist>(cluster v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clusterAdded</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>02601c18fbe17b3b298fb18e2dcb34b7</anchor>
      <arglist>(cluster v)=0</arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraph *</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>3a63d4e6d2afe19f016df6d1cbbbca42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ClusterGraph *</type>
      <name>m_pClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>3050e1710828c59d71ac20d1daf44171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListIterator&lt; ClusterGraphObserver * &gt;</type>
      <name>m_itCGList</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>ebf7e0c008242ee1668a782b74f7c0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph_observer.html</anchorfile>
      <anchor>2fc1b467e32d321f4f4cc2644bd228fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterOrthoLayout</name>
    <filename>classogdf_1_1_cluster_ortho_layout.html</filename>
    <base>ogdf::LayoutClusterPlanRepModule</base>
    <member kind="function">
      <type></type>
      <name>ClusterOrthoLayout</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>66cb26b5a459af6027510ca6ce3c880a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>86372d650aa4b4e8ab2991b957add667</anchor>
      <arglist>(ClusterPlanRep &amp;PG, adjEntry adjExternal, Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>08774c3277cdb7b358dfdc3252b8aeb8</anchor>
      <arglist>(ClusterPlanRep &amp;PG, adjEntry adjExternal, Layout &amp;drawing, List&lt; NodePair &gt; &amp;npEdges, List&lt; edge &gt; &amp;newEdges, Graph &amp;originalGraph)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>7c0e41c3bb0e344e73fc4276cb26def6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>05a4b4351efebb956d76cd78ef52d2fc</anchor>
      <arglist>(double sep)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cOverhang</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>6d1aff4d043f5d51b184b80406ea96c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cOverhang</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>1ee11f9796657348dc1257a9c86d1678</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>margin</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>fc8e8d86ee6c8548645bed57bb17abbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>margin</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>1019e51b0d5e212ee3da27c207d2cce9</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>OrthoDir</type>
      <name>preferedDir</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>c2ff2e196887eca5811198dde04c184b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preferedDir</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>161510f7201ef2ad04714340ca46a997</anchor>
      <arglist>(OrthoDir dir)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>costAssoc</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>5e0d83412a33b40e843fbe8131259241</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costAssoc</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>c197c7683d05af510aa1699457904b11</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>costGen</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>7c1c482ff8ae0e2caf6f630a59d1bfb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costGen</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>37ca19cdc2904b22a8dd5c902c3d92f7</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optionProfile</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>fcdf0a155849a00786ceafdd868a8c75</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>05a80fe3f62c956a44e113a68a0db6c9</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaling</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>a846b5a8e1544b301e706c7824031faf</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>669cb968bc08234c226a2b9bee12526e</anchor>
      <arglist>(int optionField)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>5bfab2cdd635be5bf0d8a3b79472af0a</anchor>
      <arglist>(const ClusterPlanRep &amp;PG, Layout &amp;drawing)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_separation</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>02b50884786b3da75e983499ba0b1d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_cOverhang</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>fc9d499c492bab67ab460d1590b35184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_margin</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>6c9a65f87f836aafa28c95ebb5e0edc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OrthoDir</type>
      <name>m_preferedDir</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>74af24df96e1f8e397620371961463d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_optionProfile</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>a9986d8ce3fe0905a91f6b26b6fc210f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_costAssoc</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>741d0bcaa1fbace4a2357c819971480e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_costGen</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>8cef46c934456c0b4c5435c3aeb88fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_align</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>6c0d079247c95411e9f6cbf18c3094f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_useScalingCompaction</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>7fc9493991caeebb5a4f484c8c16e09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_scalingSteps</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>1d5e70afbf7e9f8c2e4516212a17068a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_orthoStyle</name>
      <anchorfile>classogdf_1_1_cluster_ortho_layout.html</anchorfile>
      <anchor>d35bff0c5eac8ab4d4955ab108b631e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterOrthoShaper</name>
    <filename>classogdf_1_1_cluster_ortho_shaper.html</filename>
    <member kind="enumeration">
      <name>n_type</name>
      <anchor>4384bd1505d1e3953c3429427b65583e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>low</name>
      <anchor>4384bd1505d1e3953c3429427b65583ebe29c07e74b859274eebc3cd3a856a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>high</name>
      <anchor>4384bd1505d1e3953c3429427b65583e8d9bdd4511906b893bb1948d63c8fca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>inner</name>
      <anchor>4384bd1505d1e3953c3429427b65583e488f7799dcf1b88055338b18ec7544aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outer</name>
      <anchor>4384bd1505d1e3953c3429427b65583e013d744c8433466cba7d3469c68c63c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterOrthoShaper</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>f59caf27d3f032e155cf0e99fb8bda73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClusterOrthoShaper</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>01c3ae96e85a56d2caf3de770989ca13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>d77e3d7b2c6966c29327e9c6f3b8847c</anchor>
      <arglist>(ClusterPlanRep &amp;PG, CombinatorialEmbedding &amp;E, OrthoRep &amp;OR, int startBoundBendsPerEdge=0, bool fourPlanar=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>distributeEdges</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>1ffdb4986a1650a7ebbdf76a75318d56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distributeEdges</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>0f55f63e3c2533814b1ce78ef4a41ecb</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>multiAlign</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>56bd4305288c86149d146437c2807b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiAlign</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>6848c4662ea451e8674db930a2a6b60e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>traditional</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>813ab78e1fe1d61af7efc8055cf49227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traditional</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>484c672c4142b3ade8609631ce71080b</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixDegreeFourAngles</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>7b592287808c29f0bba9b2a16ecb478b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixDegreeFourAngles</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>f367a8e29e0e1a4f59fcb7681512232a</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>6968db9fe81c1b2cbaead9dd034663b7</anchor>
      <arglist>(bool al)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>354811277fcec9c30b5220ac93ef22f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bendCostTopDown</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>b8458265157cb0f93a3cb5690854e70c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clusterProgBendCost</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>58e001e1060e9474b90a1e4ddbd78348</anchor>
      <arglist>(int clDepth, int treeDepth, int pbc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clusterTradBendCost</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>b2a978ef9d25c6291b650915796ffd32</anchor>
      <arglist>(int clDepth, int treeDepth, int pbc)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setAngleBound</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>8629e63d6ec01af93acc940a0c88cf00</anchor>
      <arglist>(edge netArc, int angle, EdgeArray&lt; int &gt; &amp;lowB, EdgeArray&lt; int &gt; &amp;upB, EdgeArray&lt; edge &gt; &amp;aTwin, bool maxBound=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_distributeEdges</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>7957ba5e9668295ef13dc9e6c5c5c663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_fourPlanar</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>ee1b4ca86110c483b1f783a7e6722d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_allowLowZero</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>9a0647ca8768f2edab32283b2b1d3b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_multiAlign</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>dbbc3ec40f3ad9dd8aad629a1be6391e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_deg4free</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>40dae72cf0e93fe64e14351e065e7bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_traditional</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>7785c76ae110711ae3857482610d532e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_align</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>ea41d76cbc1a23ee847b38038b9e0a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_topToBottom</name>
      <anchorfile>classogdf_1_1_cluster_ortho_shaper.html</anchorfile>
      <anchor>f939fbbd9f0514f140ef994a10dbfb09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterPlanarizationLayout</name>
    <filename>classogdf_1_1_cluster_planarization_layout.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterPlanarizationLayout</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>e96bbebbbdcf27bc18007d262306f05a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterPlanarizationLayout</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>1d40bc6bbfe1bdd0141736979444901d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>3ab8359af60e8cc3be5b752b2391878a</anchor>
      <arglist>(Graph &amp;G, ClusterGraphAttributes &amp;acGraph, ClusterGraph &amp;cGraph, bool simpleCConnect=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>88fba350579aa9840be98c6507fb68eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>e2b7ee494dadcfa6a05b0b9601dcdbc4</anchor>
      <arglist>(double ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanarLayouter</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>b05cce406376589586478a066d1a1660</anchor>
      <arglist>(LayoutClusterPlanRepModule *pPlanarLayouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacker</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>8c845c3b61341bf6cafe13c52e3165ac</anchor>
      <arglist>(CCLayoutPackModule *pPacker)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeClusterPositions</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>7a23211a27c6a28ccb5d351808e9221b</anchor>
      <arglist>(ClusterPlanRep &amp;CP, Layout drawing, HashArray&lt; int, ClusterPosition &gt; &amp;CA)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; LayoutClusterPlanRepModule &gt;</type>
      <name>m_planarLayouter</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>32ae0b9dfa49a57beb07a3ca40c8aa31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; CCLayoutPackModule &gt;</type>
      <name>m_packer</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>907178b4c7649440fb76b1e620f2676e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>3d24cb791db7438d3b40908f5faddbe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nCrossings</name>
      <anchorfile>classogdf_1_1_cluster_planarization_layout.html</anchorfile>
      <anchor>a41bce7365d64be6200755eb270320e2</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::ClusterPlanarizationLayout::ClusterPosition</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::ClusterPlanarizationLayout::ClusterPosition</name>
    <filename>structogdf_1_1_cluster_planarization_layout_1_1_cluster_position.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>m_minx</name>
      <anchorfile>structogdf_1_1_cluster_planarization_layout_1_1_cluster_position.html</anchorfile>
      <anchor>41d546b9231a3526218c5d7f53352b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_maxx</name>
      <anchorfile>structogdf_1_1_cluster_planarization_layout_1_1_cluster_position.html</anchorfile>
      <anchor>994b16294a6f1d46d909118cc0727b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_miny</name>
      <anchorfile>structogdf_1_1_cluster_planarization_layout_1_1_cluster_position.html</anchorfile>
      <anchor>a623fb533cbc1a485568cb32ca25962b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_maxy</name>
      <anchorfile>structogdf_1_1_cluster_planarization_layout_1_1_cluster_position.html</anchorfile>
      <anchor>1b15341fe35c6d31dbd1b663bbbfa461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_width</name>
      <anchorfile>structogdf_1_1_cluster_planarization_layout_1_1_cluster_position.html</anchorfile>
      <anchor>f865a03ab86789ae46690a342978f35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_height</name>
      <anchorfile>structogdf_1_1_cluster_planarization_layout_1_1_cluster_position.html</anchorfile>
      <anchor>73470ac3e7c77f07785c2f0222845a7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterPlanRep</name>
    <filename>classogdf_1_1_cluster_plan_rep.html</filename>
    <base>ogdf::PlanRep</base>
    <member kind="function">
      <type></type>
      <name>ClusterPlanRep</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>aac634a09343d2684acce45ff902f9aa</anchor>
      <arglist>(const ClusterGraphAttributes &amp;acGraph, const ClusterGraph &amp;clusterGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClusterPlanRep</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>18d1745d9446bedaf3415120e3f04363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCC</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>70a47e4b4b1a42d8a0dea3be5fb180dc</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusterBoundary</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>a56d6d66670647eb39eb32607cdbb7d1</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClusterBoundary</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>2ca587344d3428146036be89bbbb48af</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraph &amp;</type>
      <name>getClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>69d077ff72044448d3fd59b77f45194e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdgePathEmbedded</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>555d0a5ac97814be75bfa3537c258b73</anchor>
      <arglist>(edge eOrig, CombinatorialEmbedding &amp;E, const SList&lt; adjEntry &gt; &amp;crossedEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ModelBoundaries</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>d4db597408a799b5514c3697544ccfec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>externalAdj</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>6f364bee9eadc749b3fc61b4608c5750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>expand</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>d2ceb50cdb8ad4af61f57940f65f4656</anchor>
      <arglist>(bool lowDegreeExpand=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>expandLowDegreeVertices</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>954661e978791b54dcc9bcc8a748097d</anchor>
      <arglist>(OrthoRep &amp;OR)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>cd559a28056e2efcee5cc0e731cff460</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>clusterOfEdge</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>b7c6e9f6abb3ab95b6f07af5be116a3f</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ClusterID</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>06f9ff5de5fe5d4cdec61e012eda2ca3</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ClusterID</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>c53d463683cbc7bea5057c739d7c4f0f</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>clusterOfIndex</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>9650c905f6f6d399f12cf10a6f1e8af3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>clusterOfDummy</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>45df7bf349a57d63712e62feee4ae3e7</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>59828f70d53a9b608f0aab34145bad51</anchor>
      <arglist>(const char *fileName, const Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>9eef99eb8e831a1987107151c02403c4</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>04eb53bf620783740588afe9b4cbbc8e</anchor>
      <arglist>(ostream &amp;os, const Layout &amp;drawing)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>a44b1e96128240e97a60cc85796c25a2</anchor>
      <arglist>(cluster act, AdjEntryArray&lt; edge &gt; &amp;currentEdge, AdjEntryArray&lt; int &gt; &amp;outEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertBoundary</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>f523ff15cbae80cb317a56c1d3898025</anchor>
      <arglist>(cluster C, AdjEntryArray&lt; edge &gt; &amp;currentEdge, AdjEntryArray&lt; int &gt; &amp;outEdge, bool clusterIsLeaf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reinsertEdge</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>cfc38a6cb1d83da4ba9ab9526c698c0c</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edgeType</type>
      <name>clusterPattern</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>6104876099384a78df0b92cfe8c7b0f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ClusterGraph *</type>
      <name>m_pClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>ee3e77572685362b66447c7196c44105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_rootAdj</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>d9368ab0a92e6bb7dd76403b2e0e71d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_edgeClusterID</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>09909f31a3ea0cd82be06f4484aac9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_nodeClusterID</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>6face1e7c027a9e05ab019b5efb7db76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HashArray&lt; int, cluster &gt;</type>
      <name>m_clusterOfIndex</name>
      <anchorfile>classogdf_1_1_cluster_plan_rep.html</anchorfile>
      <anchor>60840f0e0a7b68eb10fd11e1b9dd0c3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterSetSimple</name>
    <filename>classogdf_1_1_cluster_set_simple.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterSetSimple</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>e716d151a00ea27bb16fceeff7b80fb6</anchor>
      <arglist>(const ClusterGraph &amp;CG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClusterSetSimple</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>d2a3d9c2237eca059123a7d5498d36aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>0f0bfe46ea834934a8324749d6c4267a</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>7dbbc27976bf365bae601e0e7b4a7e38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>9dc50a76a13d83fffdd57b65a759284a</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; cluster &gt; &amp;</type>
      <name>clusters</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>b18639fb3644aded1bc019fde56aea47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; bool &gt;</type>
      <name>m_isContained</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>82d1e67693015157b3ee61473be0c22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; cluster &gt;</type>
      <name>m_clusters</name>
      <anchorfile>classogdf_1_1_cluster_set_simple.html</anchorfile>
      <anchor>a1bd5cfcc2529a805eafe821359e6d75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterSetPure</name>
    <filename>classogdf_1_1_cluster_set_pure.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterSetPure</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>0568202da75f84c0932e07958413497c</anchor>
      <arglist>(const ClusterGraph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClusterSetPure</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>899e294d8914beeb5c0ec9684d0086d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>2b8e542d5514fbff983e7a0508256a9c</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>41ef06a4a968d0e81145ba7ad1db6ef4</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>8fec073ba7186e425550efacc68fd86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>d72e4c7a1410153983fc4227c29423f2</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>const ListPure&lt; cluster &gt; &amp;</type>
      <name>clusters</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>bb09a3b2d5d059e2dfbe79c203412b02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; ListIterator&lt; cluster &gt; &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>9609a87fb0727bd3e7179dad1e21b7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListPure&lt; cluster &gt;</type>
      <name>m_clusters</name>
      <anchorfile>classogdf_1_1_cluster_set_pure.html</anchorfile>
      <anchor>519388c0296d248c2a42dd45cc791173</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterSet</name>
    <filename>classogdf_1_1_cluster_set.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterSet</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>5928cf4712ad66558ff9e7d765626dad</anchor>
      <arglist>(const ClusterGraph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClusterSet</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>d1680359ae2cc664423f4d0a8399cf65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>f3f660126b6183cedde4b5aa49ea01a2</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>50786c2900b0d06a444f6c7c904b08fd</anchor>
      <arglist>(cluster c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>003fef5c569683e9b1c7cfeca88d7f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>c28c9e30779f336a7ac2ebd0e847a03b</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>552f42e601153e394ad08a9c095c954c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; cluster &gt; &amp;</type>
      <name>clusters</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>4acfa93cd161c75a67b56b6fd7c4ecbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; ListIterator&lt; cluster &gt; &gt;</type>
      <name>m_it</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>4234d9822a8c53b3e32b935f736d6cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; cluster &gt;</type>
      <name>m_clusters</name>
      <anchorfile>classogdf_1_1_cluster_set.html</anchorfile>
      <anchor>eda60d534c815a02b2de0ccd916be734</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodePair</name>
    <filename>classogdf_1_1_node_pair.html</filename>
    <member kind="variable">
      <type>node</type>
      <name>m_src</name>
      <anchorfile>classogdf_1_1_node_pair.html</anchorfile>
      <anchor>dc1f72f34b084d8ffde864b36c2be10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_tgt</name>
      <anchorfile>classogdf_1_1_node_pair.html</anchorfile>
      <anchor>86fa1d9f8676baf2512b9e57e23ff33d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CPlanarEdgeInserter</name>
    <filename>classogdf_1_1_c_planar_edge_inserter.html</filename>
    <member kind="function">
      <type></type>
      <name>CPlanarEdgeInserter</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>3fa6f756e0e1cafba67f950fafbdc020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CPlanarEdgeInserter</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>b2314de7458e65ab564d7a924da64a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>0bd4d0f5c66dcd33ef6f1dad4107426d</anchor>
      <arglist>(ClusterPlanRep &amp;CPR, CombinatorialEmbedding &amp;E, Graph &amp;G, const List&lt; NodePair &gt; &amp;origEdges, List&lt; edge &gt; &amp;newEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostProcessing</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>5b58d13115af45480fcdb336d1591e19</anchor>
      <arglist>(PostProcessType p)</arglist>
    </member>
    <member kind="function">
      <type>PostProcessType</type>
      <name>getPostProcessing</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>004854aa9eb095b48def7f69f5094586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructDualGraph</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>6c7e73a0e67ae0fda16092a03f6d10e4</anchor>
      <arglist>(ClusterPlanRep &amp;CPR, CombinatorialEmbedding &amp;E, EdgeArray&lt; edge &gt; &amp;arcRightToLeft, EdgeArray&lt; edge &gt; &amp;arcLeftToRight, FaceArray&lt; node &gt; &amp;nodeOfFace, EdgeArray&lt; edge &gt; &amp;arcTwin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findShortestPath</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>a217c1d4bf16d3d4b47a2500540bbadf</anchor>
      <arglist>(const CombinatorialEmbedding &amp;E, node s, node t, node sDummy, node tDummy, SList&lt; adjEntry &gt; &amp;crossed, FaceArray&lt; node &gt; &amp;nodeOfFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edge</type>
      <name>insertEdge</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>ab5f61e8342a81818c1b4f9d54f7d148</anchor>
      <arglist>(ClusterPlanRep &amp;CPR, CombinatorialEmbedding &amp;E, const NodePair &amp;np, FaceArray&lt; node &gt; &amp;nodeOfFace, EdgeArray&lt; edge &gt; &amp;arcRightToLeft, EdgeArray&lt; edge &gt; &amp;arcLeftToRight, EdgeArray&lt; edge &gt; &amp;arcTwin, NodeArray&lt; cluster &gt; &amp;clusterOfFaceNode, const SList&lt; adjEntry &gt; &amp;crossed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setArcStatus</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>4b52bf68be421f96a981eeed01eca52b</anchor>
      <arglist>(edge eArc, node oSrc, node oTgt, const ClusterGraph &amp;CG, NodeArray&lt; cluster &gt; &amp;clusterOfFaceNode, EdgeArray&lt; edge &gt; &amp;arcTwin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postProcess</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>dc1129ff1c9c00e5190779c9dd6b0279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>PostProcessType</name>
      <anchor>3b5068301cfb3d18b493c1cce0064e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ppNone</name>
      <anchor>3b5068301cfb3d18b493c1cce0064e3e037127f705b1186c947ae432adf2d6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ppRemoveReinsert</name>
      <anchor>3b5068301cfb3d18b493c1cce0064e3eef9a6f672e54201971a67fc6322a7608</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deriveFaceCluster</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>92f9c4ff645606f0970bc29a37069fb9</anchor>
      <arglist>(ClusterPlanRep &amp;CPR, CombinatorialEmbedding &amp;E, const ClusterGraph &amp;CG, FaceArray&lt; node &gt; &amp;nodeOfFace, NodeArray&lt; cluster &gt; &amp;clusterOfFaceNode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeDual</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>8ad3aa40bbdbef16beb9b5bf0ff5382f</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>daa8e662b9841b1b5969ac6b255c581c</anchor>
      <arglist>(ostream &amp;os, const Layout &amp;drawing)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph *</type>
      <name>m_originalGraph</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>78a91469cf36623703ecc7bc56491cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>m_dualGraph</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>6c28d547b947c8f86b1c6252eeed07c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_eStatus</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>145d13abc93aeca7d9c5af4e15555e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; adjEntry &gt;</type>
      <name>m_arcOrig</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>3660c2b3068a1901af9c34b4d0de6c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PostProcessType</type>
      <name>m_ppType</name>
      <anchorfile>classogdf_1_1_c_planar_edge_inserter.html</anchorfile>
      <anchor>a65f3151c303677248a2c905950ef499</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CPlanarSubClusteredGraph</name>
    <filename>classogdf_1_1_c_planar_sub_clustered_graph.html</filename>
    <member kind="function">
      <type></type>
      <name>CPlanarSubClusteredGraph</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_graph.html</anchorfile>
      <anchor>77f94426a552953901b336e413915cb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_graph.html</anchorfile>
      <anchor>71f2b9b2f7c2a5674fa2c5207ea46891</anchor>
      <arglist>(const ClusterGraph &amp;CG, EdgeArray&lt; bool &gt; &amp;inSub)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_graph.html</anchorfile>
      <anchor>82e6607b75c582fd1d2a72a50be9dfca</anchor>
      <arglist>(const ClusterGraph &amp;CGO, EdgeArray&lt; bool &gt; &amp;inSub, List&lt; edge &gt; &amp;leftOver)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_edgeStatus</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_graph.html</anchorfile>
      <anchor>9746ea24788f931daf94f043d5607046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BCTree</name>
    <filename>classogdf_1_1_b_c_tree.html</filename>
    <member kind="enumeration">
      <name>GNodeType</name>
      <anchor>1a068579e5a55f5647b9ee5a37b047d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Normal</name>
      <anchor>1a068579e5a55f5647b9ee5a37b047d3623b479c43e8b0c8cca20826845de974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CutVertex</name>
      <anchor>1a068579e5a55f5647b9ee5a37b047d3a1b0fb171d7baabe86b7d721f7cca75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BNodeType</name>
      <anchor>06ce2434df67019ae3935457c21e6dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BComp</name>
      <anchor>06ce2434df67019ae3935457c21e6dff92268c27dc786040ac99ca01b637af08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CComp</name>
      <anchor>06ce2434df67019ae3935457c21e6dff41cf1fe17b1c723932b75ce23c9a0a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCTree</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>f71b2dd4c4c20a346d23cedb8754897e</anchor>
      <arglist>(Graph &amp;G, bool callInitConnected=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCTree</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>d254dd9fa234eff16ae0708597fd1703</anchor>
      <arglist>(Graph &amp;G, node vG, bool callInitConnected=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BCTree</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>6c40b28e9fe894fb90a8e44adffcd9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>originalGraph</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>906edd3d02454996ec9eb8fbde3fb176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>bcTree</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>367c638efe72c311a7816f3d22019f51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>auxiliaryGraph</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>8af67bff3fb7ba2273ed3c717dd837b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfBComps</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>11d9daee184645bf65d72c169af42ce7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCComps</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>0098113771737c2c88b2a2c5fc459bbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GNodeType</type>
      <name>typeOfGNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>4246caa8e002e3fa32340b334e5aff8e</anchor>
      <arglist>(node vG) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual node</type>
      <name>bcproper</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>3cb76b06954133563f30151ffd638f23</anchor>
      <arglist>(node vG) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual node</type>
      <name>bcproper</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>83af48fba58c083f0a0eb9e324e7c1b4</anchor>
      <arglist>(edge eG) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rep</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>a89be28c142a13ef0c043b3afe648ecc</anchor>
      <arglist>(node vG) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>rep</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>abe84568da0824d4c8f3070acbe0c68f</anchor>
      <arglist>(edge eG) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>74ed8cf46e595103e5a63d3b63c6364a</anchor>
      <arglist>(node vH)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>846ead23d866596b4707251e77d103b6</anchor>
      <arglist>(edge eH) const </arglist>
    </member>
    <member kind="function">
      <type>BNodeType</type>
      <name>typeOfBNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>e228caf9fcfe5314ba99124506d187d8</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; edge &gt; &amp;</type>
      <name>hEdges</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>ab11a0dee1bada7fbe6017e8d6ad76d8</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEdges</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>f85cbe5bba239a8af920e6822ad0e92d</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfNodes</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>5e8a24526af1e1d4cce99aa5a72ecf0d</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>bComponent</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>2e12671e9491fd2f559db9edba78b7f9</anchor>
      <arglist>(node uG, node vG) const </arglist>
    </member>
    <member kind="function">
      <type>SList&lt; node &gt; &amp;</type>
      <name>findPath</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>bdead2c4d69ee72d4705cf1120fb1cbd</anchor>
      <arglist>(node sG, node tG) const </arglist>
    </member>
    <member kind="function">
      <type>SList&lt; node &gt; &amp;</type>
      <name>findPathBCTree</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>48c0c70c0ceeaaa9c5ad3e0645364455</anchor>
      <arglist>(node sB, node tB) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual node</type>
      <name>repVertex</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>bd315d6bf1cae5bae7a83e68b9dcb662</anchor>
      <arglist>(node uG, node vB) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual node</type>
      <name>cutVertex</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>ffc66ddc60a20ceb581fc5c9f2859199</anchor>
      <arglist>(node uB, node vB) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>201d677398ad6ff823da9bc90c2498d7</anchor>
      <arglist>(node vG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initNotConnected</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>0ae849e19d6ef0d57d6153288d933403</anchor>
      <arglist>(node vG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>biComp</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>222cd968704960f8b7945a97aabcf3d0</anchor>
      <arglist>(adjEntry adjuG, node vG)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual node</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>d7eba84618c63332e7d61a13a7118b73</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>findNCA</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>1c4a09483736e494f90fbdac5e177af7</anchor>
      <arglist>(node uB, node vB) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph &amp;</type>
      <name>m_G</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>6b76aa00f65736662fb3fe53ee2cad80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>m_B</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>ec3da5c0f4ecadf4c3fc840229906a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>m_H</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>3f9a462ac4db326f5f3912098c79489d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_numB</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>31d2d7bea0436db6f506a643faae3d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_numC</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>1d684dc51ffa43ce186a0bee2fc47ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_gNode_isMarked</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>63fcfde6c3e7c4d1ff310e9e8fe9cf3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_gNode_hNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>7561bc599c5bf311ed1b49d089ab29ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_gEdge_hEdge</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>a4aa6bd8d80a35db9bb923f164d53e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; BNodeType &gt;</type>
      <name>m_bNode_type</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>f1c9edd0bd3ebced5e1bb6b8073fb1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_bNode_isMarked</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>17f6703461100964537121473308c205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_bNode_hRefNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>ba6d1a01add1bcfcd4cc979000a995c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_bNode_hParNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>b0957ecd0bd5d94ccf94b710697dd118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; SList&lt; edge &gt; &gt;</type>
      <name>m_bNode_hEdges</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>4a9d46436bb771be7b4f04764b317910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_bNode_numNodes</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>a78ff4cd98633cd3f631611ce429d990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_hNode_bNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>a46926e1dd718f0d7f66f1f5d8f6c241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; node &gt;</type>
      <name>m_hEdge_bNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>c3587371a2b8679eb02e1f39d5c14859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_hNode_gNode</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>b0387791e7ca0856599ceaa607ac1f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_hEdge_gEdge</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>a56a6b4ddc4ce20a0945f1b723ef834b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_count</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>6b3e06e4b4e09ece7079173f2a7e63cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_number</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>b234db76256c9701ac4362c9b6ef4f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_lowpt</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>c952411f766654416b7d8b00cfd19f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoundedStack&lt; adjEntry &gt;</type>
      <name>m_eStack</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>7004812d1979b62da1f5dde6af984ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_gtoh</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>b9a2b392c25da96e8b4ccdbcd819af0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SList&lt; node &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_b_c_tree.html</anchorfile>
      <anchor>d290c30d2bf08a09fd28a07674f27a94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DynamicBCTree</name>
    <filename>classogdf_1_1_dynamic_b_c_tree.html</filename>
    <base>ogdf::BCTree</base>
    <member kind="function">
      <type></type>
      <name>DynamicBCTree</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>7632a65d4f04c144a8890808943075de</anchor>
      <arglist>(Graph &amp;G, bool callInitConnected=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicBCTree</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>9cbc9ea2bc105fbd2d5b2481a19399d3</anchor>
      <arglist>(Graph &amp;G, node vG, bool callInitConnected=false)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>bcproper</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>a59cbcc0874cb5376363ce60c68efec1</anchor>
      <arglist>(node vG) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>bcproper</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>f0748a3560da8edf651714cde76e76da</anchor>
      <arglist>(edge eG) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>repVertex</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>73d0721f3716af76f392b190198696d3</anchor>
      <arglist>(node uG, node vB) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>cutVertex</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>f97a683239778bc577cfc2c834bc2496</anchor>
      <arglist>(node uB, node vB) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual edge</type>
      <name>updateInsertedEdge</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>0895af00466f668e15441756c9405cfa</anchor>
      <arglist>(edge eG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual node</type>
      <name>updateInsertedNode</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>b560628d721b21d5c83965c5a915b1eb</anchor>
      <arglist>(edge eG, edge fG)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>insertEdge</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>bb25a6bd1accf80f9eb9f9f92042c137</anchor>
      <arglist>(node sG, node tG)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>insertNode</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>ab64820b982daa3c7a6df05e4ed5a8b9</anchor>
      <arglist>(edge eG)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>bComponent</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>395fe2fe9fb3af8d1e2cb269cce4a2c3</anchor>
      <arglist>(node uG, node vG) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>ad64d06e2c071b5ef36cbe83100a3cbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>unite</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>6fa5ec50ecb3cbb6efeb273ff9aa62f9</anchor>
      <arglist>(node uB, node vB, node wB)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>find</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>6faaea5c7e1b0e207a07ea952481e78d</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>8318e2af6324bc6ae438efb800a3a1d5</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>condensePath</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>a8830bc7453e4e628babd82435b0dba3</anchor>
      <arglist>(node sG, node tG)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_bNode_owner</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>bc48a22fc31f1cfe341003973d1eeb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_bNode_degree</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>b42cfed8e041868e1a7cefe07fdf45f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PlanarAugmentation</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>82988519648c18adfe0e50890728bd68</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PlanarAugmentationFix</name>
      <anchorfile>classogdf_1_1_dynamic_b_c_tree.html</anchorfile>
      <anchor>26cfb12df56bf677a36f3536f2de2753</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DynamicPlanarSPQRTree</name>
    <filename>classogdf_1_1_dynamic_planar_s_p_q_r_tree.html</filename>
    <base>ogdf::DynamicSPQRTree</base>
    <base>ogdf::PlanarSPQRTree</base>
    <member kind="function">
      <type></type>
      <name>DynamicPlanarSPQRTree</name>
      <anchorfile>classogdf_1_1_dynamic_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>10e591d28a5e00becc0cc4433b1f875f</anchor>
      <arglist>(Graph &amp;G, bool isEmbedded=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicPlanarSPQRTree</name>
      <anchorfile>classogdf_1_1_dynamic_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>43183bd086e0dfcee0dd61f81c923d1e</anchor>
      <arglist>(Graph &amp;G, edge e, bool isEmbedded=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DynamicSkeleton</name>
    <filename>classogdf_1_1_dynamic_skeleton.html</filename>
    <base>ogdf::Skeleton</base>
    <member kind="function">
      <type></type>
      <name>DynamicSkeleton</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>16c08ba674f40ec47be32034aca3e9c9</anchor>
      <arglist>(const DynamicSPQRTree *T, node vT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicSkeleton</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>5693aea38afe632e39fbe0050c0d7ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SPQRTree &amp;</type>
      <name>owner</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>53f0965261dc7af550a9230e0bd5a001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>1c27c3a8812ec73aa83848157d89497b</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>realEdge</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>2a02a28d273bb333c1987e58b5d062ef</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVirtual</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>d94c4f23ef7a55a60b33d2afae77e9b9</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>twinEdge</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>b51d9b4c88c76bb846fbd41860ee92e2</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>twinTreeNode</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>47724655a48db88a7b31b443584cf395</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DynamicSPQRTree *</type>
      <name>m_owner</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>2435292748d50bbad52938a0f5ede8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_origNode</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>5721754a355fc43f0442c58876527432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_origEdge</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>9ea6197e2ea870698743572d41f7eb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DynamicSPQRTree</name>
      <anchorfile>classogdf_1_1_dynamic_skeleton.html</anchorfile>
      <anchor>74b7c89f5f079dfec625891db01fa8b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DynamicSPQRForest</name>
    <filename>classogdf_1_1_dynamic_s_p_q_r_forest.html</filename>
    <base>ogdf::DynamicBCTree</base>
    <member kind="enumeration">
      <name>TNodeType</name>
      <anchor>fe6f79d01516837aeeab928fdeb84b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SComp</name>
      <anchor>fe6f79d01516837aeeab928fdeb84b68ed44efee74503f8251a943772432e1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PComp</name>
      <anchor>fe6f79d01516837aeeab928fdeb84b68dfbeffb7fbc259ba3a25e2446248e6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RComp</name>
      <anchor>fe6f79d01516837aeeab928fdeb84b6841d788227b7f503feb551492e93b51c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicSPQRForest</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>a87c7296113e09a9bba4abb767ab04b9</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>spqrproper</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>6aef535b56681399261be3e3fbb68b00</anchor>
      <arglist>(edge eH) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>twinEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>d47d901c0339fe16bac4d06689337f0a</anchor>
      <arglist>(edge eH) const </arglist>
    </member>
    <member kind="function">
      <type>TNodeType</type>
      <name>typeOfTNode</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>66b6f4902b80e718a27af2e92669dda8</anchor>
      <arglist>(node vT) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; edge &gt; &amp;</type>
      <name>hEdgesSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>1dcb75d0edb104aa805bcd4432d4c70f</anchor>
      <arglist>(node vT) const </arglist>
    </member>
    <member kind="function">
      <type>SList&lt; node &gt; &amp;</type>
      <name>findPathSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>5404cf186a28d3a64c95a79b1ccb453e</anchor>
      <arglist>(node sH, node tH) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>virtualEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>9e616dd7811152ecf7838a7f461ef39b</anchor>
      <arglist>(node vT, node wT) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>updateInsertedEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>f1a10d122fe98f731e3d405c1e23b59e</anchor>
      <arglist>(edge eG)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>updateInsertedNode</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>674a5daefa9c26ebb8a2bf6e1ea2e5b3</anchor>
      <arglist>(edge eG, edge fG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>8c5f01fe4e1e9ae4d89ed2a87ca676ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>6a28b6ea96530ca74a959fa2a7015e63</anchor>
      <arglist>(node vB) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>uniteSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>9e028eaee0446657fdc684bcaced8b81</anchor>
      <arglist>(node vB, node sT, node tT)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>findSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>bf5aa09aa300776b4821467e66df463e</anchor>
      <arglist>(node vT) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>findNCASPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>60b3edc7bd85c010717fbf8713ed585c</anchor>
      <arglist>(node sT, node tT) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SList&lt; node &gt; &amp;</type>
      <name>findPathSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>8aaa097f1fae46f65b79d9466e62765a</anchor>
      <arglist>(node sH, node tH, node &amp;rT) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edge</type>
      <name>updateInsertedEdgeSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>60f2e81a79af98dbdec3fadaf53a8015</anchor>
      <arglist>(node vB, edge eG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>updateInsertedNodeSPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>6e2f3490162b78c0bff69eae4d6b7de6</anchor>
      <arglist>(node vB, edge eG, edge fG)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>m_T</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>09e4a9f924a68c9d311207a3bc6d4599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_bNode_SPQR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>699bae5e014153b0648cfabd7a38e5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_bNode_numS</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>2da7f3d7c8b7f0fbcb5489ee23b9dc47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_bNode_numP</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>ae5416be03d279aac439cfe7671a25af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_bNode_numR</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>f1eaf7da682c12bf36d047b693f508f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; TNodeType &gt;</type>
      <name>m_tNode_type</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>4836999211bcd6f6871aaac2789c23bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_tNode_owner</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>c98cb507fef319988c0197ddc34f3efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; edge &gt;</type>
      <name>m_tNode_hRefEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>e3c4383b02e47bb6284fe4b40faba5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; List&lt; edge &gt; &gt;</type>
      <name>m_tNode_hEdges</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>0e4429cb8521968cd9c900c4b7dfcd93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; ListIterator&lt; edge &gt; &gt;</type>
      <name>m_hEdge_position</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>564f26deb851aaa983d5eb6739872613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; node &gt;</type>
      <name>m_hEdge_tNode</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>be655c048156b1b313fe96fc42b420cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_hEdge_twinEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>ff953c36bdddc91cf36abd5c97e5e3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_htogc</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>e66dec97470d71faa825f3b081776871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_tNode_isMarked</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_forest.html</anchorfile>
      <anchor>9953c2296d0a28ec782f8fee043c9c10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DynamicSPQRTree</name>
    <filename>classogdf_1_1_dynamic_s_p_q_r_tree.html</filename>
    <base virtualness="virtual">ogdf::SPQRTree</base>
    <base>ogdf::DynamicSPQRForest</base>
    <member kind="function">
      <type></type>
      <name>DynamicSPQRTree</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>40c19c660dc33ca1e07849a19280d1d2</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicSPQRTree</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>c4670a0c58f992a9145a4ea45beec145</anchor>
      <arglist>(Graph &amp;G, edge e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicSPQRTree</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>5dea082cc1a54f701761594b078de525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>originalGraph</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>d45c97ae4d4333de5797e7dbff335770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>tree</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>a73832ecb5e1d2a105dbb61ee67cb2e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>rootEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>9ede93f633df0c14d514ab4421846d90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rootNode</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>bf510a747e7e74d5f402fe61d50632de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfSNodes</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>37010919cc09144815b5b4e38ccc2f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfPNodes</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>3299f1a7f08f09194a3d48c8632d2c84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfRNodes</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>984d6da1e74c6e5ed212c85d8dd6f107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeType</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>9943025b046a0a3b6e065d4ce5ab7f08</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; node &gt;</type>
      <name>nodesOfType</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>2dd205ed3259c9f9d336c137f7c0a1c8</anchor>
      <arglist>(NodeType t) const </arglist>
    </member>
    <member kind="function">
      <type>SList&lt; node &gt; &amp;</type>
      <name>findPath</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>881edabdc44718e9ba4356602bd69ee3</anchor>
      <arglist>(node s, node t)</arglist>
    </member>
    <member kind="function">
      <type>Skeleton &amp;</type>
      <name>skeleton</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>9a665c232bff8567badc95d23ba9903c</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const Skeleton &amp;</type>
      <name>skeletonOfReal</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>5276006782d3f9715fc51e7267b13f78</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>copyOfReal</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>007f9432d9174e1c9c87cd6c987ace71</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>skeletonEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>02c692a75ed61befa318446324681fe3</anchor>
      <arglist>(node v, node w) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rootTreeAt</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>70f17ebfe2beac0c841e65ab4d1ad9ed</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rootTreeAt</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>a38d7bc95e57ea71073b001c3aad9932</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>updateInsertedEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>2f5bd4ae76f8875e9a72611ffb767826</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>updateInsertedNode</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>de647270b058e5c2033ae5ba67e645a6</anchor>
      <arglist>(edge e, edge f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>abd30f2ddec4c97efa62f9b9cae5c876</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DynamicSkeleton &amp;</type>
      <name>createSkeleton</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>53f6862c26f07c5f3dbb67f185e6dcbb</anchor>
      <arglist>(node vT) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cpRec</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>60dffb6e83a95801352e6c87f89563a4</anchor>
      <arglist>(node v, PertinentGraph &amp;Gp) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>edge</type>
      <name>m_rootEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>a6b169a1af9cb893f95524dd90f450a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; DynamicSkeleton * &gt;</type>
      <name>m_sk</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>386c3daab9dd2cd42df9619ae3e528ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_skelEdge</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>cf4fd91e021352a7bf096a74c9e4b9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_mapV</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>0a2f9c4651b84b7847ab8fcf47333964</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DynamicSkeleton</name>
      <anchorfile>classogdf_1_1_dynamic_s_p_q_r_tree.html</anchorfile>
      <anchor>68e9a0fd5ca79e08ac49e935de0a324d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PertinentGraph</name>
    <filename>classogdf_1_1_pertinent_graph.html</filename>
    <member kind="function">
      <type></type>
      <name>PertinentGraph</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>95935c52419724acacfb159f3ab17c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>9d77ebdeab71a7c28a6c976e739dccd6</anchor>
      <arglist>(node vT)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>treeNode</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>7fc49bc5f29613fc36da6f52f26570ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>ab9fd6b54a1ea10ca74a337eaf88396b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>3631a09b43fdca3534e8213719679555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>referenceEdge</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>b8fc43942a3f7c874e4e97d0758200c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>skeletonReferenceEdge</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>90717a53e769b18341ad1e934d34d1dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>35b1cdadf8cdc77c104adc42e97d91e9</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>d4747260ace1361036cb76d28706d897</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>node</type>
      <name>m_vT</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>0b6d3ed814280fd6d76865dde1bbcdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>m_P</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>392faa1da45d9922549338d22678579a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>edge</type>
      <name>m_vEdge</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>11fbed135aecce3cda0cff35cb2b8ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>edge</type>
      <name>m_skRefEdge</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>233b959f6966c47151741fc7e786c9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_origV</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>793bc44361c7ecda6303e3aadfc58364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_origE</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>3d8d89f425dbc856206df0f5d7545f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SPQRTree</name>
      <anchorfile>classogdf_1_1_pertinent_graph.html</anchorfile>
      <anchor>5cdb8a555e2396a8610b483873f6fe2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarSPQRTree</name>
    <filename>classogdf_1_1_planar_s_p_q_r_tree.html</filename>
    <base virtualness="virtual">ogdf::SPQRTree</base>
    <member kind="function">
      <type>double</type>
      <name>numberOfEmbeddings</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>e9c42f74d910049e916e7a9316856454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numberOfEmbeddings</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>2593f2465073f3fb712b7442c7eca37f</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>5313487f6160262193bdb926637e313d</anchor>
      <arglist>(node vT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>bf06bcdad2524e25694a4fd3fa614ab4</anchor>
      <arglist>(node vT, edge e1, edge e2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>7694bd079c270158a14b2d322fa929e6</anchor>
      <arglist>(node vT, adjEntry adj1, adjEntry adj2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>2a8c783695e95742b53693274420568a</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomEmbed</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>bd8b0dfdaf555dab7a794b5d23751f82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomEmbed</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>63ede183234e513a409ce88004e7415b</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>e1f7e3f2117c99e81e3a40ccfe64fe73</anchor>
      <arglist>(bool isEmbedded)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>adoptEmbedding</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>755f62c2ca02aaa6518c965e99cf555e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPosInEmbedding</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>265a5fb837e6bbc7c05407f722ff3e5b</anchor>
      <arglist>(NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;adjEdges, NodeArray&lt; node &gt; &amp;currentCopy, NodeArray&lt; adjEntry &gt; &amp;lastAdj, SListPure&lt; node &gt; &amp;current, const Skeleton &amp;S, adjEntry adj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expandVirtualEmbed</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>d29d81a42ccdd1d1d54fc43a71e997ea</anchor>
      <arglist>(node vT, adjEntry adjVirt, SListPure&lt; adjEntry &gt; &amp;adjEdges)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createInnerVerticesEmbed</name>
      <anchorfile>classogdf_1_1_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>15e12b5b5dfd09b8d757a28fb0ca9c15</anchor>
      <arglist>(Graph &amp;G, node vT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Skeleton</name>
    <filename>classogdf_1_1_skeleton.html</filename>
    <member kind="function">
      <type></type>
      <name>Skeleton</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>4b484e03fdcb7aeed5fff8db6bd2ae6a</anchor>
      <arglist>(node vT)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Skeleton</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>a9b2a44c229c5461e74c2ea732bc70d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SPQRTree &amp;</type>
      <name>owner</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>840222ab35e03e188e3bd9e447bd9621</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>treeNode</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>4527056d903e224bc035dcaea76c0cd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>referenceEdge</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>cba9c088e5e2530f73a9fa45ac56d768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>27b28d242099d3b7eff3d775d2c8836b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>f61b335d79ede91f1eac4928494cadff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>0b9ed0b8ab73a8ba4d7da460866b2d4f</anchor>
      <arglist>(node v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isVirtual</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>e8aedbff91a18bc6148d0f409e770822</anchor>
      <arglist>(edge e) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual edge</type>
      <name>realEdge</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>6abc9266622076f2482d1e0b40bd559f</anchor>
      <arglist>(edge e) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual edge</type>
      <name>twinEdge</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>06807ac3e2579f2b5f322c03f0c648dd</anchor>
      <arglist>(edge e) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node</type>
      <name>twinTreeNode</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>73f9b54834c3b91838f59d2486515ab0</anchor>
      <arglist>(edge e) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>node</type>
      <name>m_treeNode</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>2541c745b46053a79cb46d690e9d0948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>edge</type>
      <name>m_referenceEdge</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>63a3f0c6c0ce9a59fddd707f3c0bc442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>m_M</name>
      <anchorfile>classogdf_1_1_skeleton.html</anchorfile>
      <anchor>a91d77c5a99945671f92304361e4be39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SPQRTree</name>
    <filename>classogdf_1_1_s_p_q_r_tree.html</filename>
    <member kind="enumeration">
      <name>NodeType</name>
      <anchor>c6274139b4295e1ce75a311d3f622d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SNode</name>
      <anchor>c6274139b4295e1ce75a311d3f622d25c36c01aabd3284883253913b781c702c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PNode</name>
      <anchor>c6274139b4295e1ce75a311d3f622d256fcc485e5f1171756272adbc212abe44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RNode</name>
      <anchor>c6274139b4295e1ce75a311d3f622d25b8de24b086edce4d96499b28a255ef3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPQRTree</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>e2b6752c538b78c3c919708d93942850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Graph &amp;</type>
      <name>originalGraph</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>6506df171d2c6207719022ac5408ad16</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Graph &amp;</type>
      <name>tree</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>25946fd07e7ab11162e628174e436a4f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual edge</type>
      <name>rootEdge</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>97b93c91b16cd0ffd2300ce62cf1715f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node</type>
      <name>rootNode</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>df82b9f30d6bb5617e3cfcaf7d3b7875</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numberOfSNodes</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>080f324ddb501885d3c12dd95bf2bd15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numberOfPNodes</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>6acecacf475a6ab19ef9b42b4bc01580</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numberOfRNodes</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>94d2ef7d7f109e8b22eea0d2532953c5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NodeType</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>3bac4ee8cdc2877e8608030d90fe0295</anchor>
      <arglist>(node v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual List&lt; node &gt;</type>
      <name>nodesOfType</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>d9e3453666d4f9d3560cd62d2213308e</anchor>
      <arglist>(NodeType t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Skeleton &amp;</type>
      <name>skeleton</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>dca4e677f5f9177b43c6431272fb7f9b</anchor>
      <arglist>(node v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Skeleton &amp;</type>
      <name>skeletonOfReal</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>f7ea81c5a2aba82a6d0ce01322a14599</anchor>
      <arglist>(edge e) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual edge</type>
      <name>copyOfReal</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>13adb3d629c4f8d831244717f7c35b55</anchor>
      <arglist>(edge e) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pertinentGraph</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>d2ad7f77c35a4d7835c72e3910bd38b1</anchor>
      <arglist>(node v, PertinentGraph &amp;Gp) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node</type>
      <name>rootTreeAt</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>f8fbcf42c51249601833223bd628807e</anchor>
      <arglist>(edge e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual node</type>
      <name>rootTreeAt</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>6596949ceda68783201ecdfa43865ed1</anchor>
      <arglist>(node v)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>directSkEdge</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>7e62066219922e65ea056bece15c2bae</anchor>
      <arglist>(node vT, edge e, node src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceSkEdgeByPeak</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>475ee571022c7af175f9cdaf051a1386</anchor>
      <arglist>(node vT, edge e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>cpRec</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>7aaabc5b282c63f3acf3f6680464063f</anchor>
      <arglist>(node v, PertinentGraph &amp;Gp) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edge</type>
      <name>cpAddEdge</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>f23bbb19f951d7edec42377f1d3ea520</anchor>
      <arglist>(edge eOrig, PertinentGraph &amp;Gp) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>cpAddNode</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>c146119ed57f1aca97b6f444dc73b7bf</anchor>
      <arglist>(node vOrig, PertinentGraph &amp;Gp) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt; *</type>
      <name>m_cpV</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>77cbf493ed2b59e73ac966241b3c1f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SList&lt; node &gt;</type>
      <name>m_cpVAdded</name>
      <anchorfile>classogdf_1_1_s_p_q_r_tree.html</anchorfile>
      <anchor>7b5d0e5466804f17ee3d3e18229e1146</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::StaticPlanarSPQRTree</name>
    <filename>classogdf_1_1_static_planar_s_p_q_r_tree.html</filename>
    <base>ogdf::StaticSPQRTree</base>
    <base>ogdf::PlanarSPQRTree</base>
    <member kind="function">
      <type></type>
      <name>StaticPlanarSPQRTree</name>
      <anchorfile>classogdf_1_1_static_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>a46d2648284799a82ef4a9a31a4424e6</anchor>
      <arglist>(const Graph &amp;G, bool isEmbedded=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticPlanarSPQRTree</name>
      <anchorfile>classogdf_1_1_static_planar_s_p_q_r_tree.html</anchorfile>
      <anchor>e65a38c28276a055b169691c5360b259</anchor>
      <arglist>(const Graph &amp;G, edge e, bool isEmbedded=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::StaticSkeleton</name>
    <filename>classogdf_1_1_static_skeleton.html</filename>
    <base>ogdf::Skeleton</base>
    <member kind="function">
      <type></type>
      <name>StaticSkeleton</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>7f02d917ea6d98e9d2ad014ed5a5e9bd</anchor>
      <arglist>(const StaticSPQRTree *T, node vT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StaticSkeleton</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>00a9dc4183db779d289d6f1ce86c0337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SPQRTree &amp;</type>
      <name>owner</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>a9350f9d4e3495d020423a7e67b6d8da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>e4a425a7236f99d86c4a9f754fd3c5ce</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVirtual</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>06e11cd0afb28e64b464add1568c1831</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>realEdge</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>0405e53c04eff0bda83458012b53a999</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>twinEdge</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>f31a56fe0b8005b64c71e7818f573025</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>twinTreeNode</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>eff0f7eb833dd15306eee5a10d5b0cd2</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>treeEdge</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>08e864612fa2aac0d0eca6b2758de436</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StaticSPQRTree *</type>
      <name>m_owner</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>18a46a7626a83ac05ec77e5165952ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_orig</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>1d94a8afd42af53055e3b2912a56eec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_real</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>55f367bb81ca581f1434011f42739bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_treeEdge</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>4490d37790aff346dca9f83c8340b8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StaticSPQRTree</name>
      <anchorfile>classogdf_1_1_static_skeleton.html</anchorfile>
      <anchor>22d134745e332ebbb1bdbe29441a9ebf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::StaticSPQRTree</name>
    <filename>classogdf_1_1_static_s_p_q_r_tree.html</filename>
    <base virtualness="virtual">ogdf::SPQRTree</base>
    <member kind="function">
      <type></type>
      <name>StaticSPQRTree</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>24f3f8267a5c2959f5ac81f4aa02a441</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticSPQRTree</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>7c55067e889651a20f7cd68a900fb3aa</anchor>
      <arglist>(const Graph &amp;G, edge e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticSPQRTree</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>826218658226052982c10d5b2a5c359a</anchor>
      <arglist>(const Graph &amp;G, TricComp &amp;tricComp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StaticSPQRTree</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>fd12199d441129e05d3782e87aa83a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>originalGraph</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>22cbed0fff96c7c56eaafb5c3e44e189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>tree</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>eef4994114d4d84a235676a4bf4a78ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>rootEdge</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>8c6a47a41b22c61bf2f54f60876d953a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rootNode</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>7ae7d5098379653abd44b157f050792f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfSNodes</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>184b028bae89deb3db33e927716e2fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfPNodes</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>979b3bb401aa0bc9e075546269d046a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfRNodes</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>3cc6f3b44504c08cd5f0581842a3fc3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeType</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>3d4218e5ea605df1af7dfc482cb0539a</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; node &gt;</type>
      <name>nodesOfType</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>9adde6aecb5654ecb298de69501ef3f2</anchor>
      <arglist>(NodeType t) const </arglist>
    </member>
    <member kind="function">
      <type>Skeleton &amp;</type>
      <name>skeleton</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>e335bf9bfbfb4b6212c6e2a400034fcc</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>skeletonEdgeSrc</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>1065878f09c215a7e5143bfb0496e91e</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>skeletonEdgeTgt</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>fead4cdbbde8708d6d6c289f10ab27c9</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const Skeleton &amp;</type>
      <name>skeletonOfReal</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>db7615a1080181c5c7a08d610de38cde</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>copyOfReal</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>e7efe6c25a811516fc1235a67814c2ae</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rootTreeAt</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>bf71417f14922ddceb178d140b2f8ca3</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rootTreeAt</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>0bef2438faffff74d58a5b9fb7ea9ad1</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>796460c23e2ef0aaad91157d9f197ebc</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>6b392e0f57e358eb5f1f44777a0fa814</anchor>
      <arglist>(edge eRef, TricComp &amp;tricComp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rootRec</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>a7874a5fad112d1fb88a227a577dfc1a</anchor>
      <arglist>(node v, edge ef)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cpRec</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>1e91ac0cfaa5699b8d80dceb432e9550</anchor>
      <arglist>(node v, PertinentGraph &amp;Gp) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>d159d87e793316a7e6ec4c919c5585cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>m_tree</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>fedc7e681be7d77b5054c3acccc04e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>edge</type>
      <name>m_rootEdge</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>8c2a42db737d54612042a0a536d73da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>node</type>
      <name>m_rootNode</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>88ec77b62699aa3d20753a134bc4255c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_numS</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>e11e2f59fce5fefb8e181ae17878b552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_numP</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>b613113cd748778bef6856dd862c8937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_numR</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>21efaeff8dc572ae16a403dd3f03e13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; NodeType &gt;</type>
      <name>m_type</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>188eefc501c6e6881c5307470420ea92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; StaticSkeleton * &gt;</type>
      <name>m_sk</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>4a376c8004c05e9e552926ab9786a43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_skEdgeSrc</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>0ca73544ef91ba43a9438f1e2643d8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_skEdgeTgt</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>3fe80762262d45aaab6f82cac059e72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; StaticSkeleton * &gt;</type>
      <name>m_skOf</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>9a4610d84abc4ffac234a4df974cb11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_copyOf</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>6aa84dad1d8b2db1375f39de644e2bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>StaticSkeleton</name>
      <anchorfile>classogdf_1_1_static_s_p_q_r_tree.html</anchorfile>
      <anchor>188642624457cd795d050a68230ed23b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::TutteLayout</name>
    <filename>classogdf_1_1_tutte_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="function">
      <type></type>
      <name>TutteLayout</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>8b7f61a5089ce86f1b48f1487cd4dc2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TutteLayout</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>9cf35fe4f34758e3ec1670bcd7a353cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DRect</type>
      <name>bbox</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>3cb286471a539b84d8ce2ecf922f13db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bbox</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>fd2a50c73932cafb370227ff7e175592</anchor>
      <arglist>(const DRect &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>004120324f3433a076088c23a765fe56</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>4ee54539f13bfb18912b0298579951cd</anchor>
      <arglist>(GraphAttributes &amp;AG, const List&lt; node &gt; &amp;givenNodes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setFixedNodes</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>85f1a4f156e7eb8d80a5cebd6937fc90</anchor>
      <arglist>(const Graph &amp;G, List&lt; node &gt; &amp;nodes, List&lt; DPoint &gt; &amp;pos, double radius=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setFixedNodes</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>4d77eca413637af7dcddf98cfe904ab8</anchor>
      <arglist>(const Graph &amp;G, List&lt; node &gt; &amp;nodes, const List&lt; node &gt; &amp;givenNodes, List&lt; DPoint &gt; &amp;pos, double radius=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>42c2c3489030441f84c2592502c17ee6</anchor>
      <arglist>(GraphAttributes &amp;AG, const List&lt; node &gt; &amp;fixedNodes, List&lt; DPoint &gt; &amp;fixedPositions)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DRect</type>
      <name>m_bbox</name>
      <anchorfile>classogdf_1_1_tutte_layout.html</anchorfile>
      <anchor>c21c410017724252c7b2dda01adda887</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DavidsonHarel</name>
    <filename>classogdf_1_1_davidson_harel.html</filename>
    <member kind="enumeration">
      <name>TuningParameter</name>
      <anchor>8d0ee19a4dd37e0c698bb0670419bfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tpFree</name>
      <anchor>8d0ee19a4dd37e0c698bb0670419bfd9e9f6252278622a8dae269e10fc4c98b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tpFine</name>
      <anchor>8d0ee19a4dd37e0c698bb0670419bfd9f5eb7fd22c2920fee38533f2649436ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tpCoarse</name>
      <anchor>8d0ee19a4dd37e0c698bb0670419bfd98ac12d47e117b72fd46b5da32ac30aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DavidsonHarel</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>8e0e2012bf8fcd2911a320fb072e40a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DavidsonHarel</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>81b38052fbba265ef827d76e59877d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartTemperature</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>9d69743042a5edb918a8d1d487271d89</anchor>
      <arglist>(int startTemp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfIterations</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>23782c7a1d83332dfb79e22f08c6bc95</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnergyFunction</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>787749e90cec6cf9f3932c35c534568a</anchor>
      <arglist>(EnergyFunction *F, double weight)</arglist>
    </member>
    <member kind="function">
      <type>List&lt; String &gt;</type>
      <name>returnEnergyFunctionNames</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>9853b5d13622b881f1e32ded8280d584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>List&lt; double &gt;</type>
      <name>returnEnergyFunctionWeights</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>1cc54756252de1e972ded54c396503ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>009d278f3dd9c45ca670e24eae66445d</anchor>
      <arglist>(GraphAttributes &amp;GA, TuningParameter t=tpFree)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initParameters</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>b1cb63e85acc642a2643f83f08b4f47d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>computeCandidateLayout</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>1bc72d7e6c1b2bae8fedd4539534180a</anchor>
      <arglist>(const GraphAttributes &amp;, DPoint &amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>testEnergyValue</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>eee9f3a68d87063340b37cd49ad7f26f</anchor>
      <arglist>(double newVal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>randNum</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>89bd0ae65013eac6e1ac8e46db571753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeFirstRadius</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>860d5d39c3425c63053f2f38ffc7a02b</anchor>
      <arglist>(const GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeInitialEnergy</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>c68d93197de5c63e8926ed350a93f5d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>placeIsolatedNodes</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>3ac894b0dceebb63fa39e36202f47f11</anchor>
      <arglist>(GraphAttributes &amp;AG) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>DavidsonHarel &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>48df6479a334e29834dc9dc9d53d51e4</anchor>
      <arglist>(const DavidsonHarel &amp;dh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DavidsonHarel</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>c7fc2847039d590c2f661b890d317325</anchor>
      <arglist>(const DavidsonHarel &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TuningParameter</type>
      <name>m_fineTune</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>f59834546872a8d65d286a48846b6b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_temperature</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>39b14aec519a06c865c63c3a0c044922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_shrinkingFactor</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>89412fadf2383d19f59c7ef09c6ffe7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_diskRadius</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>4fb59f911dc8240dbc2c29354bc4f041</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_energy</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>1588f86357519580f303312a944b0926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numberOfIterations</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>5ed6d2e3601fe3a36ea07f570472bed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; EnergyFunction * &gt;</type>
      <name>m_energyFunctions</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>92cf3f60a254d07bb2ce4c70ccc6e702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; double &gt;</type>
      <name>m_weightsOfEnergyFunctions</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>e2f898e9be20476de8e3be34001ccd08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_nonIsolatedNodes</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>506f32bd91bd1c0dda044863c7128ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>m_defaultTemp</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>82bba71daaf900f3d05b4d0c267cca2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>m_PI</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>1d27398064389ef15415f1196896808a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>m_defaultRadius</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>f9a857c3fa4f3e31330ca7633177dea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>m_iterationMultiplier</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>ab24025b1fb76b26267e8af6afa74474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>m_coolingFactor</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>24497f4b6d28ec6ca3f5aebeb3257e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>m_shrinkFactor</name>
      <anchorfile>classogdf_1_1_davidson_harel.html</anchorfile>
      <anchor>0d655afb265fd0d32d7ce9ad8af11d88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DavidsonHarelLayout</name>
    <filename>classogdf_1_1_davidson_harel_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="enumeration">
      <name>SettingsParameter</name>
      <anchor>f6370092d3a8dcb13441177ab5c7f425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spStandard</name>
      <anchor>f6370092d3a8dcb13441177ab5c7f42516bea74ce7fbd0d3d140964fcffb7d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spRepulse</name>
      <anchor>f6370092d3a8dcb13441177ab5c7f42524f718a7dc670c61551161e8c304bfa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spPlanar</name>
      <anchor>f6370092d3a8dcb13441177ab5c7f425290aa4dbfb24f71c3393b95746d3deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SpeedParameter</name>
      <anchor>d459fc6a1b33fb735679159c9a4e7652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sppFast</name>
      <anchor>d459fc6a1b33fb735679159c9a4e7652f0578aa2d5d519e13bd979d7c384ca11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sppMedium</name>
      <anchor>d459fc6a1b33fb735679159c9a4e765289276abaa5ee0bbaaef612bcd93d158c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sppHQ</name>
      <anchor>d459fc6a1b33fb735679159c9a4e765211e3dd003b77f5d29518c28ba5679414</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DavidsonHarelLayout</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>3bd734db41ca8da6d1669576697fad6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DavidsonHarelLayout</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>b52c12c47714befe09278fd5615d023f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>052718dc8c4a816cbef84df68c1ce394</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixSettings</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>86a89e27f75ea164564dcdb3a7f0450a</anchor>
      <arglist>(SettingsParameter sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStepping</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>7531d5cee8a034856815f38d0071de72</anchor>
      <arglist>(DavidsonHarel::TuningParameter tp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>789539c1579a08d5538a5d083b468a0b</anchor>
      <arglist>(SpeedParameter sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreferredEdgeLengthMultiplier</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>69a9c38c37974d27f1632938945f0170</anchor>
      <arglist>(double multi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepulsionWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>3041655fc7387417b8b00bc7ef6adfa4</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRepulsionWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>e75d42a563277912c9358115b5985880</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttractionWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>171f455608d1eea4345ce329b4022668</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAttractionWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>198cbf4eb33470d13e451a458e26d6ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeOverlapWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>625d18ddfbe06a136cc0cb916d4fec47</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNodeOverlapWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>2a3fae5975588b3d3c500245f734aa79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanarityWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>704cf7d7c297a1ee8d12385696af7dd9</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPlanarityWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>9b1da9b93773e0e074f6be79252077ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartTemperature</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>6e4225ee4c68ddb7539921fe7d1c88e7</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStartTemperature</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>ad25be19e66dc93e9151be0451f2afd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfIterations</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>c8026ad7a6ac6072e1f33ab68b71274e</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfIterations</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>30a7ed9460257ecc1261d52e951c2e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_repulsionWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>589de2208d8972d62fddad0aee5e0afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_attractionWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>539ab1fc5c717bad4596b6d8447e236c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_nodeOverlapWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>7e4b187429da428fa3f2bf353f52a856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_planarityWeight</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>9255a4a1ba7bdbaae06c0fba0b82993b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_startTemperature</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>2c9d45ed52cb1f8c6da45ff7ec958e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numberOfIterations</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>4c532c5d352b23007e496964fd62767a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DavidsonHarel::TuningParameter</type>
      <name>m_stepping</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>6d45db11cf9658bf95eb923537a7325f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SpeedParameter</type>
      <name>m_speed</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>28e11785133d90113bfe3ff52af1bb95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_multiplier</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>ef5c5970d5704cdd7b8cf0f3e768b4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_crossings</name>
      <anchorfile>classogdf_1_1_davidson_harel_layout.html</anchorfile>
      <anchor>aa3e893b58ea8b1c0347068bbb77aeb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FMMMLayout</name>
    <filename>classogdf_1_1_f_m_m_m_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="enumeration">
      <name>PageFormatType</name>
      <anchor>eac53d0d809e4f45546cc8154827e9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pfPortrait</name>
      <anchor>eac53d0d809e4f45546cc8154827e9bc230b1cee112d637e0c04cdad262a57e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pfLandscape</name>
      <anchor>eac53d0d809e4f45546cc8154827e9bc92c509a3dbda164f0a1c440ca47c571c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pfSquare</name>
      <anchor>eac53d0d809e4f45546cc8154827e9bc6fa15abc5e88db4b78bc6f6bda8469ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QualityVsSpeed</name>
      <anchor>95831362bfb9d60377935523b16c1198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>qvsGorgeousAndEfficient</name>
      <anchor>95831362bfb9d60377935523b16c1198f1c663f916cf6c7c9b58493b42020a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>qvsBeautifulAndFast</name>
      <anchor>95831362bfb9d60377935523b16c1198584b0f3377d9454fdd52a8484a2deefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>qvsNiceAndIncredibleSpeed</name>
      <anchor>95831362bfb9d60377935523b16c1198c150f6481672ad7db6489534efec090c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EdgeLengthMeasurement</name>
      <anchor>0a3834e79759fabd30e84d6785937937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elmMidpoint</name>
      <anchor>0a3834e79759fabd30e84d678593793742334e0c3675b66d737f6fbe15e21ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elmBoundingCircle</name>
      <anchor>0a3834e79759fabd30e84d6785937937d3c9c5431eb328ee540e2475dc98b27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AllowedPositions</name>
      <anchor>92945a7e4c07dc6dc0ee25eda00316e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>apAll</name>
      <anchor>92945a7e4c07dc6dc0ee25eda00316e23e353d6e745dab29db43efd7b48a4ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>apInteger</name>
      <anchor>92945a7e4c07dc6dc0ee25eda00316e2a684a9c650059ced26d82a981d631ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>apExponent</name>
      <anchor>92945a7e4c07dc6dc0ee25eda00316e20e1ad96f756db454f6580f0dca07dae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TipOver</name>
      <anchor>e3cea4cc6a1396372d3c822e78dbd7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>toNone</name>
      <anchor>e3cea4cc6a1396372d3c822e78dbd7f46e3dded5c2c5cdc27e7d743ebfbac518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>toNoGrowingRow</name>
      <anchor>e3cea4cc6a1396372d3c822e78dbd7f46e5ebddc5a2877cf42fc72a841fe93f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>toAlways</name>
      <anchor>e3cea4cc6a1396372d3c822e78dbd7f4a561eabd2f445672d84096baa0b270b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PreSort</name>
      <anchor>b3f3b995b1810a83e5c190723759626e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>psNone</name>
      <anchor>b3f3b995b1810a83e5c190723759626e4c0bcbb5250afa76154a73c6606ea6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>psDecreasingHeight</name>
      <anchor>b3f3b995b1810a83e5c190723759626e5d38ee3ea6a928f5f2569d12a462d1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>psDecreasingWidth</name>
      <anchor>b3f3b995b1810a83e5c190723759626ec9658d16230e65491d98c4c8e5f5eb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GalaxyChoice</name>
      <anchor>fff6ff7cf86d7061c56af5fce8908898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gcUniformProb</name>
      <anchor>fff6ff7cf86d7061c56af5fce8908898fa137c6e1f358a6e1e8fa14b0d4cd415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gcNonUniformProbLowerMass</name>
      <anchor>fff6ff7cf86d7061c56af5fce890889847f9cf5d7640a44975772391571aa1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>gcNonUniformProbHigherMass</name>
      <anchor>fff6ff7cf86d7061c56af5fce8908898a1fa1d3a438fd1fbe8d06be2f17f27fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MaxIterChange</name>
      <anchor>8dd4c1299d0c9751e550b556da04850c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>micConstant</name>
      <anchor>8dd4c1299d0c9751e550b556da04850c324caea3f8240e3e3403deee122397fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>micLinearlyDecreasing</name>
      <anchor>8dd4c1299d0c9751e550b556da04850c9de03e70b056d36a49bb1d0853f4ce00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>micRapidlyDecreasing</name>
      <anchor>8dd4c1299d0c9751e550b556da04850ccdbfcdc44a0d6eb4d858c30de381dbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>InitialPlacementMult</name>
      <anchor>7a7f5f46777856675d203c52d3ae65d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ipmSimple</name>
      <anchor>7a7f5f46777856675d203c52d3ae65d5f94b2a1c888531a03232feb309da00e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ipmAdvanced</name>
      <anchor>7a7f5f46777856675d203c52d3ae65d5521208ce6dbc11880ca6cb6aff055bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ForceModel</name>
      <anchor>a4ed971b8615ed145fe676f8d2444b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fmFruchtermanReingold</name>
      <anchor>a4ed971b8615ed145fe676f8d2444b17e8891a086bd2112bd7d2fa4416e7c21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fmEades</name>
      <anchor>a4ed971b8615ed145fe676f8d2444b17b9eacdfe21dcb2cfe6e26dac7964060e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fmNew</name>
      <anchor>a4ed971b8615ed145fe676f8d2444b17347eaeb2435f0b7ca0ddc2ab166cd64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>RepulsiveForcesMethod</name>
      <anchor>80fe07ab985ade2f8a2f6f60486c0f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rfcExact</name>
      <anchor>80fe07ab985ade2f8a2f6f60486c0f4e45d0db73378bb27ac75ffcd1d8b29c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rfcGridApproximation</name>
      <anchor>80fe07ab985ade2f8a2f6f60486c0f4e51790170dbbb8e183312d5d885e356ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rfcNMM</name>
      <anchor>80fe07ab985ade2f8a2f6f60486c0f4e64d48960526ef1f84ef92440f104c5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StopCriterion</name>
      <anchor>d68ee67ccb8da21868d047b75cd27582</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scFixedIterations</name>
      <anchor>d68ee67ccb8da21868d047b75cd2758276a325b9fe0c17d36774825ff6e8299c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scThreshold</name>
      <anchor>d68ee67ccb8da21868d047b75cd275826173d0ae5adc54833c750f531a0d8176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scFixedIterationsOrThreshold</name>
      <anchor>d68ee67ccb8da21868d047b75cd27582fc6b366f13021d3ed607f496a52bf345</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>InitialPlacementForces</name>
      <anchor>6ab5ffc90ce314a56c0b7a1552407003</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ipfUniformGrid</name>
      <anchor>6ab5ffc90ce314a56c0b7a1552407003124ec73c70ca8092e4567fea88af6acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ipfRandomTime</name>
      <anchor>6ab5ffc90ce314a56c0b7a1552407003e317a1a84f5d2c491aec1beecf1ea792</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ipfRandomRandIterNr</name>
      <anchor>6ab5ffc90ce314a56c0b7a15524070030e8e50e837846f0d759b874590edb75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ReducedTreeConstruction</name>
      <anchor>dafc2720cb02bc55b228129e81e87e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rtcPathByPath</name>
      <anchor>dafc2720cb02bc55b228129e81e87e76b528950c41f2b0b1f8385eb4deda2bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rtcSubtreeBySubtree</name>
      <anchor>dafc2720cb02bc55b228129e81e87e7620ae2ba62abb9f67e6a96e7633163ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SmallestCellFinding</name>
      <anchor>d23a6882e663ec978f26f8d920b62428</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scfIteratively</name>
      <anchor>d23a6882e663ec978f26f8d920b624283928c221303569c709f69f89008e87a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scfAluru</name>
      <anchor>d23a6882e663ec978f26f8d920b62428d7894bec32dba5b2ecb062db1b05315d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FMMMLayout</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>b0a4f93efcfc42fc56bee74145f0da54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FMMMLayout</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>5e3451f3c7c94f54e0b9ca6752bd08bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>a18b65d041d64f0326fd082a4c1338ac</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>4bc0d5267ae510f70bedeaee361e9552</anchor>
      <arglist>(GraphAttributes &amp;AG, const EdgeArray&lt; double &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>05f7d08816ef0a6b2781526b1ddb9904</anchor>
      <arglist>(GraphAttributes &amp;AG, char *ps_file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8724c8d3bfcae5b380cd46f9a99018c7</anchor>
      <arglist>(GraphAttributes &amp;AG, const EdgeArray&lt; double &gt; &amp;edgeLength, char *ps_file)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCpuTime</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>0d61e00e353d66807d21edee346a2d5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useHighLevelOptions</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>2930ea213c873c86d8d16402853c8a90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useHighLevelOptions</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>b1d1278e46092869f7d652268938bc60</anchor>
      <arglist>(bool uho)</arglist>
    </member>
    <member kind="function">
      <type>PageFormatType</type>
      <name>pageFormat</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>2a0332e6375ea9c94d4f747ef6d06f0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageFormat</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3bba7a18d8f039ef17afa34cd04fc063</anchor>
      <arglist>(PageFormatType t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unitEdgeLength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>60bd962b83cf0d1efde7ca3c7cd517aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unitEdgeLength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>956019bef50b31d68ec5b076288406f5</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newInitialPlacement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8bbbbdb83440b10ab8e6c1561823aec5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newInitialPlacement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f27bf7abb4c329c9c0c737e61e7602da</anchor>
      <arglist>(bool nip)</arglist>
    </member>
    <member kind="function">
      <type>QualityVsSpeed</type>
      <name>qualityVersusSpeed</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>6a1358f527e8ecf7aa2d0f361c488deb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qualityVersusSpeed</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>47da9b083595346a4ed3bcfcf6bd9794</anchor>
      <arglist>(QualityVsSpeed qvs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randSeed</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>92e7dbee844df817a5a44d4457d9d8a5</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>randSeed</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>199197012c5ef22064906197316d6776</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EdgeLengthMeasurement</type>
      <name>edgeLengthMeasurement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c9721444bc54fb042a04149aa61e5f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeLengthMeasurement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>db24315410747e72cd45b32d60d7285f</anchor>
      <arglist>(EdgeLengthMeasurement elm)</arglist>
    </member>
    <member kind="function">
      <type>AllowedPositions</type>
      <name>allowedPositions</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>cc27b60936aac5807ec375d56b397da7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allowedPositions</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>693723b66b9a76850215b91e987ebae0</anchor>
      <arglist>(AllowedPositions ap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIntPosExponent</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>51708586e48b78861ed6ef3b88a2ead0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIntPosExponent</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>9efa8edc29a2b2c32f0cbdca88e64f92</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>88ca5de34d87f8489317f0492be88d69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>935df3c14103ccfc1b56cccec7d45ffc</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stepsForRotatingComponents</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>2a2b90329d4b5347287bb7943acd0896</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepsForRotatingComponents</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>34a8e10b6411a7c903bdb6fce6f1ab88</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>TipOver</type>
      <name>tipOverCCs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>33ac83019a4b2f30efb872ef26b6d07b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tipOverCCs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>9c5ae3db39b58f4ec8883bfcc26102b4</anchor>
      <arglist>(TipOver to)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>a5fa573882b82b805d16e2b16c1e2dfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c870d20f3b118e604b4119daef73f75d</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>PreSort</type>
      <name>presortCCs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f1ff4b66abda3d9919788f5bc9072705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presortCCs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>b15322ad1ff52a334fe7cb630bb29fec</anchor>
      <arglist>(PreSort ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minGraphSize</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>1f66825eb340acd237e246b3d1fcedef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minGraphSize</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>d723f991ecfc0475e466ad59b52d9e12</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>GalaxyChoice</type>
      <name>galaxyChoice</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>01d8de91484fb598f62c1ac0bd16e97f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>galaxyChoice</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>16c44c8f9d63b769c6e6abc96cff1a63</anchor>
      <arglist>(GalaxyChoice gc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>randomTries</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>1c4d0c104277543909820fe94d7e671a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomTries</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>46cded6115efa6e79bb0ea72618eedeb</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>MaxIterChange</type>
      <name>maxIterChange</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>09022381fa4fd9fc6644e09499506443</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterChange</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>1df2b3ed32d22c29dadb12d81da9faa1</anchor>
      <arglist>(MaxIterChange mic)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIterFactor</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>315d793f351f399831d4c52e722abc34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterFactor</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8a31b592c97d8be88349e76f7193e179</anchor>
      <arglist>(int f)</arglist>
    </member>
    <member kind="function">
      <type>InitialPlacementMult</type>
      <name>initialPlacementMult</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>38cafafd7b6ebd95632153ad6fdfe64d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialPlacementMult</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ffb0b486ef4aab70d6067df9874c6d05</anchor>
      <arglist>(InitialPlacementMult ipm)</arglist>
    </member>
    <member kind="function">
      <type>ForceModel</type>
      <name>forceModel</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>2244711e395b254124746b778883b0bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceModel</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>28aefc6a42a1b6632be309a19aedab68</anchor>
      <arglist>(ForceModel fm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>springStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3ce016cb5102deb051baadafae891469</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>springStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ef9c605ce6b16fabdb1c56b08f3289c1</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>repForcesStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c37345271ca07bf428a0117ac0a722a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repForcesStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>50177da736edfa850aaf294b8c142b9a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>RepulsiveForcesMethod</type>
      <name>repulsiveForcesCalculation</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ea814e0ce79c9bc8ec6e13e6711f2c31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repulsiveForcesCalculation</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>625be46f89c03b9ade9bb71ccaabf101</anchor>
      <arglist>(RepulsiveForcesMethod rfc)</arglist>
    </member>
    <member kind="function">
      <type>StopCriterion</type>
      <name>stopCriterion</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>82bda0d58baa08e0170ed33c9aed419c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopCriterion</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>1c03a5da7a249e5aa9f1a2264c99396e</anchor>
      <arglist>(StopCriterion rsc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>de239215bf77dffdfe637d84058c27c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>85cfe2c1637dea74924411e6bb95e63a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedIterations</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>5bbcb45f1cf789e50ccfa93691a639b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixedIterations</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>d333f5c01a689082b92a7a7a2b094457</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>forceScalingFactor</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ebb891355dd5a322244a56f8cd9d7e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceScalingFactor</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>959d0193624bbf83ee41e2d34eb5583a</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coolTemperature</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f33fe3faf75c3ed4408f11a932b9df03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coolTemperature</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>4aece10a026e1c66237bc979c52a3a75</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>coolValue</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>a286ce331ded5bd97f8ae3f74e5df421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coolValue</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>cc0a74f7db6ff32229f1ea5f37321edd</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>InitialPlacementForces</type>
      <name>initialPlacementForces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>b480e09e3c15d434119e9958190d8a96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialPlacementForces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>467e102ca1c2f613581248b0cc5f690f</anchor>
      <arglist>(InitialPlacementForces ipf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resizeDrawing</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>4b9892e90542e12410e186c19be41d58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeDrawing</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>7c8ca1dd928622f8846305fe6003f985</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>resizingScalar</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>9306921042d636fb5119d5a1ec0e9fa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizingScalar</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8d70ad68b6ba2c81424463eef230622a</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fineTuningIterations</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>44ad4547cfb86b3fbd87e253cbcb54e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fineTuningIterations</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>129cc34bf1864290d165e7e7096d90ed</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fineTuneScalar</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3b25149a2346ebb88776e21ad362b61b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fineTuneScalar</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>12c5e3f856291551bd32b9de7a1b058b</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adjustPostRepStrengthDynamically</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>84a93848ecc518d6d1372bfaac1923de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustPostRepStrengthDynamically</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>b6d1c8d63f9d608108bc004d759156ea</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>postSpringStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f1eed527914d40d2bc491d9378a8d42e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postSpringStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>5acfc3d4366395f7e1cfa1eef1b19929</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>postStrengthOfRepForces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8b99df780d57b60970c95c2782ebb483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postStrengthOfRepForces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>e24086c282b6c30c3b2978e1207a2dab</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>frGridQuotient</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3482f7040f7783147f2ff9e733327427</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frGridQuotient</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>6a985afaeb023afbd576767c9efe5dd6</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>ReducedTreeConstruction</type>
      <name>nmTreeConstruction</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8556e7a773abae287f66ee923ab16551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nmTreeConstruction</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>57c6d63adba57bdbcc00a825e3e15e06</anchor>
      <arglist>(ReducedTreeConstruction rtc)</arglist>
    </member>
    <member kind="function">
      <type>SmallestCellFinding</type>
      <name>nmSmallCell</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>e6b25a6d7ec4fa80bc8d67d8cd88d52e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nmSmallCell</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>bf757d64ba183ff691eebb9a75f83559</anchor>
      <arglist>(SmallestCellFinding scf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nmParticlesInLeaves</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>67207076d558d7e692e104412a114b5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nmParticlesInLeaves</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>6f7d5847457635f2990f833301cca126</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nmPrecision</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c8f4fdff5e9ac94adc8d3f858b9b19a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nmPrecision</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>7f3d15ec5110f3d160bcebec6a6fd27e</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>call_DIVIDE_ET_IMPERA_step</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>e83386e8bcd02b3976c787bfbe970610</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>call_MULTILEVEL_step_for_subGraph</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f502b0072eb6eb3a3a50091c16ee43f8</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E, int comp_index)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>call_FORCE_CALCULATION_step</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f9c91989070251fee6f30d700ecb377f</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E, int act_level, int max_level)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>call_POSTPROCESSING_step</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>1d032aaf2179ccdbff78493c3d2994a8</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E, NodeArray&lt; DPoint &gt; &amp;F, NodeArray&lt; DPoint &gt; &amp;F_attr, NodeArray&lt; DPoint &gt; &amp;F_rep, NodeArray&lt; DPoint &gt; &amp;last_node_movement)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize_all_options</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>98e6a7e3eda94bf8b82173f25e31fa2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update_low_level_options_due_to_high_level_options_settings</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8f6338c41506661f251fac25c5b5cfd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>import_NodeAttributes</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>4b098c48683bb86fec39203cfd564bc6</anchor>
      <arglist>(const Graph &amp;G, GraphAttributes &amp;GA, NodeArray&lt; NodeAttributes &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>import_EdgeAttributes</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>6df4da66f7a988265240acf476242bef</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; double &gt; &amp;edgeLength, EdgeArray&lt; EdgeAttributes &gt; &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_ind_ideal_edgelength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>6ae5acd0cbe65c9584375bf6e61a1028</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_radii</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f15028f28103787b13116226a43ae8be</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>export_NodeAttributes</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c8788f0cf2e1f85e7d8ec6ffd76d9f51</anchor>
      <arglist>(Graph &amp;G_reduced, NodeArray&lt; NodeAttributes &gt; &amp;A_reduced, GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>make_simple_loopfree</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c031424b1df299eb103fdadcbe0ef93b</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt;E, Graph &amp;G_reduced, NodeArray&lt; NodeAttributes &gt; &amp;A_reduced, EdgeArray&lt; EdgeAttributes &gt; &amp;E_reduced)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>delete_parallel_edges</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3e0dd14800b7bc73514c4eda64e228d0</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; EdgeAttributes &gt; &amp;E, Graph &amp;G_reduced, List&lt; edge &gt; &amp;S, EdgeArray&lt; double &gt; &amp;new_edgelength)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update_edgelength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ec22dcb39610f8076ac5c78366d3a5fa</anchor>
      <arglist>(List&lt; edge &gt; &amp;S, EdgeArray&lt; double &gt; &amp;new_edgelength, EdgeArray&lt; EdgeAttributes &gt; &amp;E_reduced)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>get_post_rep_force_strength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>409726f3822c4482bc5973c170fdf0c7</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>make_positions_integer</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8b10190ae0bce50bb2b3b18e226d4162</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_postscript_drawing</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c35d856b1edafb69c8e568df6bd7036d</anchor>
      <arglist>(GraphAttributes &amp;AG, char *ps_file)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_maximum_connected_subGraphs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>410c5e12d103abfa203f234325f64a89</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E, Graph G_sub[], NodeArray&lt; NodeAttributes &gt; A_sub[], EdgeArray&lt; EdgeAttributes &gt; E_sub[], NodeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pack_subGraph_drawings</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>5f6d73d9d1a006703280a7e9e580c37f</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, Graph G_sub[], NodeArray&lt; NodeAttributes &gt; A_sub[])</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_bounding_rectangles_of_components</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ab8b42f791947fba0d0862d12145bdeb</anchor>
      <arglist>(List&lt; Rectangle &gt; &amp;R, Graph G_sub[], NodeArray&lt; NodeAttributes &gt; A_sub[])</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Rectangle</type>
      <name>calculate_bounding_rectangle</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>902e169902d34060d8a89ff9cf943a1b</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, int componenet_index)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>rotate_components_and_calculate_bounding_rectangles</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>09401b4d5ccf13ab5ad65e4036d656dd</anchor>
      <arglist>(List&lt; Rectangle &gt; &amp;R, Graph G_sub[], NodeArray&lt; NodeAttributes &gt; A_sub[])</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>calculate_area</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f93a258130141f2287f4bb2b96324fd6</anchor>
      <arglist>(double width, double height, int comp_nr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>export_node_positions</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ad55d7f88ca88449d99f08c3fd1f7d9c</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, List&lt; Rectangle &gt; &amp;R, Graph G_sub[], NodeArray&lt; NodeAttributes &gt; A_sub[])</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>delete_all_subGraphs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>cb2876b139a202c115577dc75a8a5892</anchor>
      <arglist>(Graph G_sub[], NodeArray&lt; NodeAttributes &gt; A_sub[], EdgeArray&lt; EdgeAttributes &gt; E_sub[])</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>get_max_mult_iter</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>5b3acacfbe11139f80781e0b439afd55</anchor>
      <arglist>(int act_level, int max_level, int node_nr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_forces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>e01b306ceef642248425e2367dc9ba58</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E, NodeArray&lt; DPoint &gt; &amp;F, NodeArray&lt; DPoint &gt; &amp;F_attr, NodeArray&lt; DPoint &gt; &amp;F_rep, NodeArray&lt; DPoint &gt; &amp;last_node_movement, int iter, int fine_tuning_step)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_boxlength_and_cornercoordinate</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>8fcf03a56a9648178800918f6b967594</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_initial_placement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>a8e6b0db8474c99dbf27d5b0aec8d8df</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_F</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>0f1718257e651a7d54ee58e3e9fd6cd3</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; DPoint &gt; &amp;F)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>make_initialisations_for_rep_calc_classes</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>215020e61f27ed55b9db32849581e260</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_repulsive_forces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>fa95ad8065a75c57b42f657af470f0c1</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deallocate_memory_for_rep_calc_classes</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>584b798c50c651d86a8f08c6d30b3cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_attractive_forces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>7c870f3518f7a3e3480c12a2816f4247</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E, NodeArray&lt; DPoint &gt; &amp;F_attr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>f_attr_scalar</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>20cd82526d8e327ea8eda7663e9c0f8c</anchor>
      <arglist>(double d, double ind_ideal_edge_length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_attr_rep_forces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>d37d8f0f664c78d23bd7cabfdfd37d15</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; DPoint &gt; &amp;F_attr, NodeArray&lt; DPoint &gt; &amp;F_rep, NodeArray&lt; DPoint &gt; &amp;F, int iter, int fine_tuning_step)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>move_nodes</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>453d2be219946f838bc251d889bc3c95</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update_boxlength_and_cornercoordinate</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>d9cf0297537b9cf760e1c277ca0cde56</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>max_radius</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>780f6efb9e476db027888e1c53bb03e1</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_average_ideal_edgelength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>05552b2331f966eed2be65c72dc56d84</anchor>
      <arglist>(Graph &amp;G, EdgeArray&lt; EdgeAttributes &gt; &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>get_average_forcevector_length</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>802499c5ee6d118e6d2214f98e99c302</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; DPoint &gt; &amp;F)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prevent_oscilations</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>a5030a10def9c5ea914fcc5866889063</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; DPoint &gt; &amp;F, NodeArray&lt; DPoint &gt; &amp;last_node_movement, int iter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>18298f302b644a9099de67dcfc56c822</anchor>
      <arglist>(DPoint &amp;P, DPoint &amp;Q, DPoint &amp;R)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_last_node_movement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>fb1df9579c8d87aa992c330c108a4956</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; DPoint &gt; &amp;F, NodeArray&lt; DPoint &gt; &amp;last_node_movement)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>adapt_drawing_to_ideal_average_edgelength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3ebd13304ada7fbfddb5b7f0cc4decce</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, EdgeArray&lt; EdgeAttributes &gt; &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>restrict_force_to_comp_box</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>46351ea7bafef3caa407d5a0a036d409</anchor>
      <arglist>(DPoint &amp;force)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_time</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>58edafbdc3aeb50895381f4347c89136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_useHighLevelOptions</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>7821bb92a296d5dd49fadf18c9cb04fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PageFormatType</type>
      <name>m_pageFormat</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>eaaf91a22f5df5ea0dee9bbb18a93e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_unitEdgeLength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f481f36e7720a579695265cb7642a6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_newInitialPlacement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>2534f2523a9b0c22d5501a36a4bfacee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QualityVsSpeed</type>
      <name>m_qualityVersusSpeed</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>e656fd3eb16a28b066a762b7bc114c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_randSeed</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>d59f08a9745b221ead32f377a585c288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeLengthMeasurement</type>
      <name>m_edgeLengthMeasurement</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>020ac4f20f59c0728b6c07ada72a561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AllowedPositions</type>
      <name>m_allowedPositions</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>05599020f6b08a1e4b5dfe1d3d1ca34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxIntPosExponent</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>60af189a3acb8a999b62c7fc494d9496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>242a1bfe5811f99319f4da64a0bb1a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_stepsForRotatingComponents</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>33ed6671d18acc9e197751bdfd7a8892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TipOver</type>
      <name>m_tipOverCCs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>6c3050b6f04bb6ec4ef022bb2fabffae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minDistCC</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>2e7f28d9ae9fc35c2cea84bf7607f021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PreSort</type>
      <name>m_presortCCs</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>4e7ad87e5672c75d4e2245946664d7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_minGraphSize</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>b142a9eb4fc94ecf857943ea90972cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GalaxyChoice</type>
      <name>m_galaxyChoice</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>81b27da9d5bac3d1ef70d28db321e1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_randomTries</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>6daffe72cad49a8fd116baaf3af277e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaxIterChange</type>
      <name>m_maxIterChange</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f52fe6a819217b3f4810a3ba69dbd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxIterFactor</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>dd474c4be92164598fd7a9b5d72fa730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InitialPlacementMult</type>
      <name>m_initialPlacementMult</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>4fe0e3324a1ae7a7a56684a440c12cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ForceModel</type>
      <name>m_forceModel</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>93d4d13d2e61562632f49c03778b5f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_springStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>9de7370537fbad16eceec32d34dddcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_repForcesStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>a038ff5a0a6c338a2338062efd4e64d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RepulsiveForcesMethod</type>
      <name>m_repulsiveForcesCalculation</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>bddef59c44b8f2c490149b1d3455b6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StopCriterion</type>
      <name>m_stopCriterion</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>0bf58f1473a685b907331919b613d9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_threshold</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f619d265478157988b0106bea451d8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_fixedIterations</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>45edbcc889a0edf7a9298c1d43cad14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_forceScalingFactor</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>555b499b010aaadbe48b85a2eddee66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_coolTemperature</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3132f224db104e0f8f816844a845e4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_coolValue</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3650616ad1a7c9538128a09a81d45388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InitialPlacementForces</type>
      <name>m_initialPlacementForces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>fb54dae52ab060f258e79f00c7575983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_resizeDrawing</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>3b7d9779389f23d146c744289325572e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_resizingScalar</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c070f82556211e380a617957a02549eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_fineTuningIterations</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>742805e987d2dd906cd7d6ae3a7de834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_fineTuneScalar</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>48ca1f9126e08ebd0222af17e83e523d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_adjustPostRepStrengthDynamically</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>26ba0a6e0768411ad8f54a6b25af9c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_postSpringStrength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>f64e43c455eb6872546303331c512edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_postStrengthOfRepForces</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>1b850620b3997ab9661e6325e892c540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_frGridQuotient</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>978cafa735706ad24c6a6e307bbeff1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ReducedTreeConstruction</type>
      <name>m_NMTreeConstruction</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>a6d7280530312af5816d2fee6056c5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SmallestCellFinding</type>
      <name>m_NMSmallCell</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>90e5f53fb64fb6568f39b1ea37025a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_NMParticlesInLeaves</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>60d18376448a0f1800b5a59ccaf6bd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_NMPrecision</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>07dcc221505fab364a26f2a603773dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>max_integer_position</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>b83fadc73918572ce4b0bded0dcfc177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>cool_factor</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>0c609528cc6854923eef26b20348106d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>average_ideal_edgelength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>493ab93d7cca56fa827611e4e20cd0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>boxlength</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>c8eb993f35b94973c29a789b8cc858bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>number_of_components</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>1a94ba9673a25c0e95088a9aee9298cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>down_left_corner</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>07a5ddb3c8493a37c25c85071cd2a603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>radius</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>350e7f04a61ef89f4eed2886a8cff36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>time_total</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>ed6f9cb0d2e7419fb2922dc3f4cb0817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FruchtermanReingold</type>
      <name>FR</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>0b0fc556f0746e8c85a14490d13cc809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NMM</type>
      <name>NM</name>
      <anchorfile>classogdf_1_1_f_m_m_m_layout.html</anchorfile>
      <anchor>914204e2ff2d33431465552b9178fb82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GEMLayout</name>
    <filename>classogdf_1_1_g_e_m_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="function">
      <type></type>
      <name>GEMLayout</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>37cbd331c80a0df7de4c897a845147a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GEMLayout</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>d83c1d9021c8277d20db762c5197d78f</anchor>
      <arglist>(const GEMLayout &amp;fl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GEMLayout</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>dc1fc0a376d0c63f2b7a599fab8ed079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GEMLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>8e5424dd07dd5d5c276d344fbe1010ea</anchor>
      <arglist>(const GEMLayout &amp;fl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>09ebbe93b50bd5fb27e871b415821dd9</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfRounds</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>fb9d135ef9b6304bd1aa830a0fd4e525</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>numberOfRounds</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>585ecd731c67bd4809c50b4bddcedf9c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minimalTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>fd28da214529f4973d845ce9fdd28620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimalTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>325a68112fbb6fd28313a81f30c6d0d4</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initialTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>5ace2164dc3bbd24d154e9142cf73b7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>c012ca4f9cb5ebe3cfde3c67dd6b6baf</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gravitationalConstant</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>1b464cbd1e75c97fc0286397c6045653</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gravitationalConstant</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>950e78f94e31fdb8f37603369f85cfcf</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>desiredLength</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>36ee678183d8fb9d0e02be090f98000b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>desiredLength</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>ec23ed21c670a545393bc636cfd4aaf5</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maximalDisturbance</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>83f24aa777f2aaac7400f612961670d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximalDisturbance</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>809100f656685964fd79c946e9a4d991</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationAngle</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>89107536ad9f2cc1c0e00067a755bed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotationAngle</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>749a0a896e995ff76bdd68dcb3fbf356</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>oscillationAngle</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>a6932ac08acc1a137f01ddbab7f176c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oscillationAngle</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>9b719fc26801698048d9e716401b7e06</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rotationSensitivity</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>f1cdf74931b0718a695adee6452228b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotationSensitivity</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>93605ffd6f724605e668e8eeb5d9e455</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>oscillationSensitivity</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>ee5b5701cf21c6f476181635b4262070</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oscillationSensitivity</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>873c349b3242827b6ee73ab98e878d9f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>attractionFormula</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>a487b0547ca56464524719f35ab655fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attractionFormula</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>d140975758b9484f1178626548c5f751</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>7dd7c9de334bdb664d54496aeed0f0e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>9286f65ba2c81a4c42dbab31b9842391</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>fd03ca816fc4a3e24f583cc2def9790d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>b5c93ae4078db7748e29c17584a8abab</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>277cc39f7aa4819076416c510ea5f6f3</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>2fea6cf0474a766c897c068c9e25579f</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>ef13168874203ee9bdf816af72e41498</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>9f804a39f53c6844664a05c6f721c7e5</anchor>
      <arglist>(double x, double y=0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>weight</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>524b051db0396ddee802643422eee456</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeImpulse</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>085722db246899f81826c514f6171de3</anchor>
      <arglist>(GraphCopy &amp;GC, GraphCopyAttributes &amp;AGC, node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNode</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>ec6d4470216e4d2bfb84e787388f367a</anchor>
      <arglist>(GraphCopy &amp;GC, GraphCopyAttributes &amp;AGC, node v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numberOfRounds</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>ecf5e71dc46b7d3e4d525e12607d199f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minimalTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>3062444961e2fcd384bb3c19123f77c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_initialTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>54fbd3bb717304d9802dcae2d261a27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_gravitationalConstant</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>ed2e11af52cb5f1395aa088e8e00ed5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_desiredLength</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>ef6c2b54112ac3cb46cc059a3730e123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_maximalDisturbance</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>72595b53023b8ee8a9575d7b63829a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_rotationAngle</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>5997c9e77013a1bf6d3e4a77e97ff33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_oscillationAngle</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>a9be4537d779a1338c43c025de57f0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_rotationSensitivity</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>5f785e77334e7ec606fc512aeb3163cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_oscillationSensitivity</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>88f5e095a2d67a705db57dc6752a5a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_attractionFormula</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>e1b146b91b084fa048f2871163caacd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minDistCC</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>69a1691929bb212283313a5103ec1f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>3fb4339dec061f4ac18570c4bc7559db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_impulseX</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>6a633c5e837b2ee430af796aa09374d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_impulseY</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>fd52a107c758acc85054b42d810d6336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_localTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>4b046dcee59fcd384eb48d0a9ec05a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_skewGauge</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>9d2621c28c1e44b90fbb6d9b6690a21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_barycenterX</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>65898960c182453b9f9662579022c83a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_barycenterY</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>f5727a1935f1967c3b31bbdb69da41cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_newImpulseX</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>f6a590596993c2b4b332d53bf19cd603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_newImpulseY</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>a915ae2253a5bc37e581f61a9b57905c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_globalTemperature</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>f24ea4aff85b51b6ee2168499b142f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_cos</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>4f3edee7c1ff0f96b5f20fb886de7be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_sin</name>
      <anchorfile>classogdf_1_1_g_e_m_layout.html</anchorfile>
      <anchor>99078ae4c873fefa97154e241039475b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SpringEmbedderFR</name>
    <filename>classogdf_1_1_spring_embedder_f_r.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="enumeration">
      <name>Scaling</name>
      <anchor>1465ebb9ea1f1d4681d33f18ad171d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scInput</name>
      <anchor>1465ebb9ea1f1d4681d33f18ad171d2b7d51f43d014802fa4b92212908111545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scUserBoundingBox</name>
      <anchor>1465ebb9ea1f1d4681d33f18ad171d2bfab08bdea8d41289a4412cf63adb661c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>scScaleFunction</name>
      <anchor>1465ebb9ea1f1d4681d33f18ad171d2b158fd9951ecf6aa8fb9d69d069d40a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpringEmbedderFR</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>d7bf8b9b054f8b989c5ab3e919953fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpringEmbedderFR</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>f0faac9f773de5629e678f189f49ed4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>45943ed01860bccd129ae54883359158</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>b73f384d68dd26df68e9f868e1643f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterations</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>486392173be6a7d85d08fb1b8cf92b4d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>noise</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>5a7f4055176a72aca0452d68d3eac49a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noise</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>399bfe742346c7761aa225d662967267</anchor>
      <arglist>(bool on)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>4a1eb56e7a796968464b8aee9438b8d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>8e849142e8deef9b1b7a99a2f27171f4</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>c0b1eac601017aa9870882f812637165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>6d06849ba9d97ca771546bb26310a0a5</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>Scaling</type>
      <name>scaling</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>38be9a72c5747ce5dded07b17e2a5313</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaling</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>e750364808b345b2ee99de47dc8871da</anchor>
      <arglist>(Scaling sc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scaleFunctionFactor</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>d1e3e5b276f0b82f90a6c354e7d70118</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleFunctionFactor</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>f3bd46b2f4cc790ca016ae7f703b0031</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>userBoundingBox</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>c043fa081588220cb43e919aa2b86847</anchor>
      <arglist>(double xmin, double ymin, double xmax, double ymax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>a9fe78b12d6aa507db49fb9de8840894</anchor>
      <arglist>(GraphCopy &amp;G, GraphCopyAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>mainStep</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>8ecaa3fda0f1b5fbe4664fdceb3e9188</anchor>
      <arglist>(GraphCopy &amp;G, GraphCopyAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>20d13c630cfb0667b0f3cbe4821fe9d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>mylog2</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>adcf9edfad8255a191d5a7cac144fa4c</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_lit</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>23b1e0dbe5bfa8918cec08f04e64017e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_cF</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>1c934cbc2777680ab9595f47667dcd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_width</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>0953679c31ccf780d1f93da3eb645a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_height</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>266abe5ab7f405ea74d469484afa6d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_txNull</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>d6eefdc2aa893b0a13d8c9d24c31e82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_tyNull</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>a2fb5fabd334cdb417a792450b41a0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_tx</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>54243cf3c1d3e4a093001192e4a8500e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_ty</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>b3dbfd3a9b17b4e62eac78de15ff91ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_k</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>5d1a81436ec43b703073d7e77ab2b122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_k2</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>053c34ba9e44164599d1750a972e56ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_kk</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>4682bb2c6d8362f9900ac2a09c567151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_ki</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>eef0c6cb1460cd637de8055efb17fa45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_xA</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>276db55f88662d3a4ef92ec7914db9a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_yA</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>8726291105e17f4708cd7c8d347f6b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array2D&lt; List&lt; node &gt; &gt; *</type>
      <name>m_A</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>af92d499d6aefed30812b23bd556447a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_iterations</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>73ce848cf7e9588f67c304dbe2baa11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_fineness</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>b1f8e71fdea1a1dc614e3a695287e11d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_edgeLength</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>856e6d7e3795bcd870a75f67512c4901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_xleft</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>26445820a366f51450fd0266b0e3cf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_xright</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>8e772ef25ed18318125ed595157d0e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_ysmall</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>1e89fc509f3500a3fd33e14534d3164d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_ybig</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>232a078a49e7de40a3fd52afb146a143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_noise</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>a01e76b87e0561c2ca296128b8dee4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scaling</type>
      <name>m_scaling</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>49f4bb4bca3a379ea3c928854ef9f03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_scaleFactor</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>0b4b1bc387bbb43beb13aff667339959</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_bbXmin</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>4c3bfae77fff257ee0e7e6ef754a405a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_bbYmin</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>bbe6b1a319fd51da685fbe098b618243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_bbXmax</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>8cb08f9cbd99b73635a5b047a6607cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_bbYmax</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>5909eff26d6e7f8d93ed6d1b707b6179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minDistCC</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>353ff3e8cac283406dca93128f0bff67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_spring_embedder_f_r.html</anchorfile>
      <anchor>19397ca6ce609715d34cc7ffae9dda3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CoinCallbacks</name>
    <filename>classogdf_1_1_coin_callbacks.html</filename>
    <member kind="enumeration">
      <name>CallbackType</name>
      <anchor>290d7e7278167603bcd9dfefb2fd84ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CT_Cut</name>
      <anchor>290d7e7278167603bcd9dfefb2fd84aea5734eac58a915951adbdf98911f209a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CT_Heuristic</name>
      <anchor>290d7e7278167603bcd9dfefb2fd84ae26b0f482f94dade7a277a45cf55b8212</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CT_Incumbent</name>
      <anchor>290d7e7278167603bcd9dfefb2fd84ae3158e2ff9847b5874fb77b9542eb48bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CT_Branch</name>
      <anchor>290d7e7278167603bcd9dfefb2fd84aeda30731f0ab592377de72f25095fe235</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CutReturn</name>
      <anchor>e12a026997c4eb24953e895b9020e267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CR_Error</name>
      <anchor>e12a026997c4eb24953e895b9020e267937b872ce6d2b5ba77ab8bba45410ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CR_SolutionValid</name>
      <anchor>e12a026997c4eb24953e895b9020e2670a28018851dda6869af230ece1b81f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CR_AddCuts</name>
      <anchor>e12a026997c4eb24953e895b9020e267c7799a5b4e110696f1b059eb7324a100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CR_DontAddCuts</name>
      <anchor>e12a026997c4eb24953e895b9020e267f357f0c179086f894ee9bd0b63f307fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CR_NoCutsFound</name>
      <anchor>e12a026997c4eb24953e895b9020e267459bf9ca673ae0d2197f86e1bbfcf04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>HeuristicReturn</name>
      <anchor>51c7a2085f2af6ca7ed35db4f79acf78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HR_Error</name>
      <anchor>51c7a2085f2af6ca7ed35db4f79acf785c78bcb1eb18d2275d6c945510d71571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HR_Ignore</name>
      <anchor>51c7a2085f2af6ca7ed35db4f79acf781678dae255e4b149c28e38c4223b2109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HR_Update</name>
      <anchor>51c7a2085f2af6ca7ed35db4f79acf78b073a0a7e0862dd7b18f789130c431af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>IncumbentReturn</name>
      <anchor>738c83c32a4c2df00e2564fa4db42c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IR_Error</name>
      <anchor>738c83c32a4c2df00e2564fa4db42c61d923024aeb9780850c5d8b855bdfb0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IR_Ignore</name>
      <anchor>738c83c32a4c2df00e2564fa4db42c613ced5bbda70dad4956053056764604f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IR_Update</name>
      <anchor>738c83c32a4c2df00e2564fa4db42c615ec8526c2796e95910d915792bc66696</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CutReturn</type>
      <name>cutCallback</name>
      <anchorfile>classogdf_1_1_coin_callbacks.html</anchorfile>
      <anchor>8f264c4db932a3ba23d4b9b2ed9ede8e</anchor>
      <arglist>(const double objValue, const double *fracSolution, OsiCuts *addThese)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HeuristicReturn</type>
      <name>heuristicCallback</name>
      <anchorfile>classogdf_1_1_coin_callbacks.html</anchorfile>
      <anchor>00ca0d47e83926272293cd68bc069bca</anchor>
      <arglist>(double &amp;objValue, double *solution)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IncumbentReturn</type>
      <name>incumbentCallback</name>
      <anchorfile>classogdf_1_1_coin_callbacks.html</anchorfile>
      <anchor>79e8d6d740e47b0bd311d8a9fe7819d4</anchor>
      <arglist>(const double objValue, const double *solution)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>registerCallbacks</name>
      <anchorfile>classogdf_1_1_coin_callbacks.html</anchorfile>
      <anchor>8310cc4b6cd32ee074e20322b6e9c12d</anchor>
      <arglist>(OsiSolverInterface *_posi, int callbackTypes)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CoinManager</name>
      <anchorfile>classogdf_1_1_coin_callbacks.html</anchorfile>
      <anchor>777104bbf1ff1e34cb084062347ecccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CoinManager</name>
    <filename>classogdf_1_1_coin_manager.html</filename>
    <member kind="function" static="yes">
      <type>static OsiSolverInterface *</type>
      <name>createCorrectOsiSolverInterface</name>
      <anchorfile>classogdf_1_1_coin_manager.html</anchorfile>
      <anchor>63c68febc82635e032a109b898999ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OsiSolverInterface *</type>
      <name>createCorrectOsiSolverInterface</name>
      <anchorfile>classogdf_1_1_coin_manager.html</anchorfile>
      <anchor>494d2bedd3c6e98618c43715a53b035e</anchor>
      <arglist>(CoinCallbacks *ccc, int callbackTypes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logging</name>
      <anchorfile>classogdf_1_1_coin_manager.html</anchorfile>
      <anchor>786509023a316dff3b7e564978e2d858</anchor>
      <arglist>(OsiSolverInterface *osi, bool logMe)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoLineBufferPosition</name>
    <filename>classogdf_1_1_dino_line_buffer_position.html</filename>
    <member kind="function">
      <type></type>
      <name>DinoLineBufferPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>216f8b39d7a44f9a265ecd0e548dc5a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DinoLineBufferPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>021b27867c91b9cbce8dfdfdf11c8007</anchor>
      <arglist>(int lineNumber, int lineUpdateCount, int linePosition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DinoLineBufferPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>f41f560e636188a0f853213aa902d85a</anchor>
      <arglist>(const DinoLineBufferPosition &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineNumber</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>87a98929c7a20c8d9fd5c35bf26b98ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLineUpdateCount</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>75407c478155c82e57d0a5f390d2542a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLinePosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>5bbc203a3849efc651cda3d36de4e3ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>f791aabebf9faee5ea83968a983fb05a</anchor>
      <arglist>(int lineNumber, int lineUpdateCount, int linePosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>d3710c29a85f2a117fda752b9f4b7922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>dfa7df9476b263e9e909b4cb1c3baed7</anchor>
      <arglist>(const DinoLineBufferPosition &amp;position) const </arglist>
    </member>
    <member kind="function">
      <type>const DinoLineBufferPosition &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>2b548ad9d5d8eb607d01d185f0664ade</anchor>
      <arglist>(const DinoLineBufferPosition &amp;position)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_lineNumber</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>6cf4e50c252df58486aab2f5838694b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_lineUpdateCount</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>64f6b77460b2057d8d3ab00814168b0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_linePosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer_position.html</anchorfile>
      <anchor>4ae3988aaa6ca6e2ea6f3a542bcb1e6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoLineBuffer</name>
    <filename>classogdf_1_1_dino_line_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>DinoLineBuffer</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>6c387f935a17191c562b4684875a3d59</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DinoLineBuffer</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>77f9edc4d8b09f1ee592b60b3edb4d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DinoLineBufferPosition</type>
      <name>getCurrentPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>af8b278c287f728fcc6dcce41ee82b90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getCurrentCharacter</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>33343a2f954c0ab79d4cb13677e554ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInputFileLineCounter</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>14c4c39a1dad3821dea26412c978a1d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>moveToNextCharacter</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>f50e794eaf64584121b0ac29ebbbe6d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCurrentPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>5d3bbd4df4be024c984ef725c48e366b</anchor>
      <arglist>(const DinoLineBufferPosition &amp;newPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipWhitespace</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>11df00f3356de1a14e10f9296e5c9719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extractString</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>2ea5bb92187270dc5dc87cbb67ca5977</anchor>
      <arglist>(const DinoLineBufferPosition &amp;startPostion, const DinoLineBufferPosition &amp;endPosition, char *targetString)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>c_maxStringLength</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>8d08b2740817d5a384c8507ea3849486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>c_maxLineLength</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>743da66bc663b3164a29b18b8e665548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>c_maxNoOfLines</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>8ca254b58f53dc95b079ed587e7aca7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>getCurrentCharacterPointer</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>afcbadc46b86bc147f699ebd62613727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setCurrentCharacter</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>d5ba9b933e8a67a5715abcf39542a3d1</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isValidPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>4143a5c7d9d183741a6108903b1b059d</anchor>
      <arglist>(const DinoLineBufferPosition &amp;position) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>istream *</type>
      <name>m_pIs</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>38677ce5affb6af39f86f8bd0bdab28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>m_lineUpdateCountArray</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>3ebc8bf0409dd7840b878d3b71be1dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pLinBuf</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>1f40059387ae7ca6bf4ebcf006b39467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DinoLineBufferPosition</type>
      <name>m_currentPosition</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>699b0700a00a15f33bfe3514cbb28cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numberOfMostRecentlyReadLine</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>c0df63f31cf85c94fc1f3d8e8d3955de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_inputFileLineCounter</name>
      <anchorfile>classogdf_1_1_dino_line_buffer.html</anchorfile>
      <anchor>7b5db7d6ff1345a455422686db0a55b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoTools</name>
    <filename>classogdf_1_1_dino_tools.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stringToDoubleArray</name>
      <anchorfile>classogdf_1_1_dino_tools.html</anchorfile>
      <anchor>66557aa675de96f06eb315c3cb0fba24</anchor>
      <arglist>(const String &amp;str, Array&lt; double &gt; &amp;doubleArray)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reportError</name>
      <anchorfile>classogdf_1_1_dino_tools.html</anchorfile>
      <anchor>2befd2a0d84521d888b0a6dbac73e02a</anchor>
      <arglist>(const char *functionName, int sourceLine, const char *errorMessage, int inputFileLine=-1, bool abort=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoUmlDiagramGraph</name>
    <filename>classogdf_1_1_dino_uml_diagram_graph.html</filename>
    <member kind="enumeration">
      <name>UmlDiagramType</name>
      <anchor>347b12cde78d60bbaedd5a0f1b203a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>classDiagram</name>
      <anchor>347b12cde78d60bbaedd5a0f1b203a971fc468a4d7b888148d98db6d7e350d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>moduleDiagram</name>
      <anchor>347b12cde78d60bbaedd5a0f1b203a970e247e2955af3755249cfa3dd4d9931e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sequenceDiagram</name>
      <anchor>347b12cde78d60bbaedd5a0f1b203a97120814960d0825c4be681ab38c4ecf75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>collaborationDiagram</name>
      <anchor>347b12cde78d60bbaedd5a0f1b203a97bc199923caff00df7c3096046adcc7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>componentDiagram</name>
      <anchor>347b12cde78d60bbaedd5a0f1b203a9752d4c7b87507cecd65211743d6a794bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknownDiagram</name>
      <anchor>347b12cde78d60bbaedd5a0f1b203a9744d676225afe8a766e17c458f5e34da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DinoUmlDiagramGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>ab31ba6f91b8102f8734b9b5a7f5370c</anchor>
      <arglist>(const DinoUmlModelGraph &amp;umlModelGraph, UmlDiagramType diagramType, String diagramName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DinoUmlDiagramGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>ae272959c242eade1c59a77415290fa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNodeWithGeometry</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>9f3f44e090323b273db77811bfbba42c</anchor>
      <arglist>(NodeElement *node, double x, double y, double w, double h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdge</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>3b5bfbb5891717c7c0837ed4df328cd2</anchor>
      <arglist>(EdgeElement *edge)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDiagramName</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>680cb30fc4373d7db6c47ebe039cbdeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDiagramTypeString</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>17cf12afb0e576f1197111a076a88a2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; NodeElement * &gt; &amp;</type>
      <name>getNodes</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>74a9c68b133626185116bac91316d3ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; EdgeElement * &gt; &amp;</type>
      <name>getEdges</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>2dde98a9f578bf514ec2dddc4fede4a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; double &gt; &amp;</type>
      <name>getX</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>506683f38b7af1d3b613134e7991786d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; double &gt; &amp;</type>
      <name>getY</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>7efdaba99d433c82a25929a3eef6f21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; double &gt; &amp;</type>
      <name>getWidth</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>df4bc5e77970c181e59a442b319cc5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; double &gt; &amp;</type>
      <name>getHeight</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>452654e340c30210cea410a20de8b8be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DinoUmlModelGraph &amp;</type>
      <name>m_modelGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>608fb363ec94cb941e0dec4ef9573121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>String</type>
      <name>m_diagramName</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>b5f73de06b4e511b4939a1cdf1d67eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UmlDiagramType</type>
      <name>m_diagramType</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>5892de0d629cdeb5c471a71da170970a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; NodeElement * &gt;</type>
      <name>m_containedNodes</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>31efbc548cca103782088ab77d87a12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; EdgeElement * &gt;</type>
      <name>m_containedEdges</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>e9199412737ebc51a0ca5ce90a4c3caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; double &gt;</type>
      <name>m_x</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>c6b49c2fec8c50a7268765874391bcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; double &gt;</type>
      <name>m_y</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>fc6d7a0e9bf340aa3115ce6602b942da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; double &gt;</type>
      <name>m_w</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>4938cc5005bf4404dd830fbe52fe2f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; double &gt;</type>
      <name>m_h</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>de8b8b2ce33a50f2dcb4755fbeb3a3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_dino_uml_diagram_graph.html</anchorfile>
      <anchor>ab8b36730a63e390e5951e8752e80ea8</anchor>
      <arglist>(ostream &amp;, const DinoUmlDiagramGraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoUmlModelGraph</name>
    <filename>classogdf_1_1_dino_uml_model_graph.html</filename>
    <base>ogdf::Graph</base>
    <member kind="function">
      <type></type>
      <name>DinoUmlModelGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>4c8af6695d293aa6a2e170d96f85d4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DinoUmlModelGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>668ffd243e5c689e22246a2b1f6e564f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModelName</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>7a1778fd4a512ff0469c66ed5f0aced6</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getNodeLabel</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>d4fe36750e738a9da0b928464aa61963</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>labelNode</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>a9c6226d6677063775cf00f8737b9f8d</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const Graph::EdgeType &amp;</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>51eab165cd094b0a7c7ee6fc3508cf93</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>Graph::EdgeType &amp;</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>d46391fdeee2c3f72c766c28e74a0ef4</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const Graph::NodeType &amp;</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>d4483a737721c7bbe87a2aa1a36a1654</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>Graph::NodeType &amp;</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>2a05de2789c08f700507a275dbcdbf72</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>String</type>
      <name>m_modelName</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>448394b6d2b5e767fac8499eae1d8042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; String &gt;</type>
      <name>m_nodeLabel</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>0e375b9e21eb36d0a15644cb7b6747ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; Graph::EdgeType &gt;</type>
      <name>m_eType</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>433b091464fc238100806d2ad128ffec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Graph::NodeType &gt;</type>
      <name>m_vType</name>
      <anchorfile>classogdf_1_1_dino_uml_model_graph.html</anchorfile>
      <anchor>0e9470e0216e838c761a8628175f9127</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoUmlToGraphConverter</name>
    <filename>classogdf_1_1_dino_uml_to_graph_converter.html</filename>
    <member kind="function">
      <type></type>
      <name>DinoUmlToGraphConverter</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>9d69846d9ea36a82ac8fe7c12dae32d6</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DinoUmlToGraphConverter</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>fe5f9461350827289e1df8efb4e4f157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DinoUmlModelGraph &amp;</type>
      <name>getModelGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>2c896b41be5dc882466b078f1b574963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; DinoUmlDiagramGraph * &gt; &amp;</type>
      <name>getDiagramGraphs</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>7ca31c9a6b61cb032093eab9c830304b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; UMLGraph * &gt; &amp;</type>
      <name>getDiagramGraphsInUMLGraphFormat</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>00c0a7149a79b4270393ce0260a88aeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDiagramsInUMLGraphFormat</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>d0d3097c8fc1bb75b0589b12ec2b6b6a</anchor>
      <arglist>(ofstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printIdToNodeMappingTable</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>2f35ff761849d77dcd7b48c251523463</anchor>
      <arglist>(ofstream &amp;os)</arglist>
    </member>
    <member kind="enumeration">
      <name>PredefinedInfoIndex</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmi</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee231f5831e27bdaf65dac880a85aaab12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmiContent</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eecfeaa6e7fc2cb6c2ac488db387f7f439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmiId</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eeaf5a4ae4d1dc73f9c0d9b986f450bd83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlModel</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee5e3ccf73e4e896709608353b9a55b9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlNamespaceOwnedElement</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eebb983427de8573d0f67ae1b800110d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlClass</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee1aee2051359ca4cb243e77aac045bac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>name</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee1947bbc7ffe3fbdf9af4896c0851262d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlGeneralization</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee02f7512b5b9d444de592f421aca7a315</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>child</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eeebb7b9bc4fcc574cd9b4e5227bb67bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>parent</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee918f8db15b5635a18ba2f97d3bd91b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlAssociation</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eebb743775a5d9ad55cd41f93a15039d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlAssociationConnection</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eecfb94d7b979046b9343094a713c79bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlAssociationEnd</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee549588f82c29555e4297edc2cde142fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>type</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eea0d50f01c17f352dd6b92b16b307dde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlDiagram</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee48e00f4144fd2e0b6fd4c81e61580a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootUmlDiagramElement</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee8782bcca925b12a01ddab054e1fe9baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlDiagramElement</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eeb9b06909cc8a743b52013ed049adab87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>geometry</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eefa3871822d0bfae2c4ed9626a48db36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subject</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eef1647078c90977390201446bffe58e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlPackage</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee5373faa61f97bf82fc47342a6b2621a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlInterface</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eea26bef72a3d6e127311bab834213f3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umlDependency</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee25b9d5d5fde0d4020d38b35f22e7848f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>client</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee69e23a3c448f3bc67adb4b17c7d4dd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>supplier</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eeb8913ccc8826f3e8483a0377a4b81470</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>diagramType</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee13bb0b004c6d182692c904fec61c21ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>classDiagram</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee3734dafac717389f5ea970cd20492577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>moduleDiagram</name>
      <anchor>3288b8464201b98837e5fdfa80aba4ee3fdce71c45747437e3f023a1c75846d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nextPredefinedInfoIndex</name>
      <anchor>3288b8464201b98837e5fdfa80aba4eeb16e9e593aab83fde17ab3b234bebec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializePredefinedInfoIndices</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>5b170053041015943fa8f6c78d13aa5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>createModelGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>6df944b57ab20bf0df02b00a8b6146af</anchor>
      <arglist>(DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>traversePackagesAndInsertClassifierNodes</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>f1884d7e42ac76b42dd294c1b88fef81</anchor>
      <arglist>(const XmlTagObject &amp;currentRootTag, String currentPackageName, DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>insertSpecificClassifierNodes</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>3687bbbf96af3bd83d6fe5b9164d641d</anchor>
      <arglist>(const XmlTagObject &amp;currentRootTag, String currentPackageName, int desiredClassifier, DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>traversePackagesAndInsertAssociationEdges</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>b6b18b4c024050b1c5f95b8f27dcfcc7</anchor>
      <arglist>(const XmlTagObject &amp;currentRootTag, DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>traversePackagesAndInsertGeneralizationEdges</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>57f3b246bcbc8d1b201df7f676988fab</anchor>
      <arglist>(const XmlTagObject &amp;currentRootTag, DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>insertDependencyEdges</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>5cdef4df79575bcb4791ab1fe8b657b9</anchor>
      <arglist>(const XmlTagObject &amp;currentRootTag, DinoUmlModelGraph &amp;modelGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>createDiagramGraphs</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>189496691470b574579a8d94da42f11c</anchor>
      <arglist>(SList&lt; DinoUmlDiagramGraph * &gt; &amp;diagramGraphs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>createDiagramGraphsInUMLGraphFormat</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>ab5720e63e12f1e5474d2035e2557313</anchor>
      <arglist>(SList&lt; UMLGraph * &gt; &amp;diagramGraphsInUMLGraphFormat)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DinoXmlParser *</type>
      <name>m_xmlParser</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>ec928acda4cb3585528bba801bc2a00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DinoUmlModelGraph *</type>
      <name>m_modelGraph</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>f8655c4e58fdbb6d6ab49827c8fc3ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; DinoUmlDiagramGraph * &gt;</type>
      <name>m_diagramGraphs</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>cf617eb187bce7a4cb444c3bd901751b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; UMLGraph * &gt;</type>
      <name>m_diagramGraphsInUMLGraphFormat</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>a07277b8daeef2c0bed4f4461b24873b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hashing&lt; int, NodeElement * &gt;</type>
      <name>m_idToNode</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>dcbfb6b50945e59bf2e6ef11fa31a2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hashing&lt; int, EdgeElement * &gt;</type>
      <name>m_idToEdge</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>869a116d6b58b1c03eaacf436b93c732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>m_logFile</name>
      <anchorfile>classogdf_1_1_dino_uml_to_graph_converter.html</anchorfile>
      <anchor>c8166fa4e1e15b0d2df39aa63dc67c4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::XmlAttributeObject</name>
    <filename>structogdf_1_1_xml_attribute_object.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlAttributeObject</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>0667e009fe69772bb45866efe6f08a7f</anchor>
      <arglist>(HashedString *name, HashedString *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlAttributeObject</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>1e325f8c9938242e493b4d31a9b59904</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>4b307493706fd95e133959cd7d93c7df</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>e0ac398444604f9f4a9b3f4305d1b094</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>ad3d4460c820dee41e1ba3240f763698</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>HashedString *</type>
      <name>m_pAttributeName</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>474d8b78ccd351da3f185a2a44743098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HashedString *</type>
      <name>m_pAttributeValue</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>c67f72143f327e55aedd0eb52d253409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmlAttributeObject *</type>
      <name>m_pNextAttribute</name>
      <anchorfile>structogdf_1_1_xml_attribute_object.html</anchorfile>
      <anchor>0df8c960575200c14f67908cf16a1f48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::XmlTagObject</name>
    <filename>structogdf_1_1_xml_tag_object.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlTagObject</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>2e932027702e4cfdbe72a5e84a9b23f5</anchor>
      <arglist>(HashedString *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlTagObject</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>672a5f1078bd5525e210ffcfa3b65951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>9365af65be67283a8d8f4d5c2fb149ac</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>31f69a777ceaf65c01b74033acd737f5</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>63cf0c974c2a6d9af7e18bb26deee8b7</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>HashedString *</type>
      <name>m_pTagName</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>7c7936b87ea93952970d45890231daee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmlAttributeObject *</type>
      <name>m_pFirstAttribute</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>2b83a744ba0a2d8df5b37ada323440fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HashedString *</type>
      <name>m_pTagValue</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>a1a5fc1749451ea90fcef9f1bf83d4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmlTagObject *</type>
      <name>m_pFirstSon</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>73d9038868186d7e0ea2909046271b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmlTagObject *</type>
      <name>m_pBrother</name>
      <anchorfile>structogdf_1_1_xml_tag_object.html</anchorfile>
      <anchor>c679bc4da063212e6c54f3fe4d1a1d66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoXmlParser</name>
    <filename>classogdf_1_1_dino_xml_parser.html</filename>
    <member kind="function">
      <type></type>
      <name>DinoXmlParser</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>44e1cfc8be4a5cf0bc77aebfa203f6c1</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DinoXmlParser</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>b11a00c5899852281d642fa8e588d852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNewHashElement</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>b4df21e03b02a736f4ad250106250ac0</anchor>
      <arglist>(const String &amp;key, int info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createParseTree</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>a3eb1d83f43b2056c703c24fdb399e02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const XmlTagObject &amp;</type>
      <name>getRootTag</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>22b839fad9152d5d0b7e983a6d5bba77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>traversePath</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>259b1042e0bf1422aa81773d60471630</anchor>
      <arglist>(const XmlTagObject &amp;startTag, const Array&lt; int &gt; &amp;infoIndexPath, const XmlTagObject *&amp;targetTag) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findSonXmlTagObject</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>8a5e81d2fa3529888918a178a3ed0673</anchor>
      <arglist>(const XmlTagObject &amp;father, int sonInfoIndex, const XmlTagObject *&amp;son) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findBrotherXmlTagObject</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>16c136c94ea1d3bdba471c9b44563396</anchor>
      <arglist>(const XmlTagObject &amp;currentTag, int brotherInfoIndex, const XmlTagObject *&amp;brother) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findXmlAttributeObject</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>647a78a18e5cc1169e73f1f826345fca</anchor>
      <arglist>(const XmlTagObject &amp;currentTag, int attributeInfoIndex, const XmlAttributeObject *&amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInputFileLineCounter</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>24b849148a8adf36e14f11f0751a4406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHashTable</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>25baad224bc987b866bfa4a840323d1a</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>destroyParseTree</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>497661404b68d3cae788674460b2dd44</anchor>
      <arglist>(XmlTagObject *root)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>XmlTagObject *</type>
      <name>parse</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>f06694955d39ead8170b5d41a4d2643a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>appendAttributeObject</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>56218dc5e2e5f134dbef57df446ba9de</anchor>
      <arglist>(XmlTagObject *tagObject, XmlAttributeObject *attributeObject)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>appendSonTagObject</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>af89ab687ffb4c834fec3f48eb2ce36d</anchor>
      <arglist>(XmlTagObject *currentTagObject, XmlTagObject *sonTagObject)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>HashedString *</type>
      <name>hashString</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>af2c73c85d6ab7dfd958fcaae961e953</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printXmlTagObjectTree</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>8380df4cdb1f819a6fdc97caf93d2a70</anchor>
      <arglist>(ostream &amp;os, const XmlTagObject &amp;rootObject, int indent=0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printSpaces</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>bbb23958a762cf773c86fe2c9c912175</anchor>
      <arglist>(ostream &amp;os, int nOfSpaces) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XmlTagObject *</type>
      <name>m_pRootTag</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>376cde9ae9db308ed2159804a0473c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DinoXmlScanner *</type>
      <name>m_pScanner</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>0c1f852c642f3adf6f7356c096420187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hashing&lt; String, int &gt;</type>
      <name>m_hashTable</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>b27954e01d5c842c64feb6f31d98e32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_hashTableInfoIndex</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>b3d9b156eef8ccbbab35499fed6d795e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_recursionDepth</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>e140dbae978144b23a3891ab3d4a8428</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_dino_xml_parser.html</anchorfile>
      <anchor>5238d895e1edde45f289ef597a22d9f8</anchor>
      <arglist>(ostream &amp;, const DinoXmlParser &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DinoXmlScanner</name>
    <filename>classogdf_1_1_dino_xml_scanner.html</filename>
    <member kind="function">
      <type></type>
      <name>DinoXmlScanner</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>e4ba5adf706f8c2c67f097394f1c4d1d</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DinoXmlScanner</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>ca90b2f391a4ca9b8ad8a916a7c66e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlToken</type>
      <name>getNextToken</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>d0b6dbcb4c06a6df9aa7401ad0bd9b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCurrentTokenString</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>bc49e72c062ab64643635ca6bf9ad104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlToken</type>
      <name>testNextToken</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>22aab66ca95c51d008db56f39bf17d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlToken</type>
      <name>testNextNextToken</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>15dcb490f1965662fc69bd60eea8e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipUntil</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>8b9cef3d33a5b984408e71ca467e681c</anchor>
      <arglist>(char searchCharacter, bool skipOverSearchCharacter=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipUntilMatchingClosingBracket</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>e27e9a49ebfc16d08214606e4091f853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readStringUntil</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>25693cd93ad8451a86321db063c34945</anchor>
      <arglist>(char searchCharacter, bool includeSearchCharacter=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInputFileLineCounter</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>b4e4dd13c92a643649c86b966b1a1924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>77f34f3ef720311b23b8509c9595d74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DinoLineBuffer *</type>
      <name>m_pLineBuffer</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>0dc49d4a524c28c56eacbb83e09803ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pCurrentTokenString</name>
      <anchorfile>classogdf_1_1_dino_xml_scanner.html</anchorfile>
      <anchor>3a7ed5b31d76ba4c3716a962b70a9bf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::GmlObject</name>
    <filename>structogdf_1_1_gml_object.html</filename>
    <member kind="function">
      <type></type>
      <name>GmlObject</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>5c9c1880dde6c1dbac71f8f8ca216c54</anchor>
      <arglist>(GmlKey key, int intValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GmlObject</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>781b7314baf82aa1e79028271213c2e9</anchor>
      <arglist>(GmlKey key, double doubleValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GmlObject</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>07c0a2638b658c6fa248655c690ab52c</anchor>
      <arglist>(GmlKey key, const char *stringValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GmlObject</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>2f319d5170e297f44459abd25cb64d4d</anchor>
      <arglist>(GmlKey key)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>1b1dc43975443e73020162439d37363e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>148daf39b8f32b673a4d0dd830a50faa</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>c4dbe45d81cf6629ad55b337e4d838bc</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>GmlObject *</type>
      <name>m_pBrother</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>19b32511cd80dafe6b836b288173845a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GmlKey</type>
      <name>m_key</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>b10e13bc71969499d25aef21dabf6ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GmlObjectType</type>
      <name>m_valueType</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>cc3669b4100bc72b1998af7327fa42ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union ogdf::GmlObject::@2</type>
      <name>@3</name>
      <anchorfile>structogdf_1_1_gml_object.html</anchorfile>
      <anchor>2e19dfdd9d3f8f7391d19c73b604a9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_intValue</name>
      <anchorfile>unionogdf_1_1_gml_object_1_1@2.html</anchorfile>
      <anchor>ca892498f3ff20df8670c549f565cdee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_doubleValue</name>
      <anchorfile>unionogdf_1_1_gml_object_1_1@2.html</anchorfile>
      <anchor>0bcf2480c322254e8ffae5053f300959</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>m_stringValue</name>
      <anchorfile>unionogdf_1_1_gml_object_1_1@2.html</anchorfile>
      <anchor>f583a4b5341ddcc40c4bf2874438fb97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GmlObject *</type>
      <name>m_pFirstSon</name>
      <anchorfile>unionogdf_1_1_gml_object_1_1@2.html</anchorfile>
      <anchor>06064fa39f2bbd3fd3b356e78fb42be1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GmlParser</name>
    <filename>classogdf_1_1_gml_parser.html</filename>
    <member kind="enumeration">
      <name>PredefinedKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>idPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eaceceae0bb2705d359c0057a78a91d9e7fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>labelPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacecf28543de337453ffbfb05923468d19d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CreatorPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec9e7646ecfbca21b7c54b0917fa4a47c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>namePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec430157a3e6526e7fb9d1665caa3bc9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>graphPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacecad23dd0487f75ec0ac774b385ccf758e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>versionPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec9fa289211d37e7c16bd1330048eb4095</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>directedPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eaceca9167edcd7cfcc076b37036d59294152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacece19ec4595539baad22889eb968b4abfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec18d8f9f0b45fd62b96c0def8f7649c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>graphicsPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec0174d0093e8ad0e048695b0b91fb2c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec0026f1d99d61218900607d2f0c2bc909</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec8886781ad17282dcd15dba121d0e7e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec30b9006ec2f4a1d8692e19f8f37db0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacecfa9e3e6f5f9190485b5789b9c6832810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>typePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacecb7cb18e4b842b562bf303b5bae0b0439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>widthPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eaceccb8784c86b17f3b1f44b38bdd349c9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sourcePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacecfe547580befd9a7cc47afd7ba08522f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>targetPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec3844483f74f3e3e0cde3dcc70114a356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arrowPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec5b00b5302aa1e74acd34ad1cb11dd3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec21da84f536bb4fee0d0aa25ff2c52cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pointPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec5b1a6d1215d45355baf791cbd5774a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>generalizationPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec093abc6482622c99740d29de47910f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>subGraphPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec9ef96cd9990611236de953dceda9b611</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fillPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec805e1023321532374daadf6ed121f074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>clusterPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec84dc108c4864be66147c1adfe5dc9485</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootClusterPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec8620a246e479712eef6f9a42afee1417</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertexPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec3cc556fa02a73da20021b5b715eef93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>colorPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec2a27aeae8c2b5f1d4ef764a090898b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>heightPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec7b46257e50dc968c5591d039e79df8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>stipplePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacecdc12544354ff552eea2c24da6babb215</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>patternPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacece7c3ec77517362fecebc4cefb19cfc8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>linePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec0ee498eb8abe1bb3917405c8dfb5e0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lineWidthPredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec1529051f3cf7044e4c8711c6a648bb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>templatePredefKey</name>
      <anchor>e22ace9280e225390b613d374c5eacec8336d9471b8d627e287cafd53d207d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEXTPREDEFKEY</name>
      <anchor>e22ace9280e225390b613d374c5eacecfe34621a4ad10dfff3c7313665b16789</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GmlParser</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>7d4c9331b5f591ab5114897833ea38e4</anchor>
      <arglist>(const char *fileName, bool doCheck=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GmlParser</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>5efde2bcf2b32ac0ac7e1f4a2ca32b1d</anchor>
      <arglist>(istream &amp;is, bool doCheck=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GmlParser</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>f71f16faa3dd95d990bb13a34ec6532b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>a41092967263689a5182919fe01a4701</anchor>
      <arglist>(GmlObject *object) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>error</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>229b247bfa2aaedeac13eb70c5d6fead</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>errorString</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>959e21fbf996dd25c10321f386029c5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>fa2fdd4a0bf9eec89df7c81fbd3a1b3a</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>ad6adf338cff8ff28d904be9f07d9fda</anchor>
      <arglist>(Graph &amp;G, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readCluster</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>c1d97dad310a5fce80522a4c83bcae26</anchor>
      <arglist>(Graph &amp;G, ClusterGraph &amp;CG)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readAttributedCluster</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>5d696dd92b1ee2566e965033802a2656</anchor>
      <arglist>(Graph &amp;G, ClusterGraph &amp;CG, ClusterGraphAttributes &amp;ACG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>clusterRead</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>c3625aca5e29fa072e9be494c72f5ed0</anchor>
      <arglist>(GmlObject *rootCluster, ClusterGraph &amp;CG, Array&lt; node &gt; &amp;mapToNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>attributedClusterRead</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>afe7e52381815accde7899fdcbaf39e5</anchor>
      <arglist>(GmlObject *rootCluster, ClusterGraph &amp;CG, ClusterGraphAttributes &amp;ACG, Array&lt; node &gt; &amp;mapToNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>recursiveClusterRead</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>a5baa473ed2f7809bae233f5e701fee4</anchor>
      <arglist>(GmlObject *clusterObject, ClusterGraph &amp;CG, cluster c, Array&lt; node &gt; &amp;mapToNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>recursiveAttributedClusterRead</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>a39d38e6a46e2b4d91635f55785afa43</anchor>
      <arglist>(GmlObject *clusterObject, ClusterGraph &amp;CG, ClusterGraphAttributes &amp;ACG, cluster c, Array&lt; node &gt; &amp;mapToNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readClusterAttributes</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>f4dc9995a5001fb6ccd676663eb52cf6</anchor>
      <arglist>(GmlObject *cGraphics, cluster c, ClusterGraphAttributes &amp;ACG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createObjectTree</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>40b3b54ff30d7f15993bfea0fb13c560</anchor>
      <arglist>(istream &amp;is, bool doCheck)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initPredefinedKeys</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>4d6d96d11baa537836af60e39473dc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setError</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>1227a556bf37f95a0ef7a403712b8df0</anchor>
      <arglist>(const char *errorString)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GmlObject *</type>
      <name>parseList</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>a9c9647dc3a5cbda8c1452241084a390</anchor>
      <arglist>(GmlObjectType closingKey, GmlObjectType errorKey)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GmlObjectType</type>
      <name>getNextSymbol</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>973febc495d68e6458a0badbb92cf37f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>getLine</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>00fdd03694b1bab363e8be86119d07fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GmlKey</type>
      <name>hashString</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>923244647d4d5cd620c9d05092ede88d</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GmlObject *</type>
      <name>getNodeIdRange</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>92fb58d03db557b4c45085c4bad5a8fc</anchor>
      <arglist>(int &amp;minId, int &amp;maxId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readLineAttribute</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>ee78b96833d8257e17874135fdcc6d90</anchor>
      <arglist>(GmlObject *object, DPolyline &amp;dpl)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>destroyObjectList</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>e27e20940946748dd938234ed5b9319a</anchor>
      <arglist>(GmlObject *object)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>indent</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>29fc0c3d99f0597c49bad48e61609645</anchor>
      <arglist>(ostream &amp;os, int d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>output</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>6542adc0d99b680cc7b7702cff0a7a2f</anchor>
      <arglist>(ostream &amp;os, GmlObject *object, int d)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hashing&lt; String, int &gt;</type>
      <name>m_hashTable</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>bc8e946cbdbaba132c2daaf91e75b2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_num</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>1df38654e0445b3b8a79dafa6ce457f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>istream *</type>
      <name>m_is</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>8475366166e5703885ce0b5daac566fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_error</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>dae79f03f1c89fad523d0ea26579fdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>String</type>
      <name>m_errorString</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>2b18b9d9de3e241c1fc4da62f37e1717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_rLineBuffer</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>ec529604aa55d2f5d7e65d505afedb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_lineBuffer</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>e49cf2cdd1755331f7c0aa6b040c76ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pCurrent</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>9d0a4aa555938ba9c87d9f9b7e668d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pStore</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>5e12f1467152865cdf59c6449c7d97c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>m_cStore</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>38abeee56f0302d30f4046f680e01da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_intSymbol</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>14a3ed82093c9eff66cb5dbff254a698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_doubleSymbol</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>a3ef378979bac74a977f2504c45c207e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>m_stringSymbol</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>3ac97ddabee2a6c30ae9a831e13c20ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GmlKey</type>
      <name>m_keySymbol</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>14b5a881377bfd252d23c5c011d1be73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>String</type>
      <name>m_longString</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>8ded5c8a90ff36f082e61e4002e6408a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GmlObject *</type>
      <name>m_objectTree</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>e6653694abf1309ab73c8581ffefa7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_doCheck</name>
      <anchorfile>classogdf_1_1_gml_parser.html</anchorfile>
      <anchor>88e9ac8acab7ee859911ee8248c1d56c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::XmlObject</name>
    <filename>structogdf_1_1_xml_object.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlObject</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>076c94d2bd52fc89f9999d8e8c41462f</anchor>
      <arglist>(XmlKey key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlObject</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>a58001493e1ca4abee25565482fd50ae</anchor>
      <arglist>(XmlKey key, int intValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlObject</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>8d235b74fe813fb891bded22d233c04d</anchor>
      <arglist>(XmlKey key, double doubleValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlObject</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>44982082c03a879aee1807422e4cce06</anchor>
      <arglist>(XmlKey key, const char *stringValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlObject</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>fcc590b75bbf1f61c46004d70ada56e3</anchor>
      <arglist>(const char *stringValue)</arglist>
    </member>
    <member kind="variable">
      <type>XmlObject *</type>
      <name>m_pBrother</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>bd25823362937f88700894cbec7e0d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmlKey</type>
      <name>m_key</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>c758f10802266b28afe977d8ac9bf1d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmlObjectType</type>
      <name>m_valueType</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>116ede985bab5dd9bfd76ed8656a8a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union ogdf::XmlObject::@4</type>
      <name>@5</name>
      <anchorfile>structogdf_1_1_xml_object.html</anchorfile>
      <anchor>dc461a3efcbbccf28e1b559ab39ecfbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_intValue</name>
      <anchorfile>unionogdf_1_1_xml_object_1_1@4.html</anchorfile>
      <anchor>5268d52528becba755c8f2a77b84fdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_doubleValue</name>
      <anchorfile>unionogdf_1_1_xml_object_1_1@4.html</anchorfile>
      <anchor>8b702d3c4343f3ea876bebde83fb41a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>m_stringValue</name>
      <anchorfile>unionogdf_1_1_xml_object_1_1@4.html</anchorfile>
      <anchor>27b310edd5e034b01271b6cafa1f88c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XmlObject *</type>
      <name>m_pFirstSon</name>
      <anchorfile>unionogdf_1_1_xml_object_1_1@4.html</anchorfile>
      <anchor>0200510dff7b86404a2261c63416f831</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::XmlParser</name>
    <filename>classogdf_1_1_xml_parser.html</filename>
    <member kind="enumeration">
      <name>PredefinedKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>idPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd01360a2c98a366aa9426823ca44c5f6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>labelPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd01158cf63f1e2285536340ccdf759dedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CreatorPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd017a718273a3d0a2824e795e122b97fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>namePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0fb64c22c1ff79940b88fe2fa269c40e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>graphPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd03e57c94e3b9ae5dbdd9891b51e691136</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>versionPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0de7b6152888461d6a6c193b01abd2d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>directedPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd012c13607d61d95f265cad64c2613421b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0b9cd21ead53dad2b0ab9d732b21805ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd085b228be6f95ac31c3ca5d90189e042a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>graphicsPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd048691b97865fe859d8e599023d99d9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd090b5356cc7c892918fb00c96fa0a8c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0405b8256c342ead682b4de99d3c4c5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0658e5de49e7575c4461eab9508a6ad2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0d06a0e1d01ffc9de157ad0c647a96f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodetypePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0698c41c0a5e5caac2150153e9d81ef9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edgetypePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd04baed552139d2032b0590bc002df65be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>typePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd04cc9cc0e18d171510cd196f3ba8d7034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>widthPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0c423dc0bf051ba0f9ed999754b06b6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>heightPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0d5b5d9130bff1cf587af07ea9c7bc7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sizePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd09a22927c9dcfd0bf831b2de7bb2e631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>positionPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd04f06d987c4aa91d649f27d5b61b564e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pathPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0a6f51ae2085b82f3e3dc376563584de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sourcePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0beab5bc38a0082a468cd7863cf958b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>targetPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0c00ae131d492cfeaaa6a6b70279a6840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sensePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0eaba35dd3a237eefdba4b3e5711b63a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arrowPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd01ff9031c9bf8942a360c64510f608c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LinePredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd07e062ff50142dd578903ac1d2267bcda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pointPredefKey</name>
      <anchor>21bf3fd881fd7835025d1e95037facd02f8a71e176110d1c29766ffd1e28fdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEXTPREDEFKEY</name>
      <anchor>21bf3fd881fd7835025d1e95037facd0f2f57b48c6716a791f761e5ae22b5395</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlParser</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>b84e4370c4836fa7262e3de9df040b9c</anchor>
      <arglist>(const char *fileName, bool doCheck=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlParser</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>a5077d6dfce755f441089331825ad0a6</anchor>
      <arglist>(istream &amp;is, bool doCheck=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlParser</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>e918784ef731821b2e0399f7e8866643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlObject *</type>
      <name>root</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>35feb3484fcd9c8cb56161d5a92c7169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>c686b59e2ff0e18416756078ed062d3d</anchor>
      <arglist>(const String &amp;tag) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>5d8c5e194496a2cb277d87c8d31b8e22</anchor>
      <arglist>(XmlObject *object) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>error</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>d69b298c31241d200453b8cfafe00432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>errorString</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>ecdf2fdb3932aeec84ce4070f59c9f9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>495702bddfd5318a31b3353139e81a7d</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>cce6ebb2ed8d5560da18ac94ba04356b</anchor>
      <arglist>(Graph &amp;G, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createObjectTree</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>65c6d3d286f3b360badb234597554566</anchor>
      <arglist>(istream &amp;is, bool doCheck)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initPredefinedKeys</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>a8c074cd30a64da3bb6cb67a47eea1bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setError</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>87888e48ecd332275cd98ff4ec65b03a</anchor>
      <arglist>(const char *errorString)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>XmlObject *</type>
      <name>parseList</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>7bb0b2bf680af317608cbfacc0605d82</anchor>
      <arglist>(XmlObjectType closingKey, XmlObjectType errorKey, const char *objectBodyName)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>XmlObjectType</type>
      <name>getNextSymbol</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>1d4385f777878af0dce5d13623234598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>getLine</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>7cccdb232f8b4e232a7187a0ba698949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>XmlKey</type>
      <name>hashString</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>8ae5babdcdd0a8a092c73c01b095d962</anchor>
      <arglist>(const String &amp;str)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>XmlObject *</type>
      <name>getNodeIdRange</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>1475f54537117e003fb4b0a0e5fe255a</anchor>
      <arglist>(int &amp;minId, int &amp;maxId, int &amp;nodetypeCount, XmlObject *graphObject)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>makeIdMap</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>7505bf585f10a8870f764cf4a355c217</anchor>
      <arglist>(int maxId, Array&lt; char * &gt; &amp;idMap, int nodetypeCount, Array&lt; char * &gt; &amp;typeName, Array&lt; double &gt; &amp;typeWidth, Array&lt; double &gt; &amp;typeHeight, XmlObject *graphObject)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>closeLabels</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>727b54a531a08c2ff09bf74a6d1e782f</anchor>
      <arglist>(Array&lt; char * &gt; idMap, Array&lt; char * &gt; typeName)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readLineAttribute</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>9fbec5b2e9b0eb83855e40024e780a8d</anchor>
      <arglist>(XmlObject *object, DPolyline &amp;dpl)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>destroyObjectList</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>9c281ab149d93e193c8a4f4da9688f5f</anchor>
      <arglist>(XmlObject *object)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>indent</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>d60bf33a49955cf42d409637d4388f10</anchor>
      <arglist>(ostream &amp;os, int d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>output</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>3b66bb5250a86d68b34ad91e259328a3</anchor>
      <arglist>(ostream &amp;os, XmlObject *object, int d)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hashing&lt; String, int &gt;</type>
      <name>m_hashTable</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>e0632915732fba677c92577ca637cbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_num</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>e8d55ed34dafef43d65da6c2e457da6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>istream *</type>
      <name>m_is</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>cb9195096ab2fec9c2ba072468edcbe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_error</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>1c2323f690289edbfd8c19fcd7548454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>String</type>
      <name>m_errorString</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>289ade79812c26d0820551edd6b357c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_rLineBuffer</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>205f3d7bffb914ab70a4b59e7a84cd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_lineBuffer</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>6526317112101149052edf0096e05ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pCurrent</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>79a8a8c0f31986979524ceea8f782bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pStore</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>b7651201cd2841d9604bbdd4f62f4811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>m_cStore</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>4d00261e215a150609daacd7c332c14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_intSymbol</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>1b717537a24da2991c5f6311cdbcb0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_doubleSymbol</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>ed2b5f6ffc49df102e81aa620b61e46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>m_stringSymbol</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>93714170cc95c4b5b87d9b3364d72f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_keyName</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>a4413232d797a41bbef609482e72c1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XmlKey</type>
      <name>m_keySymbol</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>e9d70d9ad2f1451de9bc03b2e66490de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>String</type>
      <name>m_longString</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>99c84704411292e717b22d47ab0b4487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_eoTag</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>0af3ec1bed7726e905264dddf3533eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XmlObject *</type>
      <name>m_objectTree</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>9b6c656705b2335cbf6e65474708bc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_doCheck</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>e4ffd796c9974b0f76d640a273fc1b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; char * &gt;</type>
      <name>m_objectBody</name>
      <anchorfile>classogdf_1_1_xml_parser.html</anchorfile>
      <anchor>f38aed3eac164ad441214f4e75d6047b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CliqueFinder</name>
    <filename>classogdf_1_1_clique_finder.html</filename>
    <member kind="enumeration">
      <name>postProcess</name>
      <anchor>051831f24d04565d494e4dddbc90bbaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ppNone</name>
      <anchor>051831f24d04565d494e4dddbc90bbaf63325ddd8aee5829060d3ffc0f799308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ppSimple</name>
      <anchor>051831f24d04565d494e4dddbc90bbafe7c84390eca4609645bc6bcf091b9a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CliqueFinder</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>49abb39688874303caea1bcd00ce938c</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CliqueFinder</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>a8899dbc7e021f8a3521a524b3aa1145</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>66eebc9a726f67ef8f16dea99cd0cc2d</anchor>
      <arglist>(NodeArray&lt; int &gt; &amp;cliqueNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>9763ccdca3ce362319028106c004f897</anchor>
      <arglist>(List&lt; List&lt; node &gt; &gt; &amp;cliqueLists)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinSize</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>2e31b29ba49768aa89a6d16f023c977d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>28512c22f2ea02db54de11842fd577cf</anchor>
      <arglist>(int density)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>ac31a504ed84f3cfc349bd84e1c23807</anchor>
      <arglist>(int minDegree=2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setResults</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>b319da8f4b581a724f2ebf88b9bd3d32</anchor>
      <arglist>(NodeArray&lt; int &gt; &amp;cliqueNumber)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setResults</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>655338d61e803793ba581aaaa3cd3a6b</anchor>
      <arglist>(List&lt; List&lt; node &gt; &gt; &amp;cliqueLists)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setResults</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>b2515ebdf44bbf7eba557896f8f38f1b</anchor>
      <arglist>(List&lt; List&lt; node &gt; * &gt; &amp;cliqueLists)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postProcessCliques</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>0df78f369f1f0d113628e915ee86a9b8</anchor>
      <arglist>(List&lt; List&lt; node &gt; * &gt; &amp;cliqueList, EdgeArray&lt; bool &gt; &amp;usableEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>allAdjacent</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>95874337f835f8f6007caf8bd0bf2460</anchor>
      <arglist>(node v, List&lt; node &gt; *vList)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeGraph</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>46f91e840800c811a7cbcd841f2f3f61</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; int &gt; &amp;cliqueNumber, const String &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>evaluate</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>8bc38d2be6017c82b7c391ab2706f78d</anchor>
      <arglist>(node v, EdgeArray&lt; bool &gt; &amp;usableEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkCliques</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>0598cad8ef9b75dd2cfc33d10765d6dc</anchor>
      <arglist>(List&lt; List&lt; node &gt; * &gt; &amp;cliqueList, bool sizeCheck=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>cliqueOK</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>c36e175c1be897cb58d747a9153f2077</anchor>
      <arglist>(List&lt; node &gt; *clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findClique</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>2be337dcd7ebdac2a587d009ba8a0b32</anchor>
      <arglist>(node v, List&lt; node &gt; &amp;neighbours, int numRandom=0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>2245727d5c25892a56278e86397f63a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphCopy *</type>
      <name>m_pCopy</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>583256f3abe0fdc9e16194b058330281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_copyCliqueNumber</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>a2dba55d6c22a30ffe4a7b4a220727ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_usedNode</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>1a197b2c1f509096bf99e0abe30ee420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_minDegree</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>f4bf3c5b7c3972cc14cde2779a27479c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numberOfCliques</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>c6f0b6f83f1349b9d9e8b3955e6d14e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>postProcess</type>
      <name>m_postProcess</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>049f38e4977dacc8d2152499713d80e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_callByList</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>2869d29e71b2f7251ad413f72bbc8943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; List&lt; node &gt; &gt; *</type>
      <name>m_pList</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>64e1b95f67c16b52b1c66015c0668221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_density</name>
      <anchorfile>classogdf_1_1_clique_finder.html</anchorfile>
      <anchor>fccc61c99848a3ccd08a29031e10c636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Clusterer</name>
    <filename>classogdf_1_1_clusterer.html</filename>
    <base>ogdf::ClustererModule</base>
    <member kind="function">
      <type></type>
      <name>Clusterer</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>0b08cd7ff182eb7873219483b3ebc0f5</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Clusterer</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>1480780bd7359717f11d5865338afcbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeClustering</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>48603b090d50212392936948a5c909a1</anchor>
      <arglist>(SList&lt; SimpleCluster * &gt; &amp;sl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusteringThresholds</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>15b2f98f47c67e25d8e32cdd3fbcf6f6</anchor>
      <arglist>(const List&lt; double &gt; &amp;threshs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutomaticThresholds</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>42580cecaa0f2f6ce78ab610bbe9dbda</anchor>
      <arglist>(int numValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRecursive</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>e26c538acab19f4c06160556318f2630</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeStrengths</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>8db53a793503caedfd2a53dc85b7a93c</anchor>
      <arglist>(EdgeArray&lt; double &gt; &amp;strength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeStrengths</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>f2f1d2846432f49d1c2d95bf449ee50a</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; double &gt; &amp;strength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createClusterGraph</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>d9db31fd7c75d53ddfb500df4c6b34a7</anchor>
      <arglist>(ClusterGraph &amp;C)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopIndex</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>8b77f0932dcfee7d1009b679ac1864b0</anchor>
      <arglist>(double stop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>computeCIndex</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>09fe305f092a5452b469d6e641fccc29</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>computeCIndex</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>9a7834165bc722fcac3b74c0265cf59f</anchor>
      <arglist>(const Graph &amp;G, node v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; double &gt;</type>
      <name>m_edgeValue</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>8f5a4ac5462f1112f2f2ba626937343c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_vertexValue</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>f2bd83f48ba45581fe3cb7831e2aa2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; double &gt;</type>
      <name>m_thresholds</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>e193ef47588a82229484278fbb88c8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; double &gt;</type>
      <name>m_autoThresholds</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>4a9309e00ed95d3b2bbaf31705b305a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; double &gt;</type>
      <name>m_defaultThresholds</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>3430ea21ddffbf1f793558237f37a1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_stopIndex</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>1fc7f61c09678b054b308e2390ebc94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_recursive</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>4d04b8295ba60d45e6f42046d2738ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_autoThreshNum</name>
      <anchorfile>classogdf_1_1_clusterer.html</anchorfile>
      <anchor>9a0c2eba8ff81ad66bae1825e189b02a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GraphReduction</name>
    <filename>classogdf_1_1_graph_reduction.html</filename>
    <base>ogdf::Graph</base>
    <member kind="function">
      <type></type>
      <name>GraphReduction</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>9e0b4e03db4ff17c0525b11ad1912f05</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GraphReduction</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>e844a31e2c7a300d72e93c00bc2bdbcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>46a421a8e6472e1d62d9291e56bc9165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>ad8828211b7703898fd2523034c1a237</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; edge &gt; &amp;</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>1055df9eadc4a205845206767cfc4d24</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>reduction</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>a18ca809bb1373e9823577ac1c8d552b</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>reduction</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>1f875d1653dccffa4126b93c56f75d77</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GraphReduction</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>6aea94c32c2feec8be4e2aed3033366e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>7476864424b734e88647a77ebdb379e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vOrig</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>30e1201b790af83f85a5d8c679d0d515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; List&lt; edge &gt; &gt;</type>
      <name>m_eOrig</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>e96fb95896a5bc3859516ec955fd80fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vReduction</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>93aab1636794e0fc01e08963e74ecd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eReduction</name>
      <anchorfile>classogdf_1_1_graph_reduction.html</anchorfile>
      <anchor>d698843b47b7c04c0b694e84d236199d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MinCostFlowReinelt</name>
    <filename>classogdf_1_1_min_cost_flow_reinelt.html</filename>
    <base>ogdf::MinCostFlowModule</base>
    <member kind="function">
      <type></type>
      <name>MinCostFlowReinelt</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>392ff69d7e56a9bd24d0f9133d28a1b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>d4645bad9c3ac10bf2220984b0f81c2f</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;lowerBound, const EdgeArray&lt; int &gt; &amp;upperBound, const EdgeArray&lt; int &gt; &amp;cost, const NodeArray&lt; int &gt; &amp;supply, EdgeArray&lt; int &gt; &amp;flow)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>c2faa5331770b79fa1f86ac19e3c54ef</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;lowerBound, const EdgeArray&lt; int &gt; &amp;upperBound, const EdgeArray&lt; int &gt; &amp;cost, const NodeArray&lt; int &gt; &amp;supply, EdgeArray&lt; int &gt; &amp;flow, NodeArray&lt; int &gt; &amp;dual)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>infinity</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>fb8fe070de19852aa7b54f5d562b9037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>mcf</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>f0e8ffd2f352754bfed50fcfc2eceecb</anchor>
      <arglist>(int mcfNrNodes, int mcfNrArcs, Array&lt; int &gt; &amp;mcfSupply, Array&lt; int &gt; &amp;mcfTail, Array&lt; int &gt; &amp;mcfHead, Array&lt; int &gt; &amp;mcfLb, Array&lt; int &gt; &amp;mcfUb, Array&lt; int &gt; &amp;mcfCost, Array&lt; int &gt; &amp;mcfFlow, Array&lt; int &gt; &amp;mcfDual, int *mcfObj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>start</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>401c612b5dae0d5b466fae5b3a65eb92</anchor>
      <arglist>(Array&lt; int &gt; &amp;supply)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>beacircle</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>eca8d3e6f38fa9e95068585707e3fbf1</anchor>
      <arglist>(arctype **eplus, arctype **pre, bool *from_ub)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>beadouble</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>4dccf2c3ee2bc7bedf3488672fa21a5d</anchor>
      <arglist>(arctype **eplus, arctype **pre, bool *from_ub)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; nodetype &gt;</type>
      <name>nodes</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>37de449fe67af3f1fa917776c56e49f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; arctype &gt;</type>
      <name>arcs</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>110e9bbacfd5abd098ddb838e1e21e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>nodetype *</type>
      <name>root</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>d64120fc0ff8d3be0ab15f2cd0e5dad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>nodetype</type>
      <name>rootStruct</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>4caad1f1573e51c527d3b70a34cd34d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>last_n1</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>a6a7c1d318eab4626bf760a737b751dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>last_n2</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>385a97f8d3943c85dd7d115ce90fe40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>start_arc</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>7dac0aa9513a63676ee878be7419991c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>start_b</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>1ab42f5872121c285c886ff726e0ad97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>start_n1</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>56d6e1fc1adc33b44c54752ccd211a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>start_n2</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>45ba81c4331ab5382cadac070562947d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>startsearch</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>89d8fa0715d489663fee1e6cd517f894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>searchend</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>88db016ffb606deec7a94e6a9d69841d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>searchend_n1</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>9bcb9fa50af80cb4f0f503b39d050665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>arctype *</type>
      <name>searchend_n2</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>1a27c67d07cd563f2ba119b7e9bbf129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxCost</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>c5122ba78427bf5ed562ce3e57300248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nn</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>3234f235c707d833d07349bfba6ccfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mm</name>
      <anchorfile>classogdf_1_1_min_cost_flow_reinelt.html</anchorfile>
      <anchor>4c544006c9c5e9f07e4cdeee1a72d601</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::MinCostFlowReinelt::arctype</class>
    <class kind="struct">ogdf::MinCostFlowReinelt::nodetype</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::MinCostFlowReinelt::arctype</name>
    <filename>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>345b52ac55b1f4799ea6682b1ebf384e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>8f8e8cba1d122fa543d34f27697bb12b</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>fa23e335360bcbde37b318a155f4d838</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>arctype *</type>
      <name>next_arc</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>292d25fb93fac6f44a73ffa1562d26c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>nodetype *</type>
      <name>tail</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>a32072b3b59de640e304413b6e3ad4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>nodetype *</type>
      <name>head</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>03b70d2e07f741e23b1cca1402da9701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cost</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>69cd006d525d73a37f83be077009b935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>upper_bound</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>a4742584d8f26c43ed0632fb098dc7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>arcnum</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1arctype.html</anchorfile>
      <anchor>d507902be90a7f0bd509da36146e8496</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::MinCostFlowReinelt::nodetype</name>
    <filename>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</filename>
    <member kind="variable">
      <type>nodetype *</type>
      <name>father</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>2f2dfc0cb4e66b23a45bb5db00bdb1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>nodetype *</type>
      <name>successor</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>3c293c0ea67124262e30ec09e912a54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>arctype *</type>
      <name>arc_id</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>596afe6d0fdad0f4402f8df8a3ac8ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>orientation</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>58418b57fd79d7a6b7a60cddfa005dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dual</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>9480a29de3fa8dd2981b4b5716a38c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>flow</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>cc3ed077820e9b1a808757c9fdf021c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>name</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>6c09a90829f8983f397a06daac40b99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>nodetype *</type>
      <name>last</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>5510afeabf21d7dada2a0008fb66268c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nr_of_nodes</name>
      <anchorfile>structogdf_1_1_min_cost_flow_reinelt_1_1nodetype.html</anchorfile>
      <anchor>6700f49e0f938d6b45c7f868cc80e7aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MinCut</name>
    <filename>classogdf_1_1_min_cut.html</filename>
    <member kind="function">
      <type></type>
      <name>MinCut</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>9c30755b9e61a07ce2fabcedca18869f</anchor>
      <arglist>(Graph &amp;G, EdgeArray&lt; double &gt; &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MinCut</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>adcfbe1a8da874f4d29e9012abebef62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minimumCut</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>7859b243e9f3462efae36dd66e0a7c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutEdges</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>8eb3aaefc0c6a8ab8286c1f4e5ed0f0e</anchor>
      <arglist>(List&lt; edge &gt; &amp;edges, Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partition</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>bdeea8bf7df262240a85bb41fe1bce83</anchor>
      <arglist>(List&lt; node &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>double const</type>
      <name>minCutValue</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>c6014036d79d305faa9473ebbff8dc06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>minimumCutPhase</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>e74ad1d5df2533cf8ce6d0e0b404c158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>contraction</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>d193a3aef8a51864c9e85a30c9c4ec3e</anchor>
      <arglist>(node t, node s)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minCut</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>d137c0c7caf745dd42c861add5c62694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphCopy *</type>
      <name>m_GC</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>ed524582ffdffe4943caa4374c95e5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; double &gt;</type>
      <name>m_w</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>a55f71d4ac702a48e5bdb47de78d8dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_contraction1</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>c55adaad9664411f2ec72e00c67f6d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_contraction2</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>cde239951b3f479b8299956e81bac83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_partition</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>c66b9cc730196475e92a994a26049bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; edge &gt;</type>
      <name>m_cutEdges</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>1e938f3a88155df175c02e5bdfe694f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>m_contractedNodes</name>
      <anchorfile>classogdf_1_1_min_cut.html</anchorfile>
      <anchor>4bc6cc0d86f515811af106c9fb382d51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ShortestPathWithBFM</name>
    <filename>classogdf_1_1_shortest_path_with_b_f_m.html</filename>
    <base>ogdf::ShortestPathModule</base>
    <member kind="function">
      <type></type>
      <name>ShortestPathWithBFM</name>
      <anchorfile>classogdf_1_1_shortest_path_with_b_f_m.html</anchorfile>
      <anchor>5222a454b3320d87923774e49a1cc4ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_shortest_path_with_b_f_m.html</anchorfile>
      <anchor>038ee7c0f5a1d85d4c4671b17d3d69af</anchor>
      <arglist>(const Graph &amp;G, const node s, const EdgeArray&lt; int &gt; &amp;length, NodeArray&lt; int &gt; &amp;d, NodeArray&lt; edge &gt; &amp;pi)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterPQContainer</name>
    <filename>classogdf_1_1_cluster_p_q_container.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterPQContainer</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>cee346cb8abac753fec41d5ccc56fdab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClusterPQContainer</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>a81323657f4a1043df6f50246eb9c822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>67a9871fb5eb50b4ab579cc1b6296968</anchor>
      <arglist>(Graph *subGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Cleanup</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>202a4077c5637d38a32d97688854444a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &gt; *</type>
      <name>m_inLeaves</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>e901da5c5c35e8ce77a436e1ab047097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &gt; *</type>
      <name>m_outLeaves</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>a306d7d44040406af297602ff34ee9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SListPure&lt; edge &gt; &gt; *</type>
      <name>m_frontier</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>8d51376b2f5509ed1f1da03ec9a41834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SListPure&lt; node &gt; &gt; *</type>
      <name>m_opposed</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>8b929fe9a53d818f9e6ab1b47d72f545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SListPure&lt; node &gt; &gt; *</type>
      <name>m_nonOpposed</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>a673841a9bb6b0c345ca1433d91d228f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; *</type>
      <name>m_edge2Key</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>75768814a1476f0985f26031c9ce6a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; *</type>
      <name>m_numbering</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>392952f50cf373a41f3311d9bce786c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; node &gt; *</type>
      <name>m_tableNumber2Node</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>fb65d30ecdfa8a2898ef7686a51db05e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_superSink</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>12eec1a8aec68be068529f5243d3e009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph *</type>
      <name>m_subGraph</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>ff6b083c5707443caff79d3cd39f3269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EmbedPQTree *</type>
      <name>m_T</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>51d7ab561c8a64d09d1c02bd60842392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlanarLeafKey&lt; indInfo * &gt; *</type>
      <name>m_stEdgeLeaf</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>d8ea18bb9bdd6d2c33ca09b386672c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CconnectClusterPlanarEmbed</name>
      <anchorfile>classogdf_1_1_cluster_p_q_container.html</anchorfile>
      <anchor>fa29d8058ff8b8ee9d6ad47aa18acf0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CPlanarSubClusteredST</name>
    <filename>classogdf_1_1_c_planar_sub_clustered_s_t.html</filename>
    <member kind="function">
      <type></type>
      <name>CPlanarSubClusteredST</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>0071213fa38a5af3961d5604a35e7b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>be3c31957fe03c7bc5c9ef438d0d26db</anchor>
      <arglist>(const ClusterGraph &amp;CG, EdgeArray&lt; bool &gt; &amp;inST)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfsBuildOriginalST</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>11444f68e3c146013771d88f226e17eb</anchor>
      <arglist>(node v, ClusterArray&lt; EdgeArray&lt; bool &gt; &gt; &amp;treeEdges, EdgeArray&lt; bool &gt; &amp;inST, NodeArray&lt; bool &gt; &amp;visited)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfsBuildSpanningTree</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>44af2fe29549c74b9f9848ef614d18f0</anchor>
      <arglist>(node v, EdgeArray&lt; bool &gt; &amp;treeEdges, NodeArray&lt; bool &gt; &amp;visited)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>constructRepresentationGraphNodes</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>51dbbb8c8eaee604f4df424566a0987a</anchor>
      <arglist>(const ClusterGraph &amp;CG, Graph &amp;g, cluster c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>constructRepresentationGraphEdges</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>cbdd4f78f7f98f21fa029e8e4a1e0ae2</anchor>
      <arglist>(const ClusterGraph &amp;CG, ClusterArray&lt; Graph * &gt; &amp;RepGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeRepresentationGraphs</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>e3c99d268a8494ec7abc55c5cf5b18c6</anchor>
      <arglist>(const ClusterGraph &amp;CG, ClusterArray&lt; Graph * &gt; &amp;RepGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteRepresentationGraphs</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>85ae9a1ec5f4947d52fc61a27bfb2120</anchor>
      <arglist>(const ClusterGraph &amp;CG, ClusterArray&lt; Graph * &gt; &amp;RepGraph)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_edgeStatus</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>1fa1bf6feed61e343a89c1d04aa9bdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; cluster &gt;</type>
      <name>m_allocCluster</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>ea8d509de71f9117e172355a58fd251a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_repEdge</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>8b0cadf5474bb2603fcec58bcff2a7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; node &gt;</type>
      <name>m_cRepNode</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>667f546f40ed83d564eed0bfb7ab7398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vRepNode</name>
      <anchorfile>classogdf_1_1_c_planar_sub_clustered_s_t.html</anchorfile>
      <anchor>14e42659324404fa0a048d26134f507d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AdjacencyOracle</name>
    <filename>classogdf_1_1_adjacency_oracle.html</filename>
    <member kind="function">
      <type></type>
      <name>AdjacencyOracle</name>
      <anchorfile>classogdf_1_1_adjacency_oracle.html</anchorfile>
      <anchor>b36f800ae0083f1193736ea439b38079</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AdjacencyOracle</name>
      <anchorfile>classogdf_1_1_adjacency_oracle.html</anchorfile>
      <anchor>84c4f11d0bd17c87c14eb3a398bbac08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adjacent</name>
      <anchorfile>classogdf_1_1_adjacency_oracle.html</anchorfile>
      <anchor>89fabfb67eded75d318570554b70dac3</anchor>
      <arglist>(const node, const node) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_nodeNum</name>
      <anchorfile>classogdf_1_1_adjacency_oracle.html</anchorfile>
      <anchor>6f83877d8cc9a81895a59187a71e563d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array2D&lt; bool &gt; *</type>
      <name>m_adjacencyMatrix</name>
      <anchorfile>classogdf_1_1_adjacency_oracle.html</anchorfile>
      <anchor>04428217f48f85a9bd001fb764d98e11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Attraction</name>
    <filename>classogdf_1_1_attraction.html</filename>
    <base>ogdf::NodePairEnergy</base>
    <member kind="function">
      <type></type>
      <name>Attraction</name>
      <anchorfile>classogdf_1_1_attraction.html</anchorfile>
      <anchor>ef6278cc9e900c8e3c829a2f108e8beb</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Attraction</name>
      <anchorfile>classogdf_1_1_attraction.html</anchorfile>
      <anchor>d68a06c9f68cab20f2f717ebe4b50d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreferredEdgelength</name>
      <anchorfile>classogdf_1_1_attraction.html</anchorfile>
      <anchor>8955faa9811f66a1f18a729ee79f4a6e</anchor>
      <arglist>(double l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitializeEdgeLength</name>
      <anchorfile>classogdf_1_1_attraction.html</anchorfile>
      <anchor>2a800d175b7c9c4eeeaceba8428fdf66</anchor>
      <arglist>(double multi)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>computeCoordEnergy</name>
      <anchorfile>classogdf_1_1_attraction.html</anchorfile>
      <anchor>7d390c7b47ee7b7eb3c72a7bc81912fd</anchor>
      <arglist>(node, node, const DPoint &amp;, const DPoint &amp;) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_preferredEdgeLength</name>
      <anchorfile>classogdf_1_1_attraction.html</anchorfile>
      <anchor>eb0844a6bf3ef34b4df30912af9c76c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeAttributes</name>
    <filename>classogdf_1_1_edge_attributes.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeAttributes</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>f893d2515a4006f2240b34580ab0263d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeAttributes</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>eb5fe0fb5888dd85a9de8ba21e599373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_EdgeAttributes</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>6a109d03d4b09233e3865e3627c041c3</anchor>
      <arglist>(double l, edge e_orig, edge e_sub)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_length</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>4945b7ab589dd91101cf23a7f8fb68cf</anchor>
      <arglist>(double l)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_length</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>aad67df0b1088809f7c282772a38596a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_original_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>4e5826909f874b5028fb619a95892630</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subgraph_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>614cd9c7f97655a94df9137069c37eb7</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>get_original_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>9e32ce9f4dd52999c0e8d3df9fe667fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>get_subgraph_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>bed37d243cc3268352a363f2ab31ef00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_copy_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>18346a91d6e656ea5bc6a3d498c6b32c</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>get_copy_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>eaebac9e5aba264738626f0cfe9969c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_higher_level_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>5cf73ab315e7ef668228a5dfd04cb207</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>get_higher_level_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>b224931ca03cbed0fd48696b0a285c1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_moon_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>6347ac6578421ed97c467c58755fa096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_moon_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>b1e68c3bcbba4568f0bddf5f4379c18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_extra_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>199366aeb38493ad3b1d4c528be4d280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_extra_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>bb5bcf85ee8332fa0d861accd455d0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_as_normal_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>83029455c9475a2b7f1b383a051d0ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_mult_values</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>1a3173cb628ce87df61b32046fe49935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>b0753ece5b1afea9251e1c6ad60f9c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>edge</type>
      <name>e_original</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>2e8626d2505a3d46ee68009a47db3525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>edge</type>
      <name>e_subgraph</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>5f7f92e1c001f5d0ac1c47d67e95b04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>moon_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>940f244ea2a80e7bd2850658725d0d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>extra_edge</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>5773602cf071da8db7f2c4f5b666a84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>152682eecc5044e045d5646623fd6102</anchor>
      <arglist>(ostream &amp;, const EdgeAttributes &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classogdf_1_1_edge_attributes.html</anchorfile>
      <anchor>9b455ca4389d5854232c8e9279f26fd6</anchor>
      <arglist>(istream &amp;, EdgeAttributes &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EnergyFunction</name>
    <filename>classogdf_1_1_energy_function.html</filename>
    <member kind="function">
      <type></type>
      <name>EnergyFunction</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>99eb49d61fe91048441776e7d338214a</anchor>
      <arglist>(const String &amp;funcname, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnergyFunction</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>6d676c4016534f372b509c13c6922417</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeEnergy</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>8e76a51dd6484dc330c306f335642622</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeCandidateEnergy</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>b7a75917ea1268cf8a1c8d51280ca270</anchor>
      <arglist>(const node v, const DPoint &amp;newPos)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>b77312e1f0755e18b55496f00ee318f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>candidateTaken</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>462eaf18299b2bb79522a065dfbab03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>energy</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>35ac10a197f6b1813b6929caa399ceaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DPoint</type>
      <name>testPos</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>076dca6fa2d8a1fee62ba7ec7adcc922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DPoint</type>
      <name>currentPos</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>e8b3ad9607eaad6527ceeb2a9d2c7aa3</anchor>
      <arglist>(const node v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>testNode</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>db12dffa8f6453b3b6cb1997a211c0cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>internalCandidateTaken</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>c8525a7b80561e6b7c7b8d8ebf41f679</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>compCandEnergy</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>c8434b16fa5d7cc4ea8f3c96dfec58b2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph &amp;</type>
      <name>m_G</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>256ae4c90097860ac4d3bd9930971a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const String</type>
      <name>m_name</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>f615a9d000c71f197b07d6a3d16b6911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_candidateEnergy</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>1ec5e39e90c4cd4f0aa0097b08f838fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_energy</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>db1b8e06a034bc89c1d9018829fdebb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>EnergyFunction</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>ae7bd747029b59530292baccbb30855c</anchor>
      <arglist>(const EnergyFunction &amp;e)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>EnergyFunction &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>cc37deb80326f697a72f457f3f381de9</anchor>
      <arglist>(const EnergyFunction &amp;e)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphAttributes &amp;</type>
      <name>m_AG</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>f9ee74c6a22e5f4db069215a1f6ed844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_testNode</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>af9b59e61d1c6864bb67f65ba83a657d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_testPos</name>
      <anchorfile>classogdf_1_1_energy_function.html</anchorfile>
      <anchor>6650d85db101b8ca67cc69be658dd3f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FruchtermanReingold</name>
    <filename>classogdf_1_1_fruchterman_reingold.html</filename>
    <member kind="function">
      <type></type>
      <name>FruchtermanReingold</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>ed2b6a3014475c1e6059809fce35117f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FruchtermanReingold</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>85dc8ecb068a1c69ef9f4680b32c6bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_exact_repulsive_forces</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>c06e551c88d9b972a7d6354648edf486</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_approx_repulsive_forces</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>00c44b456c3caf120e9e8ab83ae67ad5</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_initialisations</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>3999ccf4b088f957363e9df743843415</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep, double boxlength, DPoint down_left_corner, int grid_quotient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_boxlength_and_cornercoordinate</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>02774d9b5e9ce3dc433e66fc37f143f9</anchor>
      <arglist>(double b_l, DPoint d_l_c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>f_rep_scalar</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>14237c4446b048b746a4f74e29abd69e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>grid_quotient</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>8b9976a15a2b3f5027c8573349c502bd</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>grid_quotient</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>c9e2499b7d1e91fc3184cdaa81f3cd1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_grid_quotient</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>d499421ddaed81ad39ce5b1625759ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_gridindex</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>bb956cc7d6ad500c0b34997de4f3fc09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>boxlength</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>b9c768238d90e3383754898e68b31fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>down_left_corner</name>
      <anchorfile>classogdf_1_1_fruchterman_reingold.html</anchorfile>
      <anchor>ab7780e23c3f704c455b53162b7a74a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::IntersectionRectangle</name>
    <filename>classogdf_1_1_intersection_rectangle.html</filename>
    <member kind="function">
      <type></type>
      <name>IntersectionRectangle</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>86e377fbc8ed27c789dae687231fdba9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionRectangle</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>461fd47a9eb62c7e0ec45ead57005812</anchor>
      <arglist>(const DPoint &amp;p1, const DPoint &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionRectangle</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>7aa6f6a93cfc008900399fc7ecf2727b</anchor>
      <arglist>(const IntersectionRectangle &amp;dr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionRectangle</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>e6e196d5e4fcd214c7a89831f4dae09d</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionRectangle</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>6eaca1c88a258aa33e30a3afaceffbcb</anchor>
      <arglist>(const DLine &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionRectangle</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>9301e22a7a85a2744ec7490755f9161f</anchor>
      <arglist>(const DPoint &amp;, double, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>babc6b2fe3dfc355bcc2e6ca39ca76e6</anchor>
      <arglist>(const IntersectionRectangle &amp;dr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>6012cfc646cc5e8d8d7f0ed3301aa345</anchor>
      <arglist>(const IntersectionRectangle &amp;dr) const </arglist>
    </member>
    <member kind="function">
      <type>IntersectionRectangle &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>4e03fa65080207173e196a0ec92aaa91</anchor>
      <arglist>(const IntersectionRectangle &amp;dr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>3f04f120f4d7ca687022c0c325eb38f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>e69efee6d6e71a512f8f8986b00d0be2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DPoint</type>
      <name>center</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>52cb9d92b49de6f0b73333f354c99d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>area</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>96d54014f93210c4ad004eeeccfea5be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>p1</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>7f3198deec7155873a6831e356e66444</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>p2</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>f6a343f46ac2897a12263af27cb5b750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>81b35f82333f8efd415ba9b655522b22</anchor>
      <arglist>(const DPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>e0591862e76476cfda4c69318adea326</anchor>
      <arglist>(const IntersectionRectangle &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>IntersectionRectangle</type>
      <name>intersection</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>a6246edfa992b18b76d7d6e8c5835aed</anchor>
      <arglist>(const IntersectionRectangle &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>fecf475ae878b3f10aa75140fe7856f9</anchor>
      <arglist>(const IntersectionRectangle &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>8439f65db68b5f5b21e7edbfd563ffbc</anchor>
      <arglist>(const DPoint &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>d94544e05875b3b22962260912bf9d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>yInvert</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>30f15d0afa8323fa81c3c71205b2f20f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>xInvert</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>8fe01a752c34358a2e08e2cc75586511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DLine</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>28468d087731bf72330e01aef6f504b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>DLine</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>3190db54d2c8c43ec5de0052713293ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>DLine</type>
      <name>left</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>2662063c87823cd6027fc444e7077f8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>DLine</type>
      <name>right</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>5549e33aa5c868efe5baa91f13ff4964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>parallelDist</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>d36a2bc3f10cfc90335132cf909609b8</anchor>
      <arglist>(const DLine &amp;, const DLine &amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>pointDist</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>c6f31e5b7f5dd704ee6ae97ebab559c8</anchor>
      <arglist>(const DPoint &amp;p1, const DPoint &amp;p2) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_p1</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>08ce5682c655d4db6c1266db496015e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_p2</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>23781b9e0817ba1b4af88594f80c4461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_area</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>33e2febc8c34152dbf5c258a76dbec50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>m_center</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>ab03733fe509d4b367eb02c1f6e83d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_intersection_rectangle.html</anchorfile>
      <anchor>48ee11da171446b4fd7e0a22c7ba9449</anchor>
      <arglist>(ostream &amp;, const IntersectionRectangle &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NMM</name>
    <filename>classogdf_1_1_n_m_m.html</filename>
    <member kind="function">
      <type></type>
      <name>NMM</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>95eac5065ae956fb446a51eeef0e751d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NMM</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>5e11a518d406951bd875280bb029fa50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_repulsive_forces</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>7159d0aff4f9396c0e700575d78e112e</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_initialisations</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>e5b508da177619517d8f1d38518ad810</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep, double boxlength, DPoint down_left_corner, int particles_in_leaves, int precision, int tree_construction_way, int find_small_cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate_memory</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>bf2932a27ef47bf54942ef4a65a526ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_boxlength_and_cornercoordinate</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>6c1d1384b41c4265a320847ed050b5b7</anchor>
      <arglist>(double b_l, DPoint d_l_c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_power_of_2_array</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>55bc850c6223bd346727e9dcdfb4aa1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>free_power_of_2_array</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>f901c398d78aecf08aa3dc09685590fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>power_of_two</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>98d41b1b6b1f9c95a4cde3f4e8327552</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>maxboxindex</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>9ccc12d90599a0a70c2383d2387e57cc</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_repulsive_forces_by_NMM</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>5a6e5170d2638960f33413a0a2ece22a</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_repulsive_forces_by_exact_method</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>35e1e29a6052fc283e8598d2b2999744</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>build_up_red_quad_tree_path_by_path</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>fa1345dd3eebe6347a333dfebc223c8c</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>make_copy_and_init_Lists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>a3d53dcd436d847137b51f4dbf2bd002</anchor>
      <arglist>(List&lt; ParticleInfo &gt; &amp;L_x_orig, List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;L_y_orig, List&lt; ParticleInfo &gt; &amp;L_y_copy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>build_up_root_node</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>e64c1cdc2ebcda2b445f22622ef70348</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_sorted_coordinate_Lists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>cc434542775573e94cd84dcef1467cb7</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, List&lt; ParticleInfo &gt; &amp;L_x, List&lt; ParticleInfo &gt; &amp;L_y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decompose_subtreenode</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>5e66377eefdf1c0c50de6eb79437a582</anchor>
      <arglist>(QuadTreeNM &amp;T, List&lt; ParticleInfo &gt; &amp;act_x_List_copy, List&lt; ParticleInfo &gt; &amp;act_y_List_copy, List&lt; QuadTreeNodeNM * &gt; &amp;new_leaf_List)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_boundaries_of_act_node</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>af6b33c32f31cf867f1f78eb3462fa2e</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, double &amp;x_min, double &amp;x_max, double &amp;y_min, double &amp;y_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>in_lt_quad</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>dbd35b6abeabe1d47183bb5a810e5dd5</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, double x_min, double x_max, double y_min, double y_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>in_rt_quad</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>c190060158000288c608993f2f9985bb</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, double x_min, double x_max, double y_min, double y_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>in_lb_quad</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>440af546f12016d17aa2fadc78160894</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, double x_min, double x_max, double y_min, double y_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>in_rb_quad</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>1979969cc79d81b199bdec1e091c7383</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, double x_min, double x_max, double y_min, double y_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>split_in_x_direction</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>d82200d0b6eac53322c78b4f0624c72d</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;L_y_copy, List&lt; ParticleInfo &gt; *&amp;L_x_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_right_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_right_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>split_in_y_direction</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>016d9b3ff574bfc7b8e2028beef5f86b</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;L_y_copy, List&lt; ParticleInfo &gt; *&amp;L_x_bottom_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_bottom_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_top_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_top_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>x_delete_right_subLists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>897657f3ee39d5bf162a3c1668884012</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;L_y_copy, List&lt; ParticleInfo &gt; *&amp;L_x_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_right_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_right_ptr, ListIterator&lt; ParticleInfo &gt; last_left_item)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>x_delete_left_subLists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>d256591689301d74c525cf69dabd2e30</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;L_y_copy, List&lt; ParticleInfo &gt; *&amp;L_x_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_right_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_right_ptr, ListIterator&lt; ParticleInfo &gt; last_left_item)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>y_delete_right_subLists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>39c4ab2718d2c83ed0692046b95e14e8</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;L_y_copy, List&lt; ParticleInfo &gt; *&amp;L_x_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_right_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_right_ptr, ListIterator&lt; ParticleInfo &gt; last_left_item)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>y_delete_left_subLists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>4a75b1ed7a391c273493fcc4dcf58af8</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;L_y_copy, List&lt; ParticleInfo &gt; *&amp;L_x_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_left_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_right_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_right_ptr, ListIterator&lt; ParticleInfo &gt; last_left_item)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>split_in_y_direction</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>4600b7a5262cd1cf6ade638535f8aa55</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_b_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_t_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_b_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_t_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>y_move_left_subLists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>1212879329fbc1b6d350a81b2bab68b6</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *&amp;L_x_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_b_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_t_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_b_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_t_ptr, ListIterator&lt; ParticleInfo &gt; last_left_item)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>y_move_right_subLists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>e99197f5643dc9fe23530321f20bc490</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *&amp;L_x_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_b_ptr, List&lt; ParticleInfo &gt; *&amp;L_x_t_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_b_ptr, List&lt; ParticleInfo &gt; *&amp;L_y_t_ptr, ListIterator&lt; ParticleInfo &gt; last_left_item)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>build_up_sorted_subLists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>5f5993cdd15ff7c19cea4af6807ff99e</anchor>
      <arglist>(List&lt; ParticleInfo &gt; &amp;L_x_copy, List&lt; ParticleInfo &gt; &amp;act_y_List_copy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>build_up_red_quad_tree_subtree_by_subtree</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>dc51df844745334343aa32df37a072aa</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>build_up_root_vertex</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>23043302a8cdcf050e8afd74f40d7a87</anchor>
      <arglist>(const Graph &amp;G, QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>construct_subtree</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>933b41b09651af6ad62267ed95681ce8</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T, QuadTreeNodeNM *subtree_root_ptr, List&lt; QuadTreeNodeNM * &gt; &amp;new_subtree_root_List)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>construct_complete_subtree</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>dcacd8b0463819c1aa2e33c841ca5674</anchor>
      <arglist>(QuadTreeNM &amp;T, int subtree_depth, Array2D&lt; QuadTreeNodeNM * &gt; &amp;leaf_ptr, int act_depth, int act_x_index, int act_y_index)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_contained_nodes_for_leaves</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>f3e6f0c87934aef93096e4df8e473fd1</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T, QuadTreeNodeNM *subtree_root_ptr, Array2D&lt; QuadTreeNodeNM * &gt; &amp;leaf_ptr, int maxindex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_particlenumber_in_subtree_entries</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>4ab33781e64b1c3015278c3e8b2ffe72</anchor>
      <arglist>(QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>construct_reduced_subtree</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>866c916bd6d282be3f1a7e45f0772385</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T, List&lt; QuadTreeNodeNM * &gt; &amp;new_subtree_root_List)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>delete_empty_subtrees</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>807a786bd889cea4472837e8ec3a5d3c</anchor>
      <arglist>(QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>check_and_delete_degenerated_node</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>af5dfbae0c3964674264a1020f2ffe36</anchor>
      <arglist>(QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>delete_sparse_subtree</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>e42d2930f4c009078961a14bb57bc75f</anchor>
      <arglist>(QuadTreeNM &amp;T, QuadTreeNodeNM *new_leaf_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>collect_contained_nodes</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>d0e9714f20b9a0fd30549f01a237f8b5</anchor>
      <arglist>(QuadTreeNM &amp;T, QuadTreeNodeNM *new_leaf_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>find_smallest_quad</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>09c697e6a2cdde329bdba840acb76cde</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>find_small_cell_iteratively</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>975fdda8b37168ecfb5baeb41f7d8574</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, double x_min, double x_max, double y_min, double y_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>find_small_cell_by_formula</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>58784be732fff616ae4f98a3bc10c950</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr, double x_min, double x_max, double y_min, double y_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>delete_red_quad_tree_and_count_treenodes</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>b75352b1e7fc38394a129678df998ede</anchor>
      <arglist>(QuadTreeNM &amp;T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>form_multipole_expansions</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>1eb7ff3759e7386efa6ace85cd06ad3c</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T, List&lt; QuadTreeNodeNM * &gt; &amp;quad_tree_leaves)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>form_multipole_expansion_of_subtree</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>df57e21aba28e040a46ee58091799cc2</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNM &amp;T, List&lt; QuadTreeNodeNM * &gt; &amp;quad_tree_leaves)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_expansion_Lists</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>d83cda91c463642fe8b4a5ecd292b799</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_center</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>5941223dfccff5ab94ba48261a1db91c</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNodeNM *act_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>form_multipole_expansion_of_leaf_node</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>abf7aec5b4ee0980253504d4df80306b</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNodeNM *act_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_shifted_expansion_to_father_expansion</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>370ea141062b6d56513685005387b48c</anchor>
      <arglist>(QuadTreeNodeNM *act_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_local_expansions_and_WSPRLS</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>fc3b724b3b981d05ba5b18c99865eb93</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNodeNM *act_node_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>well_seperated</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>a34114512850ca77d691457d3189d73e</anchor>
      <arglist>(QuadTreeNodeNM *ptr_1, QuadTreeNodeNM *ptr_2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>bordering</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>d5307a85fe6428b83124f04fea7fd352</anchor>
      <arglist>(QuadTreeNodeNM *ptr_1, QuadTreeNodeNM *ptr_2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_shifted_local_exp_of_parent</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>52e93057987da4ecb4909cac5770b446</anchor>
      <arglist>(QuadTreeNodeNM *node_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_local_expansion</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>7318ff2a41b1377a077235b799539c4b</anchor>
      <arglist>(QuadTreeNodeNM *ptr_1, QuadTreeNodeNM *ptr_2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_local_expansion_of_leaf</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>230c942b5037fcffe15ac92587de4a45</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, QuadTreeNodeNM *leaf_ptr, QuadTreeNodeNM *act_ptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transform_local_exp_to_forces</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>6255eeceb8aa75c6e3581fb3a76bf885</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, List&lt; QuadTreeNodeNM * &gt; &amp;quad_tree_leaves, NodeArray&lt; DPoint &gt; &amp;F_local_exp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transform_multipole_exp_to_forces</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>0a9efb896350a5f46a3765d1bd9e8470</anchor>
      <arglist>(NodeArray&lt; NodeAttributes &gt; &amp;A, List&lt; QuadTreeNodeNM * &gt; &amp;quad_tree_leaves, NodeArray&lt; DPoint &gt; &amp;F_multipole_exp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculate_neighbourcell_forces</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>a545eda583fb1abeac7d63baca5d2560</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; NodeAttributes &gt; &amp;A, List&lt; QuadTreeNodeNM * &gt; &amp;quad_tree_leaves, NodeArray&lt; DPoint &gt; &amp;F_direct)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_rep_forces</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>4c614d44c29ab55dc40c9699fb906787</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; DPoint &gt; &amp;F_direct, NodeArray&lt; DPoint &gt; &amp;F_multipole_exp, NodeArray&lt; DPoint &gt; &amp;F_local_exp, NodeArray&lt; DPoint &gt; &amp;F_rep)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>f_rep_scalar</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>7f4f4d136e4c5d0266a0c27650fbae40</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_binko</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>d6469318df6b52e601b37fecbafec93c</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>free_binko</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>d0c94c747a15559e379eff11a60e3f45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>binko</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>f914dc14ead6d9d724434013b7c7d7ff</anchor>
      <arglist>(int n, int k)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>tree_construction_way</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>8fcd99e82d2493fd60138b881038189b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>tree_construction_way</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>b304dd054b96e9082f93add1923b6b9d</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>find_sm_cell</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>c10b1b8b74356eda1aec08eba95dcb5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>find_sm_cell</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>9ad3837e3c994ad515b99421540d81f5</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>particles_in_leaves</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>97b25624facd511e7f7e485344d03e99</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>particles_in_leaves</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>f0c98d6c991b1ca611669825e5c3a41b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>precision</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>154112b76a1c6d43d975372c575c1ecd</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>precision</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>f553f81e5c4a1fecc028ae81bdfb7472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MIN_NODE_NUMBER</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>09c9e6122d294802bc865f2c1ff554d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>using_NMM</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>9fa1d4d76cc64885ee8144a8e9030970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FruchtermanReingold</type>
      <name>ExactMethod</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>e52c6b3436b5445e0b3a717fc2d9b618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_tree_construction_way</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>6a14163124b25a5e35cb1e6c7da9001f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_find_small_cell</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>4ae7dc3fc80c8d952015549857224705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_particles_in_leaves</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>9059a0f8109689960dfc51d1ae92f9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_precision</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>a0ecc33f5444af9f1bbb298a61af5abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>boxlength</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>e9051e1eb704cceea0472f88adf844f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>down_left_corner</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>9a6fb9088a1884b6701ccb4698868a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>power_of_2</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>ee3c6459fe8d0caedf349212c9919ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_power_of_2_index</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>7b479aed45032fefeabe2259e5a8f725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>BK</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>ff87edfd860c111952de5b1ba163f5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; DPoint &gt;</type>
      <name>rep_forces</name>
      <anchorfile>classogdf_1_1_n_m_m.html</anchorfile>
      <anchor>2063f2b764b85cf2bfefa467dfc53dbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeAttributes</name>
    <filename>classogdf_1_1_node_attributes.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeAttributes</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>35923c8cd08246af77e5be6167d5f3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeAttributes</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>1cf1ebd7cace9e11ffca1ffd61888fc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_NodeAttributes</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>45b9962e296da7a403908d11167d8c2c</anchor>
      <arglist>(double w, double h, DPoint pos, node v_low, node v_high)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_position</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>ec1526254f7756632220438b9b4fb2f1</anchor>
      <arglist>(DPoint pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_width</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>65a5c1ac69d5f46d841c38eab4afe9e0</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_height</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>860c38f06b39f9c1dc573ff49ef29bd8</anchor>
      <arglist>(double h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_x</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>621f90528627a18acef879e8d49906e9</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_y</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>876accd090a0df2394eefffa3a8bd0d5</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>DPoint</type>
      <name>get_position</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>5060e9f9661a46cddf3b24e67896ed68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_x</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9ea94dbba41c5e8d539c879d4a56d7ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_y</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>538920ec8ce7ba296226c5ba3d1f0326</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_width</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9143de395034e90dfbbdd5f8436a5348</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_height</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>72aa36d920d92725d9d724d17465f72f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_original_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>bec75ff7e5512819226a2bad4ce4d3ea</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_copy_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>d8d3d02e9e993efeaf75918f2e122ceb</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_original_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>0df1f7da2552ab213a56bb861bf89567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_copy_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9a4c7d234e5201c348af93ed690ff9c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subgraph_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>1a6066a675066d6a7171c40c39342abb</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_subgraph_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>a7452b30abd09bc766285ce705386416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lower_level_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>459d083cd94dbfda611286ced1a27988</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_higher_level_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9d39c5f7b8b012945040aeff68ce7b4b</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_lower_level_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9413613527179df3b272ad99b9ad59e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_higher_level_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>bb85aef2357a02dc8c10ba4abe660577</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mass</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>0ad8a95a308356a714464013f232373b</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_type</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>a8c7c8d932271d2b3460e5133432800e</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dedicated_sun_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>c0f582b53e7e8b10b40834fdde080113</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dedicated_sun_distance</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9df492502039bc4785d8e3a9cf5c4fe6</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dedicated_pm_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>7ac99264d398b292e7c95428c14da0fa</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>place</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>0c39c9c16c920c181402fd2366898452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_angle_1</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>466a8ee05af2f08afba759da3765c9d9</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_angle_2</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>5ba3b944b42d2ade6acad6bb6f37808a</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_mass</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>83201a15fb92c13cd3dbdca57bae2591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_type</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>3850c7018f926c0cd83734c27fefcf9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_dedicated_sun_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>ff476fa30aac75efa2967ddf7da9881e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_dedicated_sun_distance</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>d16e1f3456b6e8b9fd452c94695957e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_dedicated_pm_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>5fe7b85591d88ddca649647d9e297b03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_placed</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>63f4ee10e8a7e9d8f0eb939b1598effb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle_1</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>bac89fbd2056b2091dd0d04f154a406a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle_2</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>2c7cd3946eabf1fe9b09c2c526f847ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; double &gt; *</type>
      <name>get_lambda_List_ptr</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>51d0c0322cefefca91471e745d6a7329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>List&lt; node &gt; *</type>
      <name>get_neighbour_sun_node_List_ptr</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9f7f16be49aa3886091971d6a2737c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>List&lt; node &gt; *</type>
      <name>get_dedicated_moon_node_List_ptr</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>bda85bc87eb172872698e47cafd41489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_mult_values</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>4c51ab853ba36ffd145ccf0cc68870cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>position</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>1cccd2d3535bb8167d0c6a876d254d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>width</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>3159a9f212a1c1cfb0a635d7cd4dd661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>676a0e2643164ad4adbf072ff6ffc746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>v_lower_level</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>9a6858a913d4508e307f8730fbd6d35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>v_higher_level</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>47645a9a34e49a71bf8fbcb15cc9c38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mass</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>af8ae157d7f6cec9acae1d644d42a4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>bd9bc1b43a4e5c32c9cbba1fc33b21e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>dedicated_sun_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>287494ffd778f84d08521012621c2690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>dedicated_sun_distance</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>05129683a631ae8fb81a228006eca0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>dedicated_pm_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>83a698bf24fdd16e0ff6a6ef5912fe0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; double &gt;</type>
      <name>lambda</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>5d3a59f80983f13e06c2f3c274055e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>neighbour_s_node</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>76373b4ea86d00972fccb69862fe37e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; double &gt; *</type>
      <name>lambda_List_ptr</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>de0a5e7cc44d3c8fc15dfcf4c84b8dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt; *</type>
      <name>neighbour_s_node_List_ptr</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>8f88e2e68596bdf8c5d61889aede29c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>moon_List</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>6ef8264056aa84f4190a1cc16c6ae664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt; *</type>
      <name>moon_List_ptr</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>fc1f3c82d325042891dbc728238639fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>placed</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>c47549a50af44d471a03eeebcb8b05d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>angle_1</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>1f3cac4218ebbcb4f53613b82386e5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>angle_2</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>6de3f65ed88b7c2e0a095b914d25fc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>7c99709f0ff7b7da959a2ff618e84172</anchor>
      <arglist>(ostream &amp;, const NodeAttributes &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classogdf_1_1_node_attributes.html</anchorfile>
      <anchor>f9b7550bbf50467eeef62b4f3c1d517d</anchor>
      <arglist>(istream &amp;, NodeAttributes &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodePairEnergy</name>
    <filename>classogdf_1_1_node_pair_energy.html</filename>
    <base>ogdf::EnergyFunction</base>
    <member kind="function">
      <type></type>
      <name>NodePairEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>fdf8c74560adb691a368681527e8d165</anchor>
      <arglist>(const String energyname, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodePairEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>469857f29565079dbebc34ff46fde5c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>a6593620824b55b9a2f62ac367ef4a55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>computeCoordEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>2ac7b4ad6fc7e6f26cf52b92fae419df</anchor>
      <arglist>(node, node, const DPoint &amp;, const DPoint &amp;) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>nodeNum</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>d45e1e2901dfde50ca331e3d86672f3e</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>adjacent</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>51226b2a1922f8ecff2d88002bf882bd</anchor>
      <arglist>(const node v, const node w) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IntersectionRectangle &amp;</type>
      <name>shape</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>fa2e7e4dc617ca2771bd8bd062b0b4a5</anchor>
      <arglist>(const node v) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>computePairEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>bd34fabd19ac62d26146bccbe8eed585</anchor>
      <arglist>(const node v, const node w) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compCandEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>334eb17be5e446962cbfad939abdf3f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>internalCandidateTaken</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>4a2507f5427b2e9fdc4491cabca6e444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; *</type>
      <name>m_nodeNums</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>cdb3169d0c1245310f9cd770afea2574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array2D&lt; double &gt; *</type>
      <name>m_pairEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>97c778563dc455dd2ea13cb477d3327b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_candPairEnergy</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>906a5423304c5c5d47cf1b5ead994158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; IntersectionRectangle &gt;</type>
      <name>m_shape</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>6a076780326e1ed2e8f596406996742e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>m_nonIsolated</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>88edf96ba687aaf0805f243a3f7737c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const AdjacencyOracle</type>
      <name>m_adjacentOracle</name>
      <anchorfile>classogdf_1_1_node_pair_energy.html</anchorfile>
      <anchor>fcdf0f3c8deb5d4fc5b8c92dccad11db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Overlap</name>
    <filename>classogdf_1_1_overlap.html</filename>
    <base>ogdf::NodePairEnergy</base>
    <member kind="function">
      <type></type>
      <name>Overlap</name>
      <anchorfile>classogdf_1_1_overlap.html</anchorfile>
      <anchor>3da24b4a45a9ad82ad66cd91de8b6d00</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Overlap</name>
      <anchorfile>classogdf_1_1_overlap.html</anchorfile>
      <anchor>02a00f4dad478d695b51332431883ab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>computeCoordEnergy</name>
      <anchorfile>classogdf_1_1_overlap.html</anchorfile>
      <anchor>3c6697dab4a915eac64d60e56774d669</anchor>
      <arglist>(node, node, const DPoint &amp;, const DPoint &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ParticleInfo</name>
    <filename>classogdf_1_1_particle_info.html</filename>
    <member kind="function">
      <type></type>
      <name>ParticleInfo</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>134f3b689db3aecb9d73ec8874332919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParticleInfo</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>d5346cca5646cb91058842e2164c0542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vertex</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>a61a0487e71596a34c0d4f9010cd7fb2</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_x_y_coord</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>23af86b341ffda9d80c8319d1d517327</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cross_ref_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>8062a7c5e5fab95a7ed9e62b7a0b31ad</anchor>
      <arglist>(ListIterator&lt; ParticleInfo &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subList_ptr</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>5d4475675d3438fbc448a8f63226dbc4</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_copy_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>249c0995602e0bee956739207a89a060</anchor>
      <arglist>(ListIterator&lt; ParticleInfo &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>760e348704fd2a4e1f5678e8a431a8bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmark</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>268748a4746f2e29f59e385a6df38c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tmp_cross_ref_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>13710c15670e54482dd72e21eaa3bfb0</anchor>
      <arglist>(ListIterator&lt; ParticleInfo &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>get_vertex</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>856a40c83139a112e7bcecbcb7b6ec28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_x_y_coord</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>47f0011e5eeb6f2630e8e46d970fa795</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; ParticleInfo &gt;</type>
      <name>get_cross_ref_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>f56f68dcfd09ac8514e0955fd7aee727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; ParticleInfo &gt; *</type>
      <name>get_subList_ptr</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>355c60aae588d4d46433c5b0aa393611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; ParticleInfo &gt;</type>
      <name>get_copy_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>600d636f1f6bebe6d0b5b876b62039a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>711b7d95ef427b5ce5c61330dc692b98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; ParticleInfo &gt;</type>
      <name>get_tmp_cross_ref_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>1a5fdd20d783f93be3b0ee20aff14380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>vertex</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>60c24342380edac5e0532405b19e7c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>x_y_coord</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>16f1cc50186724640dfa227b0d1102ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; ParticleInfo &gt;</type>
      <name>cross_ref_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>dc755e1e6d096f3014595fab5a25ec95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; ParticleInfo &gt; *</type>
      <name>subList_ptr</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>9ff2b332acb1e34750290311bb2fdff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; ParticleInfo &gt;</type>
      <name>copy_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>612d19097125b688e6f9d36ea6b4b5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>marked</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>1f5c13e41296c6a9f980b573c7e6bd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListIterator&lt; ParticleInfo &gt;</type>
      <name>tmp_item</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>d043f869b3bea4168f418bde2c2b1d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>0a5ced9f7fef624af6e5095d53461190</anchor>
      <arglist>(ostream &amp;output, const ParticleInfo &amp;A)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classogdf_1_1_particle_info.html</anchorfile>
      <anchor>4d94e7027eeade5ab60f9161fe1e6955</anchor>
      <arglist>(istream &amp;input, ParticleInfo &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ParticleInfoComparer</name>
    <filename>classogdf_1_1_particle_info_comparer.html</filename>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type></type>
      <name>ParticleInfoComparer</name>
      <anchorfile>classogdf_1_1_particle_info_comparer.html</anchorfile>
      <anchor>2674fd3ce20cc5de7fd8515752449aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_particle_info_comparer.html</anchorfile>
      <anchor>ccee07b544cc273e225402c42b907ea6</anchor>
      <arglist>(const ParticleInfo &amp;a, const ParticleInfo &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Planarity</name>
    <filename>classogdf_1_1_planarity.html</filename>
    <base>ogdf::EnergyFunction</base>
    <member kind="function">
      <type></type>
      <name>Planarity</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>92bb4f31eabbd668be1eeb7d77656c9f</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Planarity</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>c417ce66ff1f9eace25f4aa8bb0f7e6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEnergy</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>63e85ba887e0177089333e22eb018fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>intersect</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>be62ec714e403a5fa42799bdc7b7901e</anchor>
      <arglist>(const edge, const edge) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compCandEnergy</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>0f52d70d712f60af7513b669ed41efb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>internalCandidateTaken</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>90c1a09fa4811a4497c6c05ac33621a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clearCandidateCrossings</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>37d1b2a5634dd4b62a8029e15f95dd36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>lowLevelIntersect</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>fbbb3a9cc7b18ecfbdd960f57c1ce1de</anchor>
      <arglist>(const DPoint &amp;, const DPoint &amp;, const DPoint &amp;, const DPoint &amp;) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt; *</type>
      <name>m_edgeNums</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>08fa7c2e32114b4aaf161901b01f1775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array2D&lt; bool &gt; *</type>
      <name>m_crossingMatrix</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>87f8eefea271d6a98f432774a60cc669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; ChangedCrossing &gt;</type>
      <name>m_crossingChanges</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>a59a6855d40bc4508442595a7ffce3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; edge &gt;</type>
      <name>m_nonSelfLoops</name>
      <anchorfile>classogdf_1_1_planarity.html</anchorfile>
      <anchor>6b216ab4f01c5c98913322e8a206ea71</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::Planarity::ChangedCrossing</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::Planarity::ChangedCrossing</name>
    <filename>structogdf_1_1_planarity_1_1_changed_crossing.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>edgeNum1</name>
      <anchorfile>structogdf_1_1_planarity_1_1_changed_crossing.html</anchorfile>
      <anchor>42a906e6d23078e9bcee3777e14aa24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>edgeNum2</name>
      <anchorfile>structogdf_1_1_planarity_1_1_changed_crossing.html</anchorfile>
      <anchor>c79af06c220ae3d59ae4c443af739809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cross</name>
      <anchorfile>structogdf_1_1_planarity_1_1_changed_crossing.html</anchorfile>
      <anchor>a22a0eead87b83ceeb9a5afd5b9c2d67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarityGrid</name>
    <filename>classogdf_1_1_planarity_grid.html</filename>
    <base>ogdf::EnergyFunction</base>
    <member kind="function">
      <type></type>
      <name>PlanarityGrid</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>0ba0b0e32e0469b57aa038bc16d9bc71</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarityGrid</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>6c3a1b1769ba8850f2ff4d331afbe88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEnergy</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>7981ee7831b217fa7eb2b4b54913c9c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compCandEnergy</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>c2953b3af493a327f0ff6871fb2d4784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>internalCandidateTaken</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>4ac7039292e082e0ee15e0392daf7b4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GraphAttributes &amp;</type>
      <name>m_layout</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>dc2e6f379c289baeb4c43abbd7e55de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UniformGrid *</type>
      <name>m_currentGrid</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>243182c580bab6793a2244bd5ce1f9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UniformGrid *</type>
      <name>m_candidateGrid</name>
      <anchorfile>classogdf_1_1_planarity_grid.html</anchorfile>
      <anchor>9fb4f28d60b0d3bcd9c492980bf4b6a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::QuadTreeNM</name>
    <filename>classogdf_1_1_quad_tree_n_m.html</filename>
    <member kind="function">
      <type></type>
      <name>QuadTreeNM</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>589049e750ffc07cd2b551eef3d035c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QuadTreeNM</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>1a8f404f8cc63121e21bb4c0febf0d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_tree</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>8999155583ba62cad1620b9a4782c9b9</anchor>
      <arglist>(QuadTreeNodeNM *node_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_tree_and_count_nodes</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>56b3ce37c920788c47fa88fe4935a96c</anchor>
      <arglist>(QuadTreeNodeNM *node_ptr, int &amp;nodecounter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cout_preorder</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>ae795a4c2c413b37d8f87ac2a4c8fc39</anchor>
      <arglist>(QuadTreeNodeNM *node_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cout_preorder</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>716949d12b38eebe0b89024b654f9037</anchor>
      <arglist>(QuadTreeNodeNM *node_ptr, int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_tree</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>bb522884af21cf8d41553230b0c2216d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_at_root</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>5b49a426d84f3452a53097a2ed1b1c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>go_to_father</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>350e2e1dd581f55e7ec1dd9297dc1281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>go_to_lt_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>ef44ceb3cf294048603d6c3c004d5fbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>go_to_rt_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>d7c7f46844b9ade67e1dd5abd3a9d920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>go_to_lb_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>906e85c6a19f8271a77a081817c3b29d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>go_to_rb_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>b4a971bc177ad737fdb30ba8cf4fdeda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_lt_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>1762eda02f28532ee0c2408f843fe9d2</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *L_x_ptr, List&lt; ParticleInfo &gt; *L_y_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_lt_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>90ced58bfd5e22759a0fb87e66a488e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_rt_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>6bb647d7efd9776da9dc45a413865153</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *L_x_ptr, List&lt; ParticleInfo &gt; *L_y_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_rt_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>bb202cb4c063edcd255ff105a2e79510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_lb_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>b574c79733cc7203dbc277c18caac027</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *L_x_ptr, List&lt; ParticleInfo &gt; *L_y_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_lb_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>a1eb2be029f19386b2230c13687a3957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_rb_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>4358316e7323e3bb954ed1590a075167</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *L_x_ptr, List&lt; ParticleInfo &gt; *L_y_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_new_rb_child</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>6a4c8d93fad25dc17341394f522d5341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuadTreeNodeNM *</type>
      <name>get_act_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>81ca4d0e3175db14438e30c40216496c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuadTreeNodeNM *</type>
      <name>get_root_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>48834bf697584d9e0592531a2cb1284a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_root_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>107de328e264ab59850c341a817b7f4f</anchor>
      <arglist>(QuadTreeNodeNM *r_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_act_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>497ea5fa6a88afb694259bf9523125e3</anchor>
      <arglist>(QuadTreeNodeNM *a_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_root_node</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>aee2374eab34bbf313b48961aa37bc76</anchor>
      <arglist>(QuadTreeNodeNM &amp;r)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuadTreeNodeNM *</type>
      <name>root_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>558b1856822be045559b2e2d2841f99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuadTreeNodeNM *</type>
      <name>act_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_n_m.html</anchorfile>
      <anchor>3a4c22258e10410407c299bf897c98a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::QuadTreeNodeNM</name>
    <filename>classogdf_1_1_quad_tree_node_n_m.html</filename>
    <member kind="function">
      <type></type>
      <name>QuadTreeNodeNM</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>9dd5821a2080632c15276affa33ee8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QuadTreeNodeNM</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>1a003e55c596835d50d0a16ec58da5a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Sm_level</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>15504236164306d34d1b4ff57c4d46fb</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Sm_downleftcorner</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>b2d119e5d349865540fd5c375bc5208f</anchor>
      <arglist>(DPoint dlc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Sm_boxlength</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>c49c09f374c56cde15958fb7cbb1c9fc</anchor>
      <arglist>(double l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_x_List_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>74834c16ee0ce5dbc2faf832ba0402f9</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *x_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_y_List_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>e131739bd82af6ae7c875a8f3cf05e0c</anchor>
      <arglist>(List&lt; ParticleInfo &gt; *y_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particlenumber_in_subtree</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>a787bc876ab4766ef0c860b1edd1f8c8</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Sm_center</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>df9fc7ca3271de1c45f2b99fe7559e34</anchor>
      <arglist>(complex&lt; double &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_contained_nodes</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>c752318e2f9bf940d4bf74a9d597cfd4</anchor>
      <arglist>(List&lt; node &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack_contained_nodes</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>05bf35e8ce003530ce24401752b2b8c5</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>pop_contained_nodes</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>e2f73f70bab218021fcec5aaabef173a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contained_nodes_empty</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>af91f8e48d461f3ac50f41b66970aac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_I</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>606c3c452af19c5dfb5d2178ae2e670e</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_D1</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>6f66d4708fd0cb9e207934350f73ce3c</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_D2</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>2b8c7129d3b7dd8d9fd26206f1b6beff</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_M</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>0258aca23aaf46d40e62ad8f04a34e65</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_locale_exp</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>bc70e283e3b793fa90550d54dd832faf</anchor>
      <arglist>(Array&lt; complex&lt; double &gt; &gt; &amp;local, int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_multipole_exp</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>ae98a712b10823b10d501a8cc8b94715</anchor>
      <arglist>(Array&lt; complex&lt; double &gt; &gt; &amp;multi, int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_multipole_exp</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>7b68cd2cebc5bd34fa6b42cbc99f49db</anchor>
      <arglist>(Array&lt; complex&lt; double &gt; &gt; &amp;multi, int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_father_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>9028a2292b6fc43aaf74100984d6ba36</anchor>
      <arglist>(QuadTreeNodeNM *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_child_lt_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>cd87d7647fe6a3aa7d3909c3beeaee82</anchor>
      <arglist>(QuadTreeNodeNM *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_child_rt_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>cf1a081f25a2317496a1604f219d78ed</anchor>
      <arglist>(QuadTreeNodeNM *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_child_lb_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>983b6aa6270b332be6e4114a3e5bd513</anchor>
      <arglist>(QuadTreeNodeNM *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_child_rb_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>f04323ec5bdaa8a6f88d35352ed86869</anchor>
      <arglist>(QuadTreeNodeNM *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_root</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>dd8865f3751f509882b18e880d109921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_leaf</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>584bffa3948917b15f5ea8aa6424cad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>child_lt_exists</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>c05fb91e55a11fc7c90fc3d3fbd8ed84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>child_rt_exists</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>5626b8f60fe2c2d6b2f593cdca489e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>child_lb_exists</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>76c7eacc1f4373b9099c5fdaf223fc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>child_rb_exists</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>b7612f04382100e43763950eceb5ba27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_Sm_level</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>978579b5480125db4b0893d36c529bce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DPoint</type>
      <name>get_Sm_downleftcorner</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>e1e1fd26e16d978c3499c89cc59520a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_Sm_boxlength</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>35c97db6b3adb8928aede5d732070831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; ParticleInfo &gt; *</type>
      <name>get_x_List_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>30ff72fc5652cc96d28dc5f51cb35065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>List&lt; ParticleInfo &gt; *</type>
      <name>get_y_List_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>e0226166f838e1338b3ed2c71e0b5410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_particlenumber_in_subtree</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>052fc98fb079eeca6d574838e6230056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>get_Sm_center</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>f3ccb992d4c65b9cc8a3c2201fea965d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt; *</type>
      <name>get_local_exp</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>9ffa1cbfc83c2f32627820e6645d7afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt; *</type>
      <name>get_multipole_exp</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>e5db973a116ad1580565fd79fb98a0b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_contained_nodes</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>6e9ef239ef5a77a6da458b689bae6af0</anchor>
      <arglist>(List&lt; node &gt; &amp;L) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_I</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>382c0768cd3d5047400a243a69a989b5</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_D1</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>4c5fd1564011c90c79a17305691837cc</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_D2</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>5aaba607413e2a0e1595bc3bae5b837b</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_M</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>9fe9673c6ab2c22ffe39100dd35904f0</anchor>
      <arglist>(List&lt; QuadTreeNodeNM * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>QuadTreeNodeNM *</type>
      <name>get_father_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>f8cdc2f88394770be3ef46ad72cd3ed2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QuadTreeNodeNM *</type>
      <name>get_child_lt_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>9a0a2d727a337e93df377100c350c186</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QuadTreeNodeNM *</type>
      <name>get_child_rt_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>95d50e21e26222e16ffc6e612c726865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QuadTreeNodeNM *</type>
      <name>get_child_lb_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>641625c88d0ea989dc15a71332d5f084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QuadTreeNodeNM *</type>
      <name>get_child_rb_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>b3308fb7155aeeca3c0d9477c346854e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Sm_level</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>69f1d1079b2530f4b3b3a84eca908a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DPoint</type>
      <name>Sm_downleftcorner</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>5a2d464309478865540f3f3976a9cf57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Sm_boxlength</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>b6d8e5c3ad8ebc5bbbee285302f04198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; ParticleInfo &gt; *</type>
      <name>L_x_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>d36a5e9100ff343821981d6a1fdcc45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; ParticleInfo &gt; *</type>
      <name>L_y_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>62e4b394408f41f3baf5a96f0107d57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>subtreeparticlenumber</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>23969c2b09efa8ca9ebe8c9684eab0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>complex&lt; double &gt;</type>
      <name>Sm_center</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>9f6510c33cc6fa13433ceae85ef68e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>complex&lt; double &gt; *</type>
      <name>ME</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>a79d26cbcccb10eb94109529e0e8a3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>complex&lt; double &gt; *</type>
      <name>LE</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>26b46804094982673221982ed9302b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>contained_nodes</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>a3d67c25bc0dc35eaa89de0f11dbd2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; QuadTreeNodeNM * &gt;</type>
      <name>I</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>1cf639a233a15b3f5efc24ab3092ea73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; QuadTreeNodeNM * &gt;</type>
      <name>D1</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>755355405aeffc9d2aaf36fe70da0178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; QuadTreeNodeNM * &gt;</type>
      <name>D2</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>a23d12025d6521d50a70e16b9d276992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; QuadTreeNodeNM * &gt;</type>
      <name>M</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>a0626802166d3cde0ebd708edd946605</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuadTreeNodeNM *</type>
      <name>father_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>d53fca07f11a0611f1b269ef71aa80cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuadTreeNodeNM *</type>
      <name>child_lt_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>c65282434322d8ce5ca17e13da5ea1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuadTreeNodeNM *</type>
      <name>child_rt_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>a05655bfb4146c01cdb49713e00f1817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuadTreeNodeNM *</type>
      <name>child_lb_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>7e87529ae1e60007485d3a6607502b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuadTreeNodeNM *</type>
      <name>child_rb_ptr</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>9ad89d1e46e776c2c8a17dfa60291784</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>926ce14aa53e162c28cedaa4eb3ae745</anchor>
      <arglist>(ostream &amp;, const QuadTreeNodeNM &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classogdf_1_1_quad_tree_node_n_m.html</anchorfile>
      <anchor>8740604b8331a5424ab4c09f10ac12da</anchor>
      <arglist>(istream &amp;, QuadTreeNodeNM &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Repulsion</name>
    <filename>classogdf_1_1_repulsion.html</filename>
    <base>ogdf::NodePairEnergy</base>
    <member kind="function">
      <type></type>
      <name>Repulsion</name>
      <anchorfile>classogdf_1_1_repulsion.html</anchorfile>
      <anchor>6d599897e43530a97084cdf335195150</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>computeCoordEnergy</name>
      <anchorfile>classogdf_1_1_repulsion.html</anchorfile>
      <anchor>d55cbbf1659ff0c7a03279d0fdb75379</anchor>
      <arglist>(node, node, const DPoint &amp;, const DPoint &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::UniformGrid</name>
    <filename>classogdf_1_1_uniform_grid.html</filename>
    <member kind="function">
      <type></type>
      <name>UniformGrid</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>bf53668320d2f6b7816f99c9030b1a84</anchor>
      <arglist>(const GraphAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformGrid</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>9b0e322a0274478aa55e59f9761bdd86</anchor>
      <arglist>(const GraphAttributes &amp;, const node, const DPoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformGrid</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>877624a1203886a20dfcafdfe10a7a2f</anchor>
      <arglist>(const UniformGrid &amp;, const node, const DPoint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCrossings</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>544825af9ba4f451c1d2f4e8d9d5a03e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newGridNecessary</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>d2e71226db46d7117468d454658e7b47</anchor>
      <arglist>(const node v, const DPoint &amp;p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ModifiedBresenham</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>a6fd0bd1f040a95ca43a0f15e6248c94</anchor>
      <arglist>(const IPoint &amp;, const IPoint &amp;, SList&lt; IPoint &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>DoubleModifiedBresenham</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>a1313985b774999a147f70a305da49be</anchor>
      <arglist>(const DPoint &amp;, const DPoint &amp;, SList&lt; IPoint &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>IPoint</type>
      <name>computeGridPoint</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>0b8028a587e666035cf796e513a502ea</anchor>
      <arglist>(const DPoint &amp;dp) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>DPoint</type>
      <name>computeRealPoint</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>3bb11bac3b0a948d6a67828dea88ee4f</anchor>
      <arglist>(const IPoint &amp;ip) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isInt</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>7074e18d50ca14fa16d95866b9c233ca</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeCrossings</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>a53ab5b59bc840f995bff1b384824c6b</anchor>
      <arglist>(const List&lt; edge &gt; &amp;, const node, const DPoint &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGridGeometry</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>306d5f13c61507b9364dee687e9cdae1</anchor>
      <arglist>(const node, const DPoint &amp;, IntersectionRectangle &amp;) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>crossingTest</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>63c998b6c8f0365b8dcff141785053bd</anchor>
      <arglist>(const edge, const edge, const node, const DPoint &amp;, const IPoint &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>UniformGrid &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>76c1db6131e076c03af7ff7f0fc07922</anchor>
      <arglist>(const UniformGrid &amp;ug)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GraphAttributes &amp;</type>
      <name>m_layout</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>05d98e17bfb4503fde955cf31387b0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph &amp;</type>
      <name>m_graph</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>0862cdee3c55d39058d388c5df9b55fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HashArray2D&lt; int, int, List&lt; edge &gt; &gt;</type>
      <name>m_grid</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>9bdda51bea9e42eb1dfd6e8582c12913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; edge &gt; &gt;</type>
      <name>m_crossings</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>ef10761355c8d627abab934d17d32065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; IPoint &gt; &gt;</type>
      <name>m_cells</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>87932b0420b75d8f417848bbdbafa2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_CellSize</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>6174c0570a0bc68b40fb058ecba6a064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_crossNum</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>17ce880e2c192b904b7e6d978b21bd4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>m_epsilon</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>77363d8965f21dd8df8a58df93f79b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>m_edgeMultiplier</name>
      <anchorfile>classogdf_1_1_uniform_grid.html</anchorfile>
      <anchor>6f6f031b2e5f95b5d94ede6b2fe39d33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LPSolver</name>
    <filename>classogdf_1_1_l_p_solver.html</filename>
    <member kind="enumeration">
      <name>OptimizationGoal</name>
      <anchor>4ad57e60e520120e1a300b0aceaae357</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lpMinimize</name>
      <anchor>4ad57e60e520120e1a300b0aceaae3574cb523fa913d4fd91743cb32071d7de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lpMaximize</name>
      <anchor>4ad57e60e520120e1a300b0aceaae3576f8131ddb814ab7c7c102b8eb2cbd607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Status</name>
      <anchor>b8cdd4c5fa2526257d633c77bba713ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lpOptimal</name>
      <anchor>b8cdd4c5fa2526257d633c77bba713ee22235b8df5ee88ef144a34962be9e186</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lpInfeasible</name>
      <anchor>b8cdd4c5fa2526257d633c77bba713ee3c36f7c945d50465b05c394668d47e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lpUnbounded</name>
      <anchor>b8cdd4c5fa2526257d633c77bba713eef1d79392773e2b9811c13933a9106460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LPSolver</name>
      <anchorfile>classogdf_1_1_l_p_solver.html</anchorfile>
      <anchor>96ea49829074db44124635c3954def9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>infinity</name>
      <anchorfile>classogdf_1_1_l_p_solver.html</anchorfile>
      <anchor>1e6f2923a9172a319eaca0af65b316c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>optimize</name>
      <anchorfile>classogdf_1_1_l_p_solver.html</anchorfile>
      <anchor>12ede90993b2743f4382c6dec3046211</anchor>
      <arglist>(OptimizationGoal goal, Array&lt; double &gt; &amp;obj, Array&lt; int &gt; &amp;matrixBegin, Array&lt; int &gt; &amp;matrixCount, Array&lt; int &gt; &amp;matrixIndex, Array&lt; double &gt; &amp;matrixValue, Array&lt; double &gt; &amp;rightHandSide, Array&lt; char &gt; &amp;equationSense, Array&lt; double &gt; &amp;lowerBound, Array&lt; double &gt; &amp;upperBound, double &amp;optimum, Array&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFeasibility</name>
      <anchorfile>classogdf_1_1_l_p_solver.html</anchorfile>
      <anchor>2abd93b518710d69b341876951766438</anchor>
      <arglist>(const Array&lt; int &gt; &amp;matrixBegin, const Array&lt; int &gt; &amp;matrixCount, const Array&lt; int &gt; &amp;matrixIndex, const Array&lt; double &gt; &amp;matrixValue, const Array&lt; double &gt; &amp;rightHandSide, const Array&lt; char &gt; &amp;equationSense, const Array&lt; double &gt; &amp;lowerBound, const Array&lt; double &gt; &amp;upperBound, const Array&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OsiSolverInterface *</type>
      <name>osi</name>
      <anchorfile>classogdf_1_1_l_p_solver.html</anchorfile>
      <anchor>660c167c25b99ec797e78ae907a21c89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NodeInfo</name>
    <filename>classogdf_1_1_node_info.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>065b0fd6dcd0376a89f62b9983a0388e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b416b3396258ecf301d7df7d6365a5a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeInfo</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>f47f340987ad4ce69314b9af27d6c818</anchor>
      <arglist>(PlanRep &amp;P, OrthoRep &amp;H, GridLayout &amp;L, node v, adjEntry adj, RoutingChannel&lt; int &gt; &amp;rc, NodeArray&lt; int &gt; &amp;nw, NodeArray&lt; int &gt; &amp;nh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeInfo</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>ffadf26d9d88deef0c343d822721c957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>cage_entry</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>3ab71b0b834bb827fe521c36d44a68ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>63765a405b4136678721f157c0788e60</anchor>
      <arglist>(OrthoDir bs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cage_coord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>38292458498360977f21b9425a70cf3c</anchor>
      <arglist>(OrthoDir bs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cageCoord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>6b232e2ed8b92e33240581122795f782</anchor>
      <arglist>(OrthoDir bs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coordDistance</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>81e2db78774a20445fe7ed37c2191978</anchor>
      <arglist>(OrthoDir bs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>free_coord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>19d9fb0ae1664fb400372c06dc7ed7d5</anchor>
      <arglist>(OrthoDir s_main, OrthoDir s_to)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_xsize</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>daa704697e364f56556b366e4890089b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_ysize</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>d1795a430ea91671e5acface298c0ee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeSize</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b98825df97455936d870e8d5dc1c7a0a</anchor>
      <arglist>(OrthoDir od) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cageSize</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>c0396377117a747864b142052c7a3abb</anchor>
      <arglist>(OrthoDir od) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rc</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>4d771e7d6e9e473ec7035107ecf2c722</anchor>
      <arglist>(OrthoDir od) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; edge &gt; &amp;</type>
      <name>inList</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>0bdc3f34d948c11fc0ea7ba7edadbadb</anchor>
      <arglist>(OrthoDir bs)</arglist>
    </member>
    <member kind="function">
      <type>List&lt; bool &gt; &amp;</type>
      <name>inPoint</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>1e38f30125c96af20da79a24d12d348c</anchor>
      <arglist>(OrthoDir bs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>l_upper_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>5685c1d8c6b81718998727f6b613cac1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>l_lower_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>676086d986c77cc641ce59b481c37f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>r_upper_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>ce5c00c7212553f5e4699136f10177c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>r_lower_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>ec0f0e6faac4fe8f584a1132beab752f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_left_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>a16ace09b66296e34dc0dd6c46543f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>t_right_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>28e1ed1affe6081929502365005e42dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>b_left_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b004787793b93dc2147bf4c65f5dc6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>b_right_unbend</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>5282b644d084a7c4fe1e626cda09b8f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>delta</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>5c61fc823ebac08f9f221d5d76a7b197</anchor>
      <arglist>(OrthoDir mainside, OrthoDir neighbour) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eps</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>d8d8810ade755e89ac5def7605648f07</anchor>
      <arglist>(OrthoDir mainside, OrthoDir neighbour) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_bend_edges</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>f005c8aec30a38b0815f1bf11af9d1f0</anchor>
      <arglist>(OrthoDir s1, OrthoDir sneighbour)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_E_hook</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>4fa907e76a10035b8d29346210f209bc</anchor>
      <arglist>(OrthoDir s1, OrthoDir sneighbour)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>flips</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>097d0667f32b59d2ec7e7e98b64a5868</anchor>
      <arglist>(OrthoDir s1, OrthoDir s2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_bend_free</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>9bb83f71669ca78257157c82f22daa02</anchor>
      <arglist>(OrthoDir s) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>nbf</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>d6f56ca1af907acdd2dc1a21e6b6f11f</anchor>
      <arglist>(OrthoDir s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_edges</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>a707331e914ddc6b72c63d9708c020c2</anchor>
      <arglist>(OrthoDir od) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gen_pos</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>32950b7a661444599909e6a7d1ac03af</anchor>
      <arglist>(OrthoDir od) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_gen</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b7d38d5fac150af9767919cf1c01e151</anchor>
      <arglist>(OrthoDir od)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_edge</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b8963f6f1fc7c79d7f62841854f7f28a</anchor>
      <arglist>(OrthoDir od, int pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reclassify</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>d19f62b22b4baef51b0786de35145d4b</anchor>
      <arglist>(OrthoDir s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>677a1aaa035f3da91d470ef8203aadde</anchor>
      <arglist>(OrthoDir bs, int co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cage_coord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>3fb326c20a375da01a0618337084bd4a</anchor>
      <arglist>(OrthoDir bs, int co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCageCoord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>028d7c4b392cd29e3c14c4bfeb40fe9c</anchor>
      <arglist>(OrthoDir bs, int co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_delta</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b42d50d1615991d2625f25799b767694</anchor>
      <arglist>(OrthoDir bside, OrthoDir bneighbour, int dval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_eps</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>02c48f525657e037fb2884c89bef3c89</anchor>
      <arglist>(OrthoDir mainside, OrthoDir neighbour, int dval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_gen_pos</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>3a4cc1154ebaa816511a909229977920</anchor>
      <arglist>(OrthoDir od, int pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_edges</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>3b90d7aebc87dc408e87c91eefd8a317</anchor>
      <arglist>(OrthoDir od, int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_cage_size</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>0c7ad5d0ecfadb27762e9498b989935c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_l_upper</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>898c8575f000273c01f29226b241b532</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_l_lower</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>e0692083cf3f0a76d806b835dc6dafc5</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_r_upper</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>c945bf9f41db4378f95368227af168fb</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_r_lower</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>cc5bb9d4d2fe3f04be86bc943b13936a</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_t_left</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>45aee47556bb95ad9749288d4bb6c0d8</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_t_right</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>26fba9cdb17a0cb2804300ee9f95a7b4</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_b_left</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>d458ea77ecd6745035481c37c4e25862</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_b_right</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>1b2613cf9dad466f168b91afa8f9edd0</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_E_hook</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>3d41f067418fd57c0424ac47c7b98cb2</anchor>
      <arglist>(OrthoDir s_from, OrthoDir s_to, int num=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_E</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>bfe6bfac7e0c194ee8b34fa5fcf7d1cb</anchor>
      <arglist>(OrthoDir s_from, OrthoDir s_to, int num=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_data</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>0f445276de3d13676e39eba3c55354be</anchor>
      <arglist>(PlanRep &amp;P, OrthoRep &amp;O, GridLayout &amp;L, node v, RoutingChannel&lt; int &gt; &amp;rc, NodeArray&lt; int &gt; &amp;nw, NodeArray&lt; int &gt; &amp;nh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_OR_data</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>255882163abeb70bdda9cacb950af5b2</anchor>
      <arglist>(node v, OrthoRep &amp;O)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_routable</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>501ab12a768591df974402b144e091d4</anchor>
      <arglist>(OrthoDir s_from, OrthoDir s_to) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>numr</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>53e4d12a22cae1f67545c77e54e7b3ed</anchor>
      <arglist>(OrthoDir s_from, OrthoDir s_to)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vDegree</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>acaa4f9d9873db8fa059af25a0116371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>adjEntry &amp;</type>
      <name>firstAdj</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>a27ab83885c678117cff0ec9fe2d053b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_rc</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>cab3b549a1609028a9a7051cf059f918</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_coord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>c4968264db08eb6b8ab430ed695191af</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_ccoord</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>34490188724c7b19d60865fb0a4aae1a</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cage_x_size</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>bbbf8c2339ffe972fe5c29027a54c073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cage_y_size</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>4b68dd500b8ed6537f26954a9480acec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>box_x_size</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>46407520144f779fff79dcb8cb1e6f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>box_y_size</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>12bebb97b90503d1a34d3d75e5ff6063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lu</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>a7172ed61677a100ffb3eb192dbf7440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ll</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>8a1f32ae9686c23d5e5f22b7feebee3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ru</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>2f78340179529314d45df1c3ec336182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rl</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>7ea85d10e13450ed2b838ba627e1e104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>tl</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>dcb829f70823e47e61b4632787095567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>tr</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>d4766ee6cad93bb72e26f2106acf08ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bl</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b10f37ee6c955bacd71c8eeecb2e722a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>br</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>f12233e3c0e80a8dc5b401b99763abc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_delta</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>89279b70eee42f48d48f9dceb208d144</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_eps</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>fea64d9ffde2591b04442a601dfbb800</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_gen_pos</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>740619da1014e78c5745bbcbbdaacb05</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>num_s_edges</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>b87dd55a1dc4ff166c4fd97aaefbcaf4</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_routable</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>110cefeceb602562a00e273ef21aae58</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_flips</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>7b58cb51bdc7063c5095239ea2e406ef</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nbe</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>437280d149aa7db027a4b89342926355</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nbf</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>c93679ae044aec1c33badc25d0511695</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_firstAdj</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>ffe297e329aaf64ae834a5dac0cfe273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; edge &gt;</type>
      <name>in_edges</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>2624b8fe6c14699d5478d8973fa9da1b</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; bool &gt;</type>
      <name>point_in</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>0ab37eda94b83836b456819d874e2445</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_adj</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>2a88aa95259d4d9fc152548b6347719b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_vdegree</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>8e505d55ed47ba83da7a856fedb2df19</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_node_info.html</anchorfile>
      <anchor>0d84a00d9e2492528640eedd493e9475</anchor>
      <arglist>(ostream &amp;O, const NodeInfo &amp;inf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::RoutingChannel</name>
    <filename>classogdf_1_1_routing_channel.html</filename>
    <templarg>ATYPE</templarg>
    <member kind="function">
      <type></type>
      <name>RoutingChannel</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>bcc84cf25fc1dc9ade502f3b64d643c9</anchor>
      <arglist>(const Graph &amp;G, ATYPE sep, double cOver)</arglist>
    </member>
    <member kind="function">
      <type>const ATYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>6bfb325940b797a101f7456e7ed2d7ab</anchor>
      <arglist>(node v, OrthoDir dir) const </arglist>
    </member>
    <member kind="function">
      <type>ATYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>cacdc2b98407c98e37ac4e992ae8e2a8</anchor>
      <arglist>(node v, OrthoDir dir)</arglist>
    </member>
    <member kind="function">
      <type>ATYPE</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>bf3cb916e4f943f895a5fab7c1ce3ecd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cOverhang</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>e248e5288e9ea67adf13711718aba16b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ATYPE</type>
      <name>overhang</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>91939efcdfadec44744413dc6ab80c4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRoutingChannels</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>e05df1b726de94864a1fb58f691b571a</anchor>
      <arglist>(const OrthoRep &amp;OR, bool align=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>computeRoutingChannel</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>14bded025043a03ecdb6d292d3ed3489</anchor>
      <arglist>(const OrthoRep::SideInfoUML &amp;si, const OrthoRep::SideInfoUML &amp;siOpp, bool align=false)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; vInfo &gt;</type>
      <name>m_channel</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>13257ac0a3166c2bf4eda71aa817f4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ATYPE</type>
      <name>m_separation</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>3b00cf4d13f7a3938a0e2270520cedaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_cOverhang</name>
      <anchorfile>classogdf_1_1_routing_channel.html</anchorfile>
      <anchor>b00f8a76dab545a5aa54fc87405c36e4</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::RoutingChannel::vInfo</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::RoutingChannel::vInfo</name>
    <filename>structogdf_1_1_routing_channel_1_1v_info.html</filename>
    <member kind="function">
      <type></type>
      <name>vInfo</name>
      <anchorfile>structogdf_1_1_routing_channel_1_1v_info.html</anchorfile>
      <anchor>7201d930e50879f9982f2d2da5cdc030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ATYPE</type>
      <name>rc</name>
      <anchorfile>structogdf_1_1_routing_channel_1_1v_info.html</anchorfile>
      <anchor>1f2be2cbfae7a33c9b537fdc44023f64</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BoyerMyrvoldInit</name>
    <filename>classogdf_1_1_boyer_myrvold_init.html</filename>
    <member kind="function">
      <type></type>
      <name>BoyerMyrvoldInit</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>9878a1356eba5a69a6975ae59dc57224</anchor>
      <arglist>(BoyerMyrvoldPlanar *pBM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoyerMyrvoldInit</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>41de93cf9a8db72f73f69475e151e6ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDFS</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>640e39f13ca80ccbe858ea091a1ec335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLowPoints</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>093d887064178f478f159629acfa1374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDFSChildLists</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>5a0126671ca4ffe8017fa8968b483afd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>N</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>3ed7b6d2ce8514477643e204bdf9f2bf</anchor>
      <arglist>(&amp;m_link)[2]</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createVirtualVertex</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>67dde5b4a5950706bc0ab9555bbcffa0</anchor>
      <arglist>(const adjEntry father)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph &amp;</type>
      <name>m_g</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>e434f4d4f408577689f1a1b0ad3eee1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int &amp;</type>
      <name>m_embeddingGrade</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>6a29968028f89752d593149baaa9bc10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool &amp;</type>
      <name>m_randomDFSTree</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>bf0b4370ce2509052f4d8a7f491106a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt; &amp;</type>
      <name>m_realVertex</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>8ca932cf73db2a8acea3ad5d6b24ce01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>m_dfi</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>b2188d936bc6aed39982a4be1eb1e001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; node &gt; &amp;</type>
      <name>m_nodeFromDFI</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>250d378486f6a8c0c13d69b69a6ce754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; adjEntry &gt; &amp;</type>
      <name>m_adjParent</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>b5aa4b9e689e16db5fea56c8eee45246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>m_leastAncestor</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>49304642bbe4cab75e4256e2b0a06b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt; &amp;</type>
      <name>m_edgeType</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>eae1bbbb50da8adf0f5c165ce5a5e920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>m_lowPoint</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>7c4cceccd465841b3560a1c3bda74d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>m_highestSubtreeDFI</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>581b0efb48311a29a59ce7342c5deef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListPure&lt; node &gt; &gt; &amp;</type>
      <name>m_separatedDFSChildList</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>1d3e03a70676d5df5233f98356254cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt; &amp;</type>
      <name>m_pNodeInParent</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_init.html</anchorfile>
      <anchor>991b1a14880d2565de05b5d3f4b99dd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BucketLowPoint</name>
    <filename>classogdf_1_1_bucket_low_point.html</filename>
    <base>ogdf::BucketFunc</base>
    <member kind="function">
      <type></type>
      <name>BucketLowPoint</name>
      <anchorfile>classogdf_1_1_bucket_low_point.html</anchorfile>
      <anchor>2514a7ed76c5c0053ffe3e3712f6de12</anchor>
      <arglist>(const NodeArray&lt; int &gt; &amp;lowPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBucket</name>
      <anchorfile>classogdf_1_1_bucket_low_point.html</anchorfile>
      <anchor>f86555bfb2cba7756cb632639d68de03</anchor>
      <arglist>(const node &amp;v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const NodeArray&lt; int &gt; *</type>
      <name>m_pLow</name>
      <anchorfile>classogdf_1_1_bucket_low_point.html</anchorfile>
      <anchor>c5059c88726599155da10ea0076ca336</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BoyerMyrvoldPlanar</name>
    <filename>classogdf_1_1_boyer_myrvold_planar.html</filename>
    <member kind="enumeration">
      <name>enumEmbeddingGrade</name>
      <anchor>77145257bc59175a8dfd65f425fa7557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>doNotEmbed</name>
      <anchor>77145257bc59175a8dfd65f425fa755716a04025f54e47088bf9d972ebf1324f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>doNotFind</name>
      <anchor>77145257bc59175a8dfd65f425fa7557530e1c6acd867e3bbca1fe6f9a2b8356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>doFindUnlimited</name>
      <anchor>77145257bc59175a8dfd65f425fa75579044165b10c97b694dd736de44e7390c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>doFindZero</name>
      <anchor>77145257bc59175a8dfd65f425fa7557e30a7f7bf8508182acf2e56360f890d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoyerMyrvoldPlanar</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>49b65b6075fa3ec97f02c9cddf304cf8</anchor>
      <arglist>(Graph &amp;g, bool bundles, int m_embeddingGrade, bool limitStructures, SListPure&lt; KuratowskiStructure &gt; &amp;output, bool randomDFSTree, bool avoidE2Minors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoyerMyrvoldPlanar</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>43b59274c5efc8e3edd2d207eb98c7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>77977e6ab430d3e25cc87f3dc83dd142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipBicomp</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>ecd4fa2e457e989a168bec704b2dd31c</anchor>
      <arglist>(int c, int marker, NodeArray&lt; int &gt; &amp;visited, bool wholeGraph, bool deleteFlipFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeWholeNonPlanarGraph</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>7779b169dc831059786203c62c987262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>pertinent</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>f5c1ca642ff594744da61c462b022962</anchor>
      <arglist>(const node &amp;w)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internallyActive</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>c6ef83ca5d81178b6c8f8864fce3a420</anchor>
      <arglist>(const node &amp;w, const int &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>externallyActive</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>b36aad3eac5d6283cd7704e039552de9</anchor>
      <arglist>(const node &amp;w, const int &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>inactive</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>dbe40d9501e3b9393521c945be893c09</anchor>
      <arglist>(const node &amp;w, const int &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>infoAboutNode</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>e329ac90a790f41b9df92aedbd2146c4</anchor>
      <arglist>(const node &amp;w, const int &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>successorOnExternalFace</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>de18f6a4dac0009a855c9360a1ad3755</anchor>
      <arglist>(const node &amp;w, int &amp;direction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>successorWithoutShortCircuit</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>b0b4df5441c68eb37e4930345feaa6ca</anchor>
      <arglist>(const node &amp;w, int &amp;direction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>constSuccessorOnExternalFace</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>44b87b492f39d9f47d2676b02eeb151a</anchor>
      <arglist>(const node &amp;v, const int &amp;direction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>constSuccessorWithoutShortCircuit</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>52d21ff3918dc2faeadd984576a1eefa</anchor>
      <arglist>(const node &amp;v, const int &amp;direction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>adjEntry</type>
      <name>beforeShortCircuitEdge</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>cb287b5b3db5c8306f0dcfbb208dc818</anchor>
      <arglist>(const node &amp;v, const int &amp;direction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>activeSuccessor</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>5a5723637d4591f31bfa9ab6c744d70e</anchor>
      <arglist>(node w, int &amp;direction, const int &amp;v, int &amp;info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>constActiveSuccessor</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>17025bfa2d2fa719e64d53f681dcba42</anchor>
      <arglist>(node w, int direction, const int &amp;v, int &amp;info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>wNodesExist</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>ead82d136b3fb6bd0fba9d1187d5a45b</anchor>
      <arglist>(node root, const node &amp;stopx, const node &amp;stopy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printNodeInfo</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>d7c49c522bd59f04435ce720576e9106</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mergeBiconnectedComponent</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>f057d4ddd708edcd9e430b944878d32d</anchor>
      <arglist>(StackPure&lt; int &gt; &amp;stack, const int j)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mergeBiconnectedComponentOnlyPlanar</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>5415f0cb1af4a78fd8371d367b19c8de</anchor>
      <arglist>(StackPure&lt; int &gt; &amp;stack, const int j)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>embedBackedges</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>128a59b7c767c6390848263d4dd0a38e</anchor>
      <arglist>(const node v, const int v_dir, const node w, const int w_dir, const int i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>embedBackedgesOnlyPlanar</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>4855cc5c781d6292ec96b02b6551fcf1</anchor>
      <arglist>(const node v, const int v_dir, const node w, const int w_dir, const int i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createShortCircuitEdge</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>a7c732a0a15f2f10103a1ae2dc1d73a7</anchor>
      <arglist>(const node v, const int v_dir, const node w, const int w_dir)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>walkup</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>e892f3bf93cb192053855627de344019</anchor>
      <arglist>(const node v, const node w, const int marker, const edge back)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>walkdown</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>c5ad40eacdd04de35f0e47265891f800</anchor>
      <arglist>(const int i, const node v, FindKuratowskis &amp;findKuratowskis)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>mergeUnprocessedNodes</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>b1e57e3b6492b3bdbc44cdffe772b540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postProcessEmbedding</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>d3b8c7ecda73bc04872992cd497c6113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>fd2ab07359395b51399523e05eb3d1e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph &amp;</type>
      <name>m_g</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>05df2421d0d951cf2c11e9c0e8b09745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_bundles</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>05a7f0bb8cc51d961d0f78c304f9d98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>m_embeddingGrade</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>d142d60ed28bd5ade318954e5e33afe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_limitStructures</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>5190d16a1b6573619c6c4f6b8404368d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_randomDFSTree</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>738a43b64df6ac4f6655a0cdfcb0b3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_avoidE2Minors</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>d59659e4482fba829033df9e5f99415b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_flippedNodes</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>be028bf1f96f9711f42d057c92da1960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_realVertex</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>78615986bfeca6b13224906dd6ed0147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_dfi</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>4b76d39b76c0abf85afddf8965ce8479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; node &gt;</type>
      <name>m_nodeFromDFI</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>3ba226b7ce329a800a0529852ca83be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; adjEntry &gt;</type>
      <name>m_link</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>762ce007fc9b7f120d91506d44d321f8</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; adjEntry &gt;</type>
      <name>m_beforeSCE</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>acc09d5dc0c8bcd771d614625973e0b6</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; adjEntry &gt;</type>
      <name>m_adjParent</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>817bb6030cda6c82cace13d46a85b9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_leastAncestor</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>4bfd423b3b766b034755fd74f6f93dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_edgeType</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>a164b988c97c5e7c2ff834e19a722a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_lowPoint</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>605284fd3f822d606f6e5978c6d691d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_highestSubtreeDFI</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>986498269f2f404af0320112f7fe2ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; ListPure&lt; node &gt; &gt;</type>
      <name>m_separatedDFSChildList</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>a16ef0a7a23c75404df426b78e726749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_pNodeInParent</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>11bcb73dbec60fb8dd102a9d16641161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_visited</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>6cddfe50bb573c2498b452bcfd5f3de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; node &gt;</type>
      <name>m_pointsToRoot</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>9229176d14eef87aa7bc95a5e7361950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_visitedWithBackedge</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>fe434f0c7fd44d2474b8bc3d296c8d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_flipped</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>68116b4c4a745789d7d013be2d4d7e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; SListPure&lt; adjEntry &gt; &gt;</type>
      <name>m_backedgeFlags</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>0c1f8edea15b86a1f6703e92fa52f957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; SListPure&lt; node &gt; &gt;</type>
      <name>m_pertinentRoots</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>02319b43402f7ca19a1c715c4006d29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; KuratowskiStructure &gt; &amp;</type>
      <name>m_output</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>70d2e340a73b38d1d54fefd637c546a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoyerMyrvold</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>25492986aca0219cb1ab035bd2f38467</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoyerMyrvoldInit</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>f2b6a312efa7ad2ce9e8ae4fb497feeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FindKuratowskis</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>b8d1009fb5b5852e38fd05047bcc2342</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ExtractKuratowskis</name>
      <anchorfile>classogdf_1_1_boyer_myrvold_planar.html</anchorfile>
      <anchor>506d25cc83c8165b24b70b529e886e23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ConnectedSubgraph</name>
    <filename>classogdf_1_1_connected_subgraph.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ConnectedSubgraph</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>beaf2c316a60b3e92f8953d8ca90fbe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>5d4b43c630e006f7b19ab6fc24823d04</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, node &amp;nSG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>83640244d67f7c4f321de9d33977d8b9</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG, NodeArray&lt; node &gt; &amp;nG_to_nSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>c9c63ade1130f5e2d4aba6b8846c3761</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, node &amp;nSG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG, const EdgeArray&lt; T &gt; &amp;edgeLengthG, EdgeArray&lt; T &gt; &amp;edgeLengthSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>7c2dd47c08090b0be8fa35754db80770</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>7b57c538d36ab6d9bfd3236770b4d769</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG, const EdgeArray&lt; T &gt; &amp;edgeLengthG, EdgeArray&lt; T &gt; &amp;edgeLengthSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>a27e07dfa7a6acda23a58eb8da69d8b3</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, node &amp;nSG, NodeArray&lt; node &gt; &amp;nSG_to_nG, EdgeArray&lt; edge &gt; &amp;eSG_to_eG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG, const EdgeArray&lt; T &gt; &amp;edgeLengthG, EdgeArray&lt; T &gt; &amp;edgeLengthSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>f16492cde1c38d4bb4cca8e523c431e1</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, node &amp;nSG, NodeArray&lt; node &gt; &amp;nSG_to_nG, EdgeArray&lt; edge &gt; &amp;eSG_to_eG, NodeArray&lt; node &gt; &amp;nG_to_nSG, EdgeArray&lt; edge &gt; &amp;eG_to_eSG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG, const EdgeArray&lt; T &gt; &amp;edgeLengthG, EdgeArray&lt; T &gt; &amp;edgeLengthSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>3b25ed1aa9b3c380708142c2827f7023</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, NodeArray&lt; node &gt; &amp;nSG_to_nG, EdgeArray&lt; edge &gt; &amp;eSG_to_eG, NodeArray&lt; node &gt; &amp;nG_to_nSG, EdgeArray&lt; edge &gt; &amp;eG_to_eSG)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>205e6a556de0a95a1d769a4a23b1764c</anchor>
      <arglist>(const Graph &amp;G, Graph &amp;SG, const node &amp;nG, NodeArray&lt; node &gt; &amp;nSG_to_nG)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>recursion</name>
      <anchorfile>classogdf_1_1_connected_subgraph.html</anchorfile>
      <anchor>47aac5aeae0093fb686269c3b5f17c7d</anchor>
      <arglist>(Graph &amp;SG, bool *nodeVisited, bool *edgeVisited, const node &amp;nG, const NodeArray&lt; T &gt; &amp;nodeLengthG, NodeArray&lt; T &gt; &amp;nodeLengthSG, const EdgeArray&lt; T &gt; &amp;edgeLengthG, EdgeArray&lt; T &gt; &amp;edgeLengthSG, NodeArray&lt; node &gt; &amp;nSG_to_nG, EdgeArray&lt; edge &gt; &amp;eSG_to_eG, NodeArray&lt; node &gt; &amp;nG_to_nSG, EdgeArray&lt; edge &gt; &amp;eG_to_eSG)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMaxFaceBiconnectedGraphs</name>
    <filename>classogdf_1_1_embedder_max_face_biconnected_graphs.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>EmbedderMaxFaceBiconnectedGraphs</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>bd9ed1c73ad5099ebee3f4e9251a0891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>755a8429c7a031ea1bc0b67dea6437a2</anchor>
      <arglist>(Graph &amp;G, adjEntry &amp;adjExternal, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, const node &amp;n=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>compute</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>a7ddf523f00855d75d29f1d52e242e8f</anchor>
      <arglist>(const Graph &amp;G, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLengthSkel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>958e2768f2bab89f66fa4c74cd621824</anchor>
      <arglist>(const Graph &amp;G, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>42dfa550dec45df58b3cbd3154c1641c</anchor>
      <arglist>(const Graph &amp;G, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>18280b1f66f7a927aea99a2d2729824d</anchor>
      <arglist>(const Graph &amp;G, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLengthSkel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>d38c104c255776b0be4ad63b66c1b0d5</anchor>
      <arglist>(const Graph &amp;G, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>ee04c18f174281c079ee665a6c2a86cd</anchor>
      <arglist>(const Graph &amp;G, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLengthSkel)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>bottomUpTraversal</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>8544e5ed97e2ba3b3db5fb6cdbad5b96</anchor>
      <arglist>(StaticSPQRTree &amp;spqrTree, const node &amp;mu, const NodeArray&lt; T &gt; &amp;nodeLength, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>topDownTraversal</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>763c4b53511971566e9f25331ea59934</anchor>
      <arglist>(StaticSPQRTree &amp;spqrTree, const node &amp;mu, const NodeArray&lt; T &gt; &amp;nodeLength, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static T</type>
      <name>largestFaceContainingNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>dc2df0a971dd8dc73f8c5ee64c860b4f</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, const node &amp;mu, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static T</type>
      <name>largestFaceInSkeleton</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>dbd558205fb21bcba7d19a92bd640e82</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, const node &amp;mu, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdge</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>527ec220a8e1d6e4e1d75406359071b9</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, adjEntry &amp;adjExternal, const node &amp;n=0)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdgeSNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>ebe5e70cf347fc692e136199a40fef78</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdgePNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>7a9163f8e78b0897e274a87fa625fa7b</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdgeRNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>57e8df2551ae0df41fa51668ec030a7a</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, adjEntry &amp;adjExternal, const node &amp;n)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>adjEntryForNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs.html</anchorfile>
      <anchor>f1012faf8a353c4b480bc444d1993243</anchor>
      <arglist>(adjEntry &amp;ae, ListIterator&lt; adjEntry &gt; &amp;before, const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, adjEntry &amp;adjExternal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMaxFaceBiconnectedGraphsLayers</name>
    <filename>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>EmbedderMaxFaceBiconnectedGraphsLayers</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>4327d5ba3c64be4a2b4b4c761ec29fd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>7b09feb2f3bac814aeb8688ab58fdfe6</anchor>
      <arglist>(Graph &amp;G, adjEntry &amp;adjExternal, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, const node &amp;n=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>compute</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>f98fa81d09d058e3176fe72eecd0a6fd</anchor>
      <arglist>(const Graph &amp;G, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLengthSkel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>c7df61cca48d462bd6ea0da65cb67602</anchor>
      <arglist>(const Graph &amp;G, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>adfd74e61dfb054cafc143b5c3f197a7</anchor>
      <arglist>(const Graph &amp;G, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>a19860d84b6e9025bba72e4ddb47f4df</anchor>
      <arglist>(const Graph &amp;G, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLengthSkel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>3d52acadad4944e08a2528991971a2c5</anchor>
      <arglist>(const Graph &amp;G, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>computeSize</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>b0a15d3ec011bf8fdaf4f996b0b49d66</anchor>
      <arglist>(const Graph &amp;G, const NodeArray&lt; T &gt; &amp;nodeLength, const EdgeArray&lt; T &gt; &amp;edgeLength, StaticSPQRTree &amp;spqrTree, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLengthSkel)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>bottomUpTraversal</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>76992290fd8c0c31f7039f0a28e59c04</anchor>
      <arglist>(StaticSPQRTree &amp;spqrTree, const node &amp;mu, const NodeArray&lt; T &gt; &amp;nodeLength, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>topDownTraversal</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>36aec338a8436d93a97a2bfd4218146a</anchor>
      <arglist>(StaticSPQRTree &amp;spqrTree, const node &amp;mu, const NodeArray&lt; T &gt; &amp;nodeLength, NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static T</type>
      <name>largestFaceContainingNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>08e602c033f3b267ac79f0603b4bf883</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, const node &amp;mu, const node &amp;n, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static T</type>
      <name>largestFaceInSkeleton</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>e3752c5586f4954a62dcaaa0106cc17f</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, const node &amp;mu, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>bottomUpThickness</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>a840a7f25529dd915baca556f1b6f7e6</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, const node &amp;mu, NodeArray&lt; T &gt; &amp;thickness, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdge</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>11ee506b0f7cecee3cbcc78a1ba1e364</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, const NodeArray&lt; T &gt; &amp;thickness, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, const T &amp;delta_u, const T &amp;delta_d, adjEntry &amp;adjExternal, const node &amp;n=0)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdgeSNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>a31cd07b5654c453e19449244d8cc6ec</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, const NodeArray&lt; T &gt; &amp;thickness, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, const T &amp;delta_u, const T &amp;delta_d, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdgePNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>5f0aa3c5b15d548be1c6b6ce27eb9017</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, const NodeArray&lt; T &gt; &amp;thickness, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, const T &amp;delta_u, const T &amp;delta_d, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>expandEdgeRNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>18b00b9b88d62c6f3625afaba29ab896</anchor>
      <arglist>(const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, const NodeArray&lt; T &gt; &amp;thickness, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, const T &amp;delta_u, const T &amp;delta_d, adjEntry &amp;adjExternal, const node &amp;n=0)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>adjEntryForNode</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>93a11cc8266b61a5d0766c3497557324</anchor>
      <arglist>(adjEntry &amp;ae, ListIterator&lt; adjEntry &gt; &amp;before, const StaticSPQRTree &amp;spqrTree, NodeArray&lt; bool &gt; &amp;treeNodeTreated, const node &amp;mu, const node &amp;leftNode, const NodeArray&lt; T &gt; &amp;nodeLength, const NodeArray&lt; EdgeArray&lt; T &gt; &gt; &amp;edgeLength, const NodeArray&lt; T &gt; &amp;thickness, NodeArray&lt; List&lt; adjEntry &gt; &gt; &amp;newOrder, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArraySource, NodeArray&lt; ListIterator&lt; adjEntry &gt; &gt; &amp;adjBeforeNodeArrayTarget, const T &amp;delta_u, const T &amp;delta_d, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>sssp</name>
      <anchorfile>classogdf_1_1_embedder_max_face_biconnected_graphs_layers.html</anchorfile>
      <anchor>876c38f74142b319898993a046162d1b</anchor>
      <arglist>(const Graph &amp;G, const node &amp;s, const EdgeArray&lt; T &gt; &amp;length, NodeArray&lt; T &gt; &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::mdmf_la</name>
    <filename>classogdf_1_1mdmf__la.html</filename>
    <member kind="function">
      <type></type>
      <name>mdmf_la</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>381a8d4bdfd1768e242736c08f02ed23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mdmf_la</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>98acf59e29c16288f3b0bf6021508335</anchor>
      <arglist>(const int &amp;d, const int &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mdmf_la</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>cd090282bb4863a70f0e72df531f8adc</anchor>
      <arglist>(const int &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mdmf_la</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>8b05606c9b519f1ceaf275e1f8ea49e3</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mdmf_la</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>27c024eabc4dc3808cadc292cbec0e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>4483da0f160f86d34f3b1195b713fb28</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>24a4766b77e3b437c64183fb2efd94d0</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>5706a5972c2c8befca9bf94d45029815</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>e2f5990860a5ef1f83b6561794d5bb2a</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>99ceabc92bcf76bc5ca455107e55d9dc</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>4792d1675239275cd94bcce06967ccc3</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>29fda4fa48c5b297e146ccefdc3168a8</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>1530b531d1594a3cb043d7051f3f0d45</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator+</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>c71f474bd802a7d603e57f8b174ba630</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator-</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>cb2766d6034df3823565a4e90d666f6e</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator+=</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>78ab1af167ee91264e358aca79397162</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mdmf_la</type>
      <name>operator-=</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>8f0256c30753d804925a79924b974f1e</anchor>
      <arglist>(const mdmf_la &amp;x)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>1af6a614832c4c27eff1769d2d973d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>l</name>
      <anchorfile>classogdf_1_1mdmf__la.html</anchorfile>
      <anchor>2c1427f5397d5125c91603833dfe1669</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedIndicator</name>
    <filename>classogdf_1_1_embed_indicator.html</filename>
    <base>ogdf::PQNode</base>
    <member kind="function">
      <type></type>
      <name>EmbedIndicator</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>4cf190ddf34bfef0262794c59c348757</anchor>
      <arglist>(int count, PQNodeKey&lt; edge, indInfo *, bool &gt; *infoPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EmbedIndicator</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>f77a35ad62a21ffde9bec17bc192ffda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>f11fd8b21863e123407498248039429c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>0f42cd060fcaad625f0c9e66c242e2c0</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>398a25348241627c8c59213e740c34e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>129c1229e9e12110e42821a192d3db62</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>f9fcfc8a18fd0620c9a3c46c75140f6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>730f081f26082a68fdefb172c0b02ba6</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>PQLeafKey&lt; edge, indInfo *, bool &gt; *</type>
      <name>getKey</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>bb4b6f08f489985a7b1e08274b8ff11c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setKey</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>667ec956a88413f4b5531c77273622fe</anchor>
      <arglist>(PQLeafKey&lt; edge, indInfo *, bool &gt; *pointerToKey)</arglist>
    </member>
    <member kind="function">
      <type>PQInternalKey&lt; edge, indInfo *, bool &gt; *</type>
      <name>getInternal</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>493ebb06448bc802cd6d6435f638fef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInternal</name>
      <anchorfile>classogdf_1_1_embed_indicator.html</anchorfile>
      <anchor>6e1983d3b32d75140abe5baabcb9d99c</anchor>
      <arglist>(PQInternalKey&lt; edge, indInfo *, bool &gt; *pointerToInternal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::indInfo</name>
    <filename>classogdf_1_1ind_info.html</filename>
    <member kind="function">
      <type></type>
      <name>indInfo</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>486ade8a9cae32a9ce18066bdb80628a</anchor>
      <arglist>(node w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~indInfo</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>c5666119fc70eda75e2f6c9e414842dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAssociatedNode</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>530681509e91d8cc82772ba16f04efc6</anchor>
      <arglist>(node w)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>getAssociatedNode</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>7992ea4884cf2659ceb1036d1d1e9b93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>6dfea8a170f9cfe89b73f7c314be57a1</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>47ff6a4338792b34efb15ab627f7caca</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>a550a786564e4f127624bfde0b47f1e0</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>v</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>6850edce7796dfb0f075605d744c6821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>changeDir</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>93654376a286669850adec33c2d9acf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>EmbedPQTree</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>acac4e69284588bc8c63acc1bf957e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>embedKey</name>
      <anchorfile>classogdf_1_1ind_info.html</anchorfile>
      <anchor>8e6208c700caac8e0d8897a97a78296c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::embedKey</name>
    <filename>classogdf_1_1embed_key.html</filename>
    <base>ogdf::PQNodeKey</base>
    <member kind="function">
      <type></type>
      <name>embedKey</name>
      <anchorfile>classogdf_1_1embed_key.html</anchorfile>
      <anchor>a86e7ac447f1375cc4b4bfd2dc71eb41</anchor>
      <arglist>(indInfo *i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~embedKey</name>
      <anchorfile>classogdf_1_1embed_key.html</anchorfile>
      <anchor>b191b375406c67edb7eab4fcb0459916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>print</name>
      <anchorfile>classogdf_1_1embed_key.html</anchorfile>
      <anchor>be92b2b2ef8702d0180cd8b0d6634073</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedPQTree</name>
    <filename>classogdf_1_1_embed_p_q_tree.html</filename>
    <base>ogdf::PQTree</base>
    <member kind="function">
      <type></type>
      <name>EmbedPQTree</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>1c662bea790137f6ada5deb9c0c5a89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EmbedPQTree</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>b7571770141588adf0429b99c1ccbfb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emptyAllPertinentNodes</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>bb7c296335ec639e3cb515f119f8cddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clientDefinedEmptyNode</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>acd56d04350d8116dcbb69b6c701630a</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>2d28620a433b4040744e0da2e3c3c2c5</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReplaceRoot</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>dc16a33460434e0294e294d4f45abe8b</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys, SListPure&lt; edge &gt; &amp;frontier, SListPure&lt; node &gt; &amp;opposed, SListPure&lt; node &gt; &amp;nonOpposed, node v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Reduction</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>3e7494cb0dc3ace1377c76296ec2e464</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys, int redNumber=0)</arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>scanSibLeft</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>c1c58b42e6d8b6c22b952b8bee119581</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>scanSibRight</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>9a63994e557bab51fbc6dc23eab02053</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>scanLeftEndmost</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>00b5216f8d764262a81eeeb4f22b986c</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>scanRightEndmost</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>551fc645970b83b272e129b8e6077c0b</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>scanNextSib</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>3752aade4be4ffcb8c3e160a4c0e9fbe</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr, PQNode&lt; edge, indInfo *, bool &gt; *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFront</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>7e7167c297154dc8437d8198da566c1d</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr, SListPure&lt; PQBasicKey&lt; edge, indInfo *, bool &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>clientSibLeft</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>1837756668f4a700fc717a5286fd0c15</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>clientSibRight</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>13562d00575457aee910a7faac0828d9</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>clientLeftEndmost</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>237775bf45f8ca2f0add3795e5efdff8</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>clientRightEndmost</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>5888091900bbcb3fa742de70c32ea774</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; edge, indInfo *, bool &gt; *</type>
      <name>clientNextSib</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>9f76b92e6215e518d7e999f5734064cc</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr, PQNode&lt; edge, indInfo *, bool &gt; *other) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>clientPrintStatus</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>804b2e7ee00a9587b5eaeec4d18cac89</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>276512387073c5204596667be8a9e0b9</anchor>
      <arglist>(PQNode&lt; edge, indInfo *, bool &gt; *nodePtr, SListPure&lt; PQBasicKey&lt; edge, indInfo *, bool &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReplaceFullRoot</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>e5287da961a030de44a5ec1141ad5351</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys, SListPure&lt; PQBasicKey&lt; edge, indInfo *, bool &gt; * &gt; &amp;frontier, node v, bool addIndicator=false, PQNode&lt; edge, indInfo *, bool &gt; *opposite=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReplacePartialRoot</name>
      <anchorfile>classogdf_1_1_embed_p_q_tree.html</anchorfile>
      <anchor>9bc553f530be9e99ed884713f0fd4e70</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys, SListPure&lt; PQBasicKey&lt; edge, indInfo *, bool &gt; * &gt; &amp;frontier, node v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::ExternE</name>
    <filename>structogdf_1_1_extern_e.html</filename>
    <member kind="variable">
      <type>node</type>
      <name>theNode</name>
      <anchorfile>structogdf_1_1_extern_e.html</anchorfile>
      <anchor>94752082ebfb936fe0eaea0af418f114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; int &gt;</type>
      <name>startnodes</name>
      <anchorfile>structogdf_1_1_extern_e.html</anchorfile>
      <anchor>ea26e192cef47eac73390ba6135e6ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; node &gt;</type>
      <name>endnodes</name>
      <anchorfile>structogdf_1_1_extern_e.html</anchorfile>
      <anchor>8a78e6b26edb085f43dddf2f46f739fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; SListPure&lt; edge &gt; &gt;</type>
      <name>externalPaths</name>
      <anchorfile>structogdf_1_1_extern_e.html</anchorfile>
      <anchor>9f6d0a45e164738648f3912db46df5ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::WInfo</name>
    <filename>structogdf_1_1_w_info.html</filename>
    <member kind="enumeration">
      <name>enumMinorType</name>
      <anchor>6617391c0a3e92884e8ee465463c239d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A</name>
      <anchor>6617391c0a3e92884e8ee465463c239d8362f9ffcbca2c463818d838c814915a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>B</name>
      <anchor>6617391c0a3e92884e8ee465463c239d11296d97c74d7314ad1370ff40aaada3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C</name>
      <anchor>6617391c0a3e92884e8ee465463c239d9af41de4ba79a988c82da08148372650</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D</name>
      <anchor>6617391c0a3e92884e8ee465463c239d4e408c105f0292089e3afa34f8f7a598</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>E</name>
      <anchor>6617391c0a3e92884e8ee465463c239de0ad12d8aa3a3a8f6bb9ac3f209533b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>w</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>bcff4310adc26e960d555a61a0e7b756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minorType</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>84d9a60bee20f9858be41ea29dccd039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; adjEntry &gt; *</type>
      <name>highestXYPath</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>520171540627f42b42f9c87ba46aac99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; adjEntry &gt; *</type>
      <name>zPath</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>d20df05a4d6757d43d69ba4912952de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>pxAboveStopX</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>d5c9f9db21fc76e22dac3cfba9d40b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>pyAboveStopY</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>8ffde3575e875f408a4e709e2a090723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; SListPure&lt; edge &gt; &gt;</type>
      <name>pertinentPaths</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>51b1e211eb55a943f33da69a8b65818f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListIterator&lt; ExternE &gt;</type>
      <name>externEStart</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>75d4423e5908354c201e832c712515a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListIterator&lt; ExternE &gt;</type>
      <name>externEEnd</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>4fb55ded5b8d426c0dc91d71b40c2800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>firstExternEAfterW</name>
      <anchorfile>structogdf_1_1_w_info.html</anchorfile>
      <anchor>49de079753cb9ab056a272e11d032340</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::KuratowskiStructure</name>
    <filename>classogdf_1_1_kuratowski_structure.html</filename>
    <member kind="function">
      <type></type>
      <name>KuratowskiStructure</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>ba97304938f7cfb553b547c2c67ee910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KuratowskiStructure</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>c3210f124f1d9a519364980ee45f069a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KuratowskiStructure</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>56f668ee2e52589a681e8f7028a01fee</anchor>
      <arglist>(const KuratowskiStructure &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>KuratowskiStructure &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>bd169b32830eb78d85248f90821fb039</anchor>
      <arglist>(const KuratowskiStructure &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>0ad596b3b430b4fd0cb465886cb5943a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>V</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>f7497f51b097f471449edfc5049d3d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>V_DFI</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>5809bb7bc07e1ccc1be261fd0940f100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>R</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>940da4ae3b96d164a8bf3aee855fe3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>RReal</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>b1ef35ea41aeb624c3a24822e6a2f24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>stopX</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>19cc954b612037dcb222f1d05a262196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>stopY</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>5781cf586a1c5c3fa3f542173178ec11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>dd06c680de9220e2603e182a3e33e7bb</anchor>
      <arglist>(const KuratowskiStructure &amp;orig)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyPointer</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>03e7b375a4f1f81a0b7af5b0e4d16b75</anchor>
      <arglist>(const KuratowskiStructure &amp;orig, SListPure&lt; WInfo &gt; &amp;list)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; WInfo &gt;</type>
      <name>wNodes</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>c2151c517ddad68327a20a74c77f5b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListPure&lt; adjEntry &gt;</type>
      <name>highestFacePath</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>859ded38b34b3ee3686703b56dfec52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; SListPure&lt; adjEntry &gt; &gt;</type>
      <name>highestXYPaths</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>eefe0fe3f82f7776c0a9d8aed23da3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; adjEntry &gt;</type>
      <name>externalFacePath</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>55b89473ac6a20e8792dfee9c7b04901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; edge &gt;</type>
      <name>externalSubgraph</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>5609c84c6a57acf8cf9c8c94e968abd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; edge &gt;</type>
      <name>pertinentSubgraph</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>3c8a1b6c1a664aff96d278d47fbd5562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; SListPure&lt; adjEntry &gt; &gt;</type>
      <name>zPaths</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>2df7a56c74715fd1acfb3ee0f3d822c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; ExternE &gt;</type>
      <name>externE</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>9891ffb35083f74c12156cd2e548406d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; int &gt;</type>
      <name>stopXStartnodes</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>404a855f977001b195d47e2342e6cc2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; int &gt;</type>
      <name>stopYStartnodes</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>f1281c227aade8ceae706ea975090024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; node &gt;</type>
      <name>stopXEndnodes</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>676a3d8e5cb7f2b8dfd6cc5e475fe0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; node &gt;</type>
      <name>stopYEndnodes</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>60689f5414676cee6fabd6754c096366</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FindKuratowskis</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>b8d1009fb5b5852e38fd05047bcc2342</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ExtractKuratowskis</name>
      <anchorfile>classogdf_1_1_kuratowski_structure.html</anchorfile>
      <anchor>506d25cc83c8165b24b70b529e886e23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FindKuratowskis</name>
    <filename>classogdf_1_1_find_kuratowskis.html</filename>
    <member kind="function">
      <type></type>
      <name>FindKuratowskis</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>0fc08d6a27b556e32c2cd9d7c275f395</anchor>
      <arglist>(BoyerMyrvoldPlanar *bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FindKuratowskis</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>3fa7337a30d0e8a5e074b3733bf03e82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKuratowskiStructure</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>4423b9744e6d5aec96bcf48499dfdf34</anchor>
      <arglist>(const node currentNode, const node root, const node stopx, const node stopy)</arglist>
    </member>
    <member kind="function">
      <type>SListPure&lt; KuratowskiStructure &gt; &amp;</type>
      <name>getAllKuratowskis</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>b9cc30fd78330bba2d2f88ef7c886885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; KuratowskiStructure &gt; &amp;</type>
      <name>getAllKuratowskis</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>73093c17a4fbd83d545f79c29f177ce7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const</type>
      <name>N</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>a8c5f90f3eacf2b1f9e917af3c6e2687</anchor>
      <arglist>(&amp;m_link)[2]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>findRoot</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>197dacf357db56fcb8071793e4270d48</anchor>
      <arglist>(node stopX)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractHighestFacePath</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>43c58ad17c17a23bb08324a111a03d6a</anchor>
      <arglist>(ListPure&lt; adjEntry &gt; &amp;highestFacePath, int marker)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractExternalFacePath</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>4a4bfdac82e2be9c8923161afdf862c3</anchor>
      <arglist>(SListPure&lt; adjEntry &gt; &amp;externalFacePath, const ListPure&lt; adjEntry &gt; &amp;highestFacePath, int marker, int highMarker)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>splitInMinorTypes</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>d3a0d584eb1f1b5b1e6f3071a99a7e8c</anchor>
      <arglist>(const SListPure&lt; adjEntry &gt; &amp;externalFacePath, int marker)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractExternalSubgraph</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>10c6bbf9962fb38faf294d9efb4c1228</anchor>
      <arglist>(const node stop, int root, SListPure&lt; int &gt; &amp;externalStartnodes, SListPure&lt; node &gt; &amp;externalEndnodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractExternalSubgraphBundles</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>28950872f7f5f658a4018b35fbb33e41</anchor>
      <arglist>(const node stop, int root, SListPure&lt; edge &gt; &amp;externalSubgraph, int nodeMarker)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractPertinentSubgraph</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>778ce578d3a107359cdbbe2e52cea0b1</anchor>
      <arglist>(SListPure&lt; WInfo &gt; &amp;W_All, const node V)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractPertinentSubgraphBundles</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>90bf7fa678ca82a09f5ab2bc6228c43b</anchor>
      <arglist>(const SListPure&lt; WInfo &gt; &amp;W_All, const node V, SListPure&lt; edge &gt; &amp;pertinentSubgraph, int nodeMarker)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoyerMyrvoldPlanar *</type>
      <name>pBM</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>9167beef487c1ed7d2cc5c0f5d8230c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph &amp;</type>
      <name>m_g</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>d3026a675c92f0293364711efb19cc27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>m_embeddingGrade</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>d38f06d688887fee7343a79680ea9edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_bundles</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>b3d04dff0c88042891094c08f4367b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; WInfo * &gt;</type>
      <name>m_getWInfo</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>42b0d234334c0012f605f8504a806bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; KuratowskiStructure &gt;</type>
      <name>allKuratowskis</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>e4b76f5b474f86ff02d60f6e7f5cce63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KuratowskiStructure</type>
      <name>k</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>9b7e8f2b964f82e5ee1f937bd938bf29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nodeMarker</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>6751c16ba84b01e82e967228eb0c31fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_wasHere</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>d25b3618762bce3f236599b95a5db964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; node &gt; &amp;</type>
      <name>m_realVertex</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>c006a65f540bcc7df67ce19609e5e466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>m_dfi</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>bb74548fcad8aa77e1ad3ca6e740319d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Array&lt; node &gt; &amp;</type>
      <name>m_nodeFromDFI</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>515a409e0ae3ed1ac568f8d60f055e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; adjEntry &gt; &amp;</type>
      <name>m_adjParent</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>61eb208a0d0b61ae84c592558553b77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>m_leastAncestor</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>77aa94a572a513eac68421a4a6742561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; int &gt; &amp;</type>
      <name>m_edgeType</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>d9c73c7476c6d4e85a5a5f378cc6eb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>m_lowPoint</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>9a1ed1355c7ecf9d7a0e8415f8f978d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>m_highestSubtreeDFI</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>d997826669bc903233c7a7029fb6de43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; ListPure&lt; node &gt; &gt; &amp;</type>
      <name>m_separatedDFSChildList</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>bf8cee1f116c5a1a8fe5c06575b39a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const EdgeArray&lt; node &gt; &amp;</type>
      <name>m_pointsToRoot</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>96db76e262ae233e73ac33d18dfb6c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt; &amp;</type>
      <name>m_visitedWithBackedge</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>68e6c9e47b7b119c296c44f954c13ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;</type>
      <name>m_backedgeFlags</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>5f841a555d625b44863d7b821ea4f9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; SListPure&lt; node &gt; &gt; &amp;</type>
      <name>m_pertinentRoots</name>
      <anchorfile>classogdf_1_1_find_kuratowskis.html</anchorfile>
      <anchor>52bd235256e17e55acbe589c80c43d6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MaxSequencePQTree</name>
    <filename>classogdf_1_1_max_sequence_p_q_tree.html</filename>
    <templarg>T</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQTree</base>
    <member kind="function">
      <type></type>
      <name>MaxSequencePQTree</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>f06bc6ee4335bd67539a1dd669f2f925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaxSequencePQTree</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>cf3b925bcb19d378b4a5f6a49a2f6bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CleanNode</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>8c1cf0cb9bf8641f599532a19d0c2ff8</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clientDefinedEmptyNode</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>fa2cb6e74dff6059954f6c6ed30b432b</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emptyAllPertinentNodes</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>b53f5e88734def785e5473ff14b0e493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>determineMinRemoveSequence</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>06881ba687734c8f477aee06b87ddaf1</anchor>
      <arglist>(SListPure&lt; PQLeafKey&lt; T, whaInfo *, Y &gt; * &gt; &amp;leafKeys, SList&lt; PQLeafKey&lt; T, whaInfo *, Y &gt; * &gt; &amp;eliminatedKeys)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bubble</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>ad758ad3c2a5160aee30f8c53c31b78c</anchor>
      <arglist>(SListPure&lt; PQLeafKey&lt; T, whaInfo *, Y &gt; * &gt; &amp;leafKeys, int redNumber=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PQNode&lt; T, whaInfo *, Y &gt; *</type>
      <name>GetParent</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>3833d5517f5f796da145b18d9b28c5cb</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; PQNode&lt; T, whaInfo *, Y &gt; * &gt;</type>
      <name>cleanUp</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>7b703f2d5f773f3a066bfff9b3d0658d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SListPure&lt; PQNode&lt; edge, whaInfo *, bool &gt; * &gt;</type>
      <name>eliminatedNodes</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>207c1c52020c3a0734184df791ce7342</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findMinWHASequence</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>885e82672a27640026a7375875b03c1e</anchor>
      <arglist>(StackPure&lt; PQNode&lt; T, whaInfo *, Y &gt; * &gt; &amp;archiv, SList&lt; PQLeafKey&lt; T, whaInfo *, Y &gt; * &gt; &amp;eliminatedKeys)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setHchild</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>860d8167d54ee26efe398cff3df9feba</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *h_child1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setAchildren</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>a7f1444ccb2d20d73ce65aa59f34ef42</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *hChild2, PQNode&lt; T, whaInfo *, Y &gt; *hChild2Sib)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>markPertinentChildren</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>dab22b96171e64ba8fc28e1e95d03ba6</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr, int label, int del_typ)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>haNumPnode</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>c90986b7c1e092f0b95729a4f1c669b6</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>haNumQnode</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>9a54f52bf461a39f2eef98e359f52b30</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>aNumQnode</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>59ec431590969b759ea3567a24f5f0e1</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr, int sumAllW)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>hNumQnode</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>b9600a8356cc4ab43ae460acbade426b</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr, int sumAllW)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>alpha1beta1Number</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>88ad80c6515aad3cbb57ece9cb79c879</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr, PQNode&lt; T, whaInfo *, Y &gt; **aChild)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumPertChild</name>
      <anchorfile>classogdf_1_1_max_sequence_p_q_tree.html</anchorfile>
      <anchor>8db71efae9ad634d46bd54de3dde5b26</anchor>
      <arglist>(PQNode&lt; T, whaInfo *, Y &gt; *nodePtr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarLeafKey</name>
    <filename>classogdf_1_1_planar_leaf_key.html</filename>
    <templarg>X</templarg>
    <base>ogdf::PQLeafKey</base>
    <member kind="function">
      <type></type>
      <name>PlanarLeafKey</name>
      <anchorfile>classogdf_1_1_planar_leaf_key.html</anchorfile>
      <anchor>53b260eb11edc77c6800aa2c37852c35</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanarLeafKey</name>
      <anchorfile>classogdf_1_1_planar_leaf_key.html</anchorfile>
      <anchor>fe660d59acc0e815489747a9953f12b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>print</name>
      <anchorfile>classogdf_1_1_planar_leaf_key.html</anchorfile>
      <anchor>76228feceecf8a6d49f4bebae29139c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarPQTree</name>
    <filename>classogdf_1_1_planar_p_q_tree.html</filename>
    <base>ogdf::PQTree</base>
    <member kind="function">
      <type></type>
      <name>PlanarPQTree</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>e6c2857e54a2ab6f76db77eb1dce66fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanarPQTree</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>9e4f9c0fba2ce0f16c14c3845f3f8e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emptyAllPertinentNodes</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>a53c267ca58e5c2a91576f44bafd3637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>1b24feb05acf4131f87ce7e0296be42a</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReplaceRoot</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>cfe9610ed2463c8d6682bddfb43c1b47</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Reduction</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>105547800e02d9959a046a4c00a7d925</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys, int redNumber=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReplaceFullRoot</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>77d546a8e2827bfb1e098fa21d368798</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReplacePartialRoot</name>
      <anchorfile>classogdf_1_1_planar_p_q_tree.html</anchorfile>
      <anchor>d7e42937fd7082c78c1016ca75a6dc83</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; indInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarSubgraphPQTree</name>
    <filename>classogdf_1_1_planar_subgraph_p_q_tree.html</filename>
    <base>ogdf::MaxSequencePQTree</base>
    <member kind="function">
      <type></type>
      <name>PlanarSubgraphPQTree</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>a1fca35b5b36787f63a6359e810c0c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanarSubgraphPQTree</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>560400d518f1aead70aa0fde14cdf950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>2f7d086b79ec5a94f597bbf0f41509dc</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; whaInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReplaceRoot</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>8dec184c7e5702510fdb4f2aba6c0112</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; whaInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Reduction</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>a1f9371a352e1fed0c0b4707bae544e3</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; whaInfo * &gt; * &gt; &amp;leafKeys, SList&lt; PQLeafKey&lt; edge, whaInfo *, bool &gt; * &gt; &amp;eliminatedKeys, int redNumber=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReplaceFullRoot</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>1394ab705739cfa56cd575a56b81f399</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; whaInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReplacePartialRoot</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>9d4d2929ea4b7fbba0e61a5aff7642dd</anchor>
      <arglist>(SListPure&lt; PlanarLeafKey&lt; whaInfo * &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeEliminatedLeaves</name>
      <anchorfile>classogdf_1_1_planar_subgraph_p_q_tree.html</anchorfile>
      <anchor>dcd7e22f74a8f8f1622c0c9151d5b4a6</anchor>
      <arglist>(SList&lt; PQLeafKey&lt; edge, whaInfo *, bool &gt; * &gt; &amp;eliminatedKeys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQBasicKey</name>
    <filename>classogdf_1_1_p_q_basic_key.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQBasicKeyRoot</base>
    <member kind="function">
      <type></type>
      <name>PQBasicKey</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>45acd14aceb48505a60057afe5baa40b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQBasicKey</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>5d200ce31e1cef77f3907ffc87c4dc7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>nodePointer</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>1b29da017f01f67ae2ab33d700823ad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>print</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>d2bcf5831549bfa5495b82c07cec06df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodePointer</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>fb2ca0322e553ad3ad72739bf3e2d1e8</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *node)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>userStructKey</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>618416e989dcf7e43363639e8c625653</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual X</type>
      <name>userStructInfo</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>451e5dc5a6df24148b4d9f3fa8536bbd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Y</type>
      <name>userStructInternal</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>52881970a865a022a5a993016990e740</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>m_printString</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>5f2a8a48d2bc831efff53fdd98fe1300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_nodePointer</name>
      <anchorfile>classogdf_1_1_p_q_basic_key.html</anchorfile>
      <anchor>db2c771be83a6f414356df62bdb60911</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQBasicKeyRoot</name>
    <filename>classogdf_1_1_p_q_basic_key_root.html</filename>
    <member kind="function">
      <type></type>
      <name>PQBasicKeyRoot</name>
      <anchorfile>classogdf_1_1_p_q_basic_key_root.html</anchorfile>
      <anchor>7ad43c518a64399f685e5840e5886c7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PQBasicKeyRoot</name>
      <anchorfile>classogdf_1_1_p_q_basic_key_root.html</anchorfile>
      <anchor>c407f6756850625c496c06a84a32d0f9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQInternalKey</name>
    <filename>classogdf_1_1_p_q_internal_key.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQBasicKey</base>
    <member kind="function">
      <type></type>
      <name>PQInternalKey</name>
      <anchorfile>classogdf_1_1_p_q_internal_key.html</anchorfile>
      <anchor>badfa6de33b57175ae1c724ac8c25de5</anchor>
      <arglist>(Y element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQInternalKey</name>
      <anchorfile>classogdf_1_1_p_q_internal_key.html</anchorfile>
      <anchor>500a4595264db70550e6a07467525f04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>userStructKey</name>
      <anchorfile>classogdf_1_1_p_q_internal_key.html</anchorfile>
      <anchor>ca70b22a604142bc11e9feb24fc461f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual X</type>
      <name>userStructInfo</name>
      <anchorfile>classogdf_1_1_p_q_internal_key.html</anchorfile>
      <anchor>e12a7b0f9dcd5f5496f86a672eeff337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Y</type>
      <name>userStructInternal</name>
      <anchorfile>classogdf_1_1_p_q_internal_key.html</anchorfile>
      <anchor>733d12a9c64137924dbe210fb9a30570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Y</type>
      <name>m_userStructInternal</name>
      <anchorfile>classogdf_1_1_p_q_internal_key.html</anchorfile>
      <anchor>4cdf8d01dc37203e1da7c3d0e2ec8d01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQInternalNode</name>
    <filename>classogdf_1_1_p_q_internal_node.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQNode</base>
    <member kind="function">
      <type></type>
      <name>PQInternalNode</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>a1ca26ea6e881daf266e01eab3dd60b4</anchor>
      <arglist>(int count, int typ, int stat, PQInternalKey&lt; T, X, Y &gt; *internalPtr, PQNodeKey&lt; T, X, Y &gt; *infoPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQInternalNode</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>61e735e4029e20c4a08891f988a0c8be</anchor>
      <arglist>(int count, int typ, int stat, PQInternalKey&lt; T, X, Y &gt; *internalPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQInternalNode</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>61ee777788e2189a1745fa0df396f97e</anchor>
      <arglist>(int count, int typ, int stat, PQNodeKey&lt; T, X, Y &gt; *infoPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQInternalNode</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>2f30ce4d0fe5c500a6e3f64a87f6ebfc</anchor>
      <arglist>(int count, int typ, int stat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PQInternalNode</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>c0c67ba330a5dfe6067dd9555c89b9bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PQLeafKey&lt; T, X, Y &gt; *</type>
      <name>getKey</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>4f31935f00bca16837f3dc8d97a5ae39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setKey</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>6c130b79f5f051230fa7c36a33aa3187</anchor>
      <arglist>(PQLeafKey&lt; T, X, Y &gt; *pointerToKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PQInternalKey&lt; T, X, Y &gt; *</type>
      <name>getInternal</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>f5f04c42a8ba3ef6ef91581901a44ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInternal</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>e4be9435c38247cc56c4e7166c308cfb</anchor>
      <arglist>(PQInternalKey&lt; T, X, Y &gt; *pointerToInternal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>a3cd218c6cbf37c5a45cd1a8b66ad165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>d66f5af696e9cdbdf91edaf9cf0caf56</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>a027821a0a15c86a1f03778b8959fcb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>e36add72126c85a270fb1f2a5741a08e</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>cd7c8367c380e62535ad7850ca4fa7a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>cb32735d782c5b605dadf5d37a53aee4</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_mark</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>6ba2445ed5df064b865c2a8df0c66e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PQInternalKey&lt; T, X, Y &gt; *</type>
      <name>m_pointerToInternal</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>f3fb0fbc597297552f6562eb172fa617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_status</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>609096ffc24d67ab9be715531951d9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_type</name>
      <anchorfile>classogdf_1_1_p_q_internal_node.html</anchorfile>
      <anchor>062a35294d2f7dc6d314c868c2d39cf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQLeaf</name>
    <filename>classogdf_1_1_p_q_leaf.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQNode</base>
    <member kind="function">
      <type></type>
      <name>PQLeaf</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>68d9071597b1ed2d774a51d547814c0f</anchor>
      <arglist>(int count, int stat, PQLeafKey&lt; T, X, Y &gt; *keyPtr, PQNodeKey&lt; T, X, Y &gt; *infoPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQLeaf</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>fd285b0b830c2ea16aacbfd779699bd8</anchor>
      <arglist>(int count, int stat, PQLeafKey&lt; T, X, Y &gt; *keyPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQLeaf</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>9a599fcab5d42799f3da780b4f13dd63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PQLeafKey&lt; T, X, Y &gt; *</type>
      <name>getKey</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>1aba1c02098ba25998428cbc1543b1ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setKey</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>8ca3fb461bf7a583b7c9d2a367ee993c</anchor>
      <arglist>(PQLeafKey&lt; T, X, Y &gt; *pointerToKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PQInternalKey&lt; T, X, Y &gt; *</type>
      <name>getInternal</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>be87a841c5778ffd9d0cef84992e5027</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setInternal</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>80dbde79ad342a10f9899b15c99bb5b7</anchor>
      <arglist>(PQInternalKey&lt; T, X, Y &gt; *pointerToInternal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>d9c82cd5d836b87fc49efe8f6fd6be42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>60879f8b78f0e887868ee91c337db582</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>a88d6b8232a0890fd296c286550f10f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>378d62dadb1f6bf122500dcecb47e735</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>0e83cdd8da8cdd348f85f1e8d6ac9163</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>2f4e893781b7d27e490aace55b6ef68c</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_mark</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>eaff20868b4ae28830e6f3a4f7ca256e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PQLeafKey&lt; T, X, Y &gt; *</type>
      <name>m_pointerToKey</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>bd754e079d7d4066ce473e2b2c51ed6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_status</name>
      <anchorfile>classogdf_1_1_p_q_leaf.html</anchorfile>
      <anchor>bee80ce555829ce2ad74834fc3529445</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQLeafKey</name>
    <filename>classogdf_1_1_p_q_leaf_key.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQBasicKey</base>
    <member kind="function">
      <type></type>
      <name>PQLeafKey</name>
      <anchorfile>classogdf_1_1_p_q_leaf_key.html</anchorfile>
      <anchor>3ee6a1663b36f8119c30a9bd6b62d5fd</anchor>
      <arglist>(T element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQLeafKey</name>
      <anchorfile>classogdf_1_1_p_q_leaf_key.html</anchorfile>
      <anchor>33f7159597c3cb42869078d6dd39d748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual X</type>
      <name>userStructInfo</name>
      <anchorfile>classogdf_1_1_p_q_leaf_key.html</anchorfile>
      <anchor>7442af21e5dbd84d24955dd173c3b0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Y</type>
      <name>userStructInternal</name>
      <anchorfile>classogdf_1_1_p_q_leaf_key.html</anchorfile>
      <anchor>77037cd45cd10142861e09ae1ca175aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>userStructKey</name>
      <anchorfile>classogdf_1_1_p_q_leaf_key.html</anchorfile>
      <anchor>6dcdfbf6dd3c1aa0c243aa4e26ffd895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_userStructKey</name>
      <anchorfile>classogdf_1_1_p_q_leaf_key.html</anchorfile>
      <anchor>3807b698a151844be64198f68c54bcc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQNode</name>
    <filename>classogdf_1_1_p_q_node.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQNodeRoot</base>
    <member kind="function">
      <type></type>
      <name>PQNode</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>39cbddba87ff42153e84d9a5d4a9d980</anchor>
      <arglist>(int count, PQNodeKey&lt; T, X, Y &gt; *infoPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQNode</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>29fa986b046f7b21d9c41021f0975505</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQNode</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>72c18693d22239feefa072dfcba5282f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeEndmost</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>76d9009ddaf0cb5c2b871a5d6a012b17</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *oldEnd, PQNode&lt; T, X, Y &gt; *newEnd)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeSiblings</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>22f5498d3d3d785afb03c08f2f560763</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *oldSib, PQNode&lt; T, X, Y &gt; *newSib)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endmostChild</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>b4f45a5c3c9a70e40d69907db86b78a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>getEndmost</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>082fa57227262a19def5c168c635d4ff</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *other) const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>getEndmost</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>f35c01c1db19e9a6e343d74e2ccb7356</anchor>
      <arglist>(int side) const </arglist>
    </member>
    <member kind="function">
      <type>PQNodeKey&lt; T, X, Y &gt; *</type>
      <name>getNodeInfo</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>794ef6275b37c8b88fdf01ef3778470e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>getSib</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>3b2a9527b22a830ce9b88511b9bdce64</anchor>
      <arglist>(int side) const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>getNextSib</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>1a025082491020f7981dffacf7625f76</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>identificationNumber</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>dd781ad1bd3a5e189cca1fe6884579a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>childCount</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>bfef654bfd836ad089ec5d80156b4b4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>childCount</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>13301092e0a8874f022d284383afe469</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>2800c9520f3c3cc6e4b49135018fbdb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>19f130805d04651906535716125ac02a</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *newParent)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parentType</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>c0c8befea6fe6d1346ea4ffb8cc53211</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parentType</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>db62927192b2024e4ae9ec284680a195</anchor>
      <arglist>(int newParentType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pertChildCount</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>835691e99b5279765eb75a4a3ce4dd6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pertChildCount</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>a75dd74ca79fd3229c60be19e6e2515c</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function">
      <type>SibDirection</type>
      <name>putSibling</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>47fa00837a810be41f4df3e8497c60f4</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *newSib)</arglist>
    </member>
    <member kind="function">
      <type>SibDirection</type>
      <name>putSibling</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>e44cc9afe7ecd1ed6fbcb9013db44d15</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *newSib, int preference)</arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>referenceChild</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>0339d246868d4256f229eb7e548a306b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>referenceParent</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>fae614a448d15b9db23b2c6cc994624d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setNodeInfo</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>0d4b0aebe0be47ad0e6cfa799813b907</anchor>
      <arglist>(PQNodeKey&lt; T, X, Y &gt; *pointerToInfo)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PQLeafKey&lt; T, X, Y &gt; *</type>
      <name>getKey</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>cdc12c8f7a8f0f6946d8b76e283cadb7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setKey</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>5497f243a46c2f9614cb857c7db1c721</anchor>
      <arglist>(PQLeafKey&lt; T, X, Y &gt; *pointerToKey)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PQInternalKey&lt; T, X, Y &gt; *</type>
      <name>getInternal</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>e4f3b3ec9e44ae199f92731e1a2e974f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setInternal</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>7a1260e5695ab1d215f2a4728357c306</anchor>
      <arglist>(PQInternalKey&lt; T, X, Y &gt; *pointerToInternal)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>4d3f096082b754c40a23dc7737c894ff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>66e3c1e9669112f5c3c1e65ab6a79c37</anchor>
      <arglist>(int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>07e8de7385aec7a647c9528e2d6d9b52</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>cecd12f2069ea74efa81fef8c1478858</anchor>
      <arglist>(int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>8766b3427af326cb985668be973945f0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>16acda56b496d94e4279ffb0fa4848e2</anchor>
      <arglist>(int)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_childCount</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>e0e1bcbb0204589af448f527717c48bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_debugTreeNumber</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>df45e0f730d58607ee852398fd7f72cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_identificationNumber</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>56c296ee3ca6e82dea4830074d3f75f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_parentType</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>7a3cabd03f116b2c69494ec5cbd43823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_pertChildCount</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>dc0670ff54dcd643dc826952472424d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_pertLeafCount</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>974523bca1e8be35e1e8888605f3d414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_firstFull</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>f017da96d4c263c58def1edd8c93525c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_leftEndmost</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>3c3ff35b814d92631b7b1a5daa8bced2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>cb7e212917f68c4cf3eef1a527ba3a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_referenceChild</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>b247e890ed429c16f89d2c77dea562ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_referenceParent</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>10e90eb25ef0429cbc6ea6329da24f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_rightEndmost</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>848ce9c9f081b9d176d9236c95655eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_sibLeft</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>13313d82be207c516c7c785271cf20a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_sibRight</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>315449d038a4d9560a8c7431b87237e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNodeKey&lt; T, X, Y &gt; *</type>
      <name>m_pointerToInfo</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>d4de340841f0ecf711c2426d5368b5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; PQNode&lt; T, X, Y &gt; * &gt; *</type>
      <name>fullChildren</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>4a0687a8595f0b2448fb67280a5a42ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; PQNode&lt; T, X, Y &gt; * &gt; *</type>
      <name>partialChildren</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>596ba8dfb7d7f070518b3daaaa1202d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PQTree&lt; T, X, Y &gt;</name>
      <anchorfile>classogdf_1_1_p_q_node.html</anchorfile>
      <anchor>c28a1590a36def6225276a4ead9f31ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQNodeKey</name>
    <filename>classogdf_1_1_p_q_node_key.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQBasicKey</base>
    <member kind="function">
      <type></type>
      <name>PQNodeKey</name>
      <anchorfile>classogdf_1_1_p_q_node_key.html</anchorfile>
      <anchor>9fd1af5a63d1e06bd8cb0a9ee8e35ff7</anchor>
      <arglist>(X info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQNodeKey</name>
      <anchorfile>classogdf_1_1_p_q_node_key.html</anchorfile>
      <anchor>9b63806ccb91ccda3250140fb5c8e7c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>userStructKey</name>
      <anchorfile>classogdf_1_1_p_q_node_key.html</anchorfile>
      <anchor>9025e8beca466e00c93c1b61db4a321f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual X</type>
      <name>userStructInfo</name>
      <anchorfile>classogdf_1_1_p_q_node_key.html</anchorfile>
      <anchor>ee5925218dca2ec2d89d957f768247b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Y</type>
      <name>userStructInternal</name>
      <anchorfile>classogdf_1_1_p_q_node_key.html</anchorfile>
      <anchor>6c863e5cbb5ee4b15508f3dc70063b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>X</type>
      <name>m_userStructInfo</name>
      <anchorfile>classogdf_1_1_p_q_node_key.html</anchorfile>
      <anchor>cb12d36db772893113b5c04dff7cdfd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQNodeRoot</name>
    <filename>classogdf_1_1_p_q_node_root.html</filename>
    <member kind="function">
      <type></type>
      <name>PQNodeRoot</name>
      <anchorfile>classogdf_1_1_p_q_node_root.html</anchorfile>
      <anchor>7a129893b75f4efffefb20dbbb2cfd35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQNodeRoot</name>
      <anchorfile>classogdf_1_1_p_q_node_root.html</anchorfile>
      <anchor>6270aaf7aa82d553e15b31d7c56c155a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQTree</name>
    <filename>classogdf_1_1_p_q_tree.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>ogdf::PQTreeRoot</base>
    <member kind="function">
      <type></type>
      <name>PQTree</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>06a066a75771df90f15ce2e0158bc031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PQTree</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>9457427f98087d0e88b17e510f14b031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNewLeavesToTree</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>de6ceec35587bfc0b421a9984538b373</anchor>
      <arglist>(PQInternalNode&lt; T, X, Y &gt; *father, SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNewLeavesToTree</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>b07f18b3465022822bf2c8f19e4f9da7</anchor>
      <arglist>(PQInternalNode&lt; T, X, Y &gt; *father, SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys, PQNode&lt; T, X, Y &gt; *leftSibling, PQNode&lt; T, X, Y &gt; *rightSibling)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emptyNode</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>76af348fc7bc262e6f229f06d936cfaf</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>front</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>ce84522b54600068c37a1df5d542f34a</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printOutCurrentTree</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>6c89445c9c4a007034754b509eb207f5</anchor>
      <arglist>(const char *filename, const char *ending)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CleanNode</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>c38b6a2807089b6ec35af05bda8fb9ef</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Cleanup</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>4f30510581fac9c24be3fce6b0b4b82d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clientDefinedEmptyNode</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>66c8813b2993f187bb78b87f19e8ff05</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emptyAllPertinentNodes</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>88cca4fcb55736c826a9ddd5802302c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>cb0962923f0af759f5c4552a67b2927b</anchor>
      <arglist>(SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Reduction</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>b8c206b032e743b2f3ab37defc8f0b9b</anchor>
      <arglist>(SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys, int redNumber=0)</arglist>
    </member>
    <member kind="function">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>root</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>dcaf7cac13044698b4ca771e925d3fe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>5b7764739dfcfc6d7c956870ccdf0230</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>37530cf5088cc5f7edb8063a45495756</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Bubble</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>ebe0fa141e29868c08b60250ad53788e</anchor>
      <arglist>(SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Reduce</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>6cd7cfa51a55e7b949fc4819ea56025b</anchor>
      <arglist>(SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys, int printYes=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateL1</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>230967681d50f958a8f1318f15e70638</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, bool isRoot)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateP1</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>2a1d21d208da1a620292ff92a101dcf8</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, bool isRoot)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateP2</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>c4660c9511e753585cc5f77106de61e7</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; **nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateP3</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>9b9b472f8e7c6bd35d2741850c7bcaac</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateP4</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>08ac709fa37043f44cbd15386d85b520</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; **nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateP5</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>59dc0201fbefa391f83c3d7d28414530</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateP6</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>21c29c90e12637a2c1a91a59f67c9c74</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; **nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateQ1</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>206e9453307cee62d87b915b3f33c036</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, bool isRoot)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateQ2</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>6839d25d0a5e27cd24f2f3da604b7169</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, bool isRoot)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>templateQ3</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>efd5607fec9aaf74d58fb53ddb9883a7</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>addNodeToNewParent</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>78fa49ce4ad7cb1f0d5d31919d34a4bc</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *parent, PQNode&lt; T, X, Y &gt; *child)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>addNodeToNewParent</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>46bf5f7e4ecfd0d7a1a28557c0b5d328</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *parent, PQNode&lt; T, X, Y &gt; *child, PQNode&lt; T, X, Y &gt; *leftBrother, PQNode&lt; T, X, Y &gt; *rightBrother)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkIfOnlyChild</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>70a0040240c4da107e76844e86fe5954</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *child, PQNode&lt; T, X, Y &gt; *parent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyNode</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>70f416c8d2606db754a32e6f34e25c4f</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>exchangeNodes</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>59cce16d012eb159eb8dc191d17e9aa6</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *oldNode, PQNode&lt; T, X, Y &gt; *newNode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>linkChildrenOfQnode</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>f746642d3e338f1fa13198dd58c68158</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *installed, PQNode&lt; T, X, Y &gt; *newChild)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeChildFromSiblings</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>b9eb0c1fe76d998f4b2906b4af3a1c9f</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>removeNodeFromTree</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>9e55e4addaa7de1ffb6e6332fd087892</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *parent, PQNode&lt; T, X, Y &gt; *child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>List&lt; PQNode&lt; T, X, Y &gt; * &gt; *</type>
      <name>fullChildren</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>1920edd68529b710da2775359803d54a</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>List&lt; PQNode&lt; T, X, Y &gt; * &gt; *</type>
      <name>partialChildren</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>111287c97892d05b1a31f9fa4b5e2ec4</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; T, X, Y &gt; *</type>
      <name>clientLeftEndmost</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>bb03d703655d23aed425d3653e14cc24</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; T, X, Y &gt; *</type>
      <name>clientRightEndmost</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>6e21427fb29f9d6386a63ef34fa1ac45</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; T, X, Y &gt; *</type>
      <name>clientNextSib</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>9cf79f9a44e30e176decb4c969aed340</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, PQNode&lt; T, X, Y &gt; *other) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; T, X, Y &gt; *</type>
      <name>clientSibLeft</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>e555711a4a3fde828a71adce07e34fdf</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PQNode&lt; T, X, Y &gt; *</type>
      <name>clientSibRight</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>8860c45b81af2ec94fcc1416a239e314</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>clientPrintNodeCategorie</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>9ab9b850b03485163d66e9ead0b8e70a</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>clientPrintStatus</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>110ddd73ab4993d6fb59404126a93711</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>clientPrintType</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>0e8083c97003857dabab2acd6b5fbab8</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_root</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>02e0236df8adf9458353c304405a62a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_pertinentRoot</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>52f7382c2c6fcd97da74fa246206375b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>m_pseudoRoot</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>faf037b32f2e61ee0056fb25fd91e536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_identificationNumber</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>75ed08b07f23d14328a91a7ba8bacc7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_numberOfLeaves</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>a1f6f339ca2536e8dd9ebc15a5af8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; PQNode&lt; T, X, Y &gt; * &gt; *</type>
      <name>m_pertinentNodes</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>0a1a39850b4f51707c6b4609dd45f106</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addLeavesRunThrough</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>a07b9d76e79a4ade40adcd23305030c4</anchor>
      <arglist>(PQInternalNode&lt; T, X, Y &gt; *parent, SListPure&lt; PQLeafKey&lt; T, X, Y &gt; * &gt; &amp;leafKeys, PQLeaf&lt; T, X, Y &gt; *actualSon)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkChain</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>058fd295de75a48d2c0f948f6495cd55</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, PQNode&lt; T, X, Y &gt; *firstFull, PQNode&lt; T, X, Y &gt; **seqStart, PQNode&lt; T, X, Y &gt; **seqEnd)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copyFullChildrenToPartial</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>f75513a32b835a71780a48b3c09f90ec</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, PQNode&lt; T, X, Y &gt; *partialChild)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>PQNode&lt; T, X, Y &gt; *</type>
      <name>createNodeAndCopyFullChildren</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>002a875a65df565df7e74d4e3df9aa3f</anchor>
      <arglist>(List&lt; PQNode&lt; T, X, Y &gt; * &gt; *fullNodes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printNode</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>2675188e830c2fb3ed3bf4a26c5223a0</anchor>
      <arglist>(char *filename, int number, PQNode&lt; T, X, Y &gt; *father, PQNode&lt; T, X, Y &gt; *son)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeBlock</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>34044dcf871fafe0f85241d0398a9dcb</anchor>
      <arglist>(PQNode&lt; T, X, Y &gt; *nodePtr, bool isRoot)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sortExceptions</name>
      <anchorfile>classogdf_1_1_p_q_tree.html</anchorfile>
      <anchor>0185a60cfe33d6be6e59316695d39f8a</anchor>
      <arglist>(int Exceptions[], int arraySize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PQTreeRoot</name>
    <filename>classogdf_1_1_p_q_tree_root.html</filename>
    <member kind="function">
      <type></type>
      <name>PQTreeRoot</name>
      <anchorfile>classogdf_1_1_p_q_tree_root.html</anchorfile>
      <anchor>80bfaf16a9b7593b75ec1da3868481b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PQTreeRoot</name>
      <anchorfile>classogdf_1_1_p_q_tree_root.html</anchorfile>
      <anchor>4e1d04735c3fc2d0264402543af43df0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::whaInfo</name>
    <filename>classogdf_1_1wha_info.html</filename>
    <member kind="function">
      <type></type>
      <name>whaInfo</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>384f986a27fb0220e87974e639ec1b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~whaInfo</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>54387177e725bfcddd4cbd705017e680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defaultValues</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>d278de03e8aa0868f2ed96c55a78037c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_h</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>6f5b6f13f697f13adf0be06708ac8217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_w</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>05f201c459d6f9e2e0d0a883659bc9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_a</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>2ea3c7f1591b09c66266a1e1781bac38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_deleteTyp</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>f60edb67046663a6e175221e3f6bf88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_pertLeafCount</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>9714d869169152d7d915f17b3e24bc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_notVisitedCount</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>9f248a2deed3af3153e612bf6f26bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PQNodeRoot *</type>
      <name>m_aChild</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>fb3f25d8e190c05eb4cd7dfb75d3e416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PQNodeRoot *</type>
      <name>m_hChild1</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>1ca65f6c0ca896e408573d8c05b42992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PQNodeRoot *</type>
      <name>m_hChild2</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>938f0edb7349dfc7b3fbe3bcc8028df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PQNodeRoot *</type>
      <name>m_hChild2Sib</name>
      <anchorfile>classogdf_1_1wha_info.html</anchorfile>
      <anchor>3ad07dc889e25b340590b53388088951</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::whaKey</name>
    <filename>classogdf_1_1wha_key.html</filename>
    <base>ogdf::PQNodeKey</base>
    <member kind="function">
      <type></type>
      <name>whaKey</name>
      <anchorfile>classogdf_1_1wha_key.html</anchorfile>
      <anchor>f2cbd3f92c7ba5109788aa02adcf7a41</anchor>
      <arglist>(whaInfo *i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~whaKey</name>
      <anchorfile>classogdf_1_1wha_key.html</anchorfile>
      <anchor>dbeb8bf2fa095f1701b413213043fd17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>print</name>
      <anchorfile>classogdf_1_1wha_key.html</anchorfile>
      <anchor>5a1bed361edfbef23c31b2ed7f0dbfec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ELabelPos</name>
    <filename>classogdf_1_1_e_label_pos.html</filename>
    <templarg>coordType</templarg>
    <member kind="function">
      <type></type>
      <name>ELabelPos</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>134791ac959d88db387df2e59bd81856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ELabelPos</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>321b71dccd89b42e735ecb180fa30921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>938b5352bb8962860c780b98cb8f1157</anchor>
      <arglist>(PlanRepUML &amp;pru, GridLayoutMapped &amp;L, ELabelInterface&lt; coordType &gt; &amp;eli)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>b513d4cd1b5f1a4bdbe23e83478dbffd</anchor>
      <arglist>(GraphAttributes &amp;ug, ELabelInterface&lt; coordType &gt; &amp;eli)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDistance</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>a6eb9f75e6928dd5aac1b098c507709e</anchor>
      <arglist>(coordType dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistance</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>8e1d1ed429dbe896409b3f1296308a28</anchor>
      <arglist>(edge e, eLabelTyp elt, coordType dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndLabelPlacement</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>a571078123860334864df508b1c206bb</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>e284e92454b04a2fa8845e883f5fe927</anchor>
      <arglist>(const char *filename=&quot;labelgraph.gml&quot;, OutputParameter sectOmit=opStandard)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUMLGML</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>36a24b44ba2b9069a25abd3d4a308215</anchor>
      <arglist>(const char *filename=&quot;labelgraphUML.gml&quot;, OutputParameter sectOmit=opStandard)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>costFI</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>7ada05ea08a448e2fc35a82bacccd756</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>costLI</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>167337cb09aaf8d002f9ebb1581722de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>costEI</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>8ab0f74edab87c7148f2a10105adb5cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>costPos</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>950ec8300bda740b214f3b53397984b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>costSym</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>8f78ec414a30a1d3f630de6df716d08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>coordType</type>
      <name>segmentMargin</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>de6b2096d1bc9d8d23728120a6536df2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>usePosCost</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>5e21f5b3e01f7b9c02f4cfc0156a58ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>useSymCost</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>f7528d33268e61c59af4291bd63bf949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initSegments</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>4372d6d5fcd2138c9de37a2a1c0ed5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initUMLSegments</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>60f945818784750dd2432ba10f2710f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initFeatureRectangles</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>9054604149793c3714a54e1b47c634ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initUMLFeatureRectangles</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>0f19c8c1556ce663bb98a2bb9f9c5f88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeCandidates</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>3a7d05616a1ba5575fc4fe22a9a7c48f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeUMLCandidates</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>7b4a2e754025fea83f4197ff8bceb3dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initStructure</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>5df3f292875e353cd3c1c7d732681681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testFeatureIntersect</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>3da7df1827136f625dfa659788af1324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testUMLFeatureIntersect</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>49fc70b402553a69fdb0ad68f0e478ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveRecovery</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>9f38ad1fe81a7c0285298dc3e3982b65</anchor>
      <arglist>(EdgeArray&lt; GenericPoint&lt; coordType &gt; &gt;(&amp;saveCandidate)[labelNum])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveUMLRecovery</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>64abda13e7e8050ca222f60f5c071ac2</anchor>
      <arglist>(EdgeArray&lt; GenericPoint&lt; coordType &gt; &gt;(&amp;saveCandidate)[labelNum])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testAllIntersect</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>13927d4c29fa09ea8c9a7550531ad9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testUMLAllIntersect</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>748f56ac4abe4413171de69705d5c4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>List&lt; GenericPoint&lt; coordType &gt; &gt; &amp;</type>
      <name>posList</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>672fef7764daa31d457ec6d76d583c8f</anchor>
      <arglist>(edge e, int lnum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>List&lt; PosInfo &gt; &amp;</type>
      <name>candList</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>a8a605bf24e24ef3dd87d2559eaca00a</anchor>
      <arglist>(edge e, int lnum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>segNumber</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>a7514908ae96d2fa15ff7d28bd7761d4</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OrthoDir</type>
      <name>segDir</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>a6fbdcb889fd2c5d7fda56d5e62717d1</anchor>
      <arglist>(edge e, int segNum)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>13192a5f8270b55fb832005b785f21d0</anchor>
      <arglist>(PlanRepUML &amp;pru, GridLayoutMapped &amp;L, ELabelInterface&lt; coordType &gt; &amp;eli)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initUML</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>2c57f245b0ab81bda05dcf0b6e55b193</anchor>
      <arglist>(GraphAttributes &amp;ug, ELabelInterface&lt; coordType &gt; &amp;eli)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numAssignment</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>7cffde995ded1d5f26140e2f055ef355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_candStyle</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>5da74ff0cfe2ef2277965a2aba82e3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_placeHeuristic</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>f976e804d897643b84afcd93677c3450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_endInsertion</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>18fa2967283a1b17da0a2e162fccce5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_endLabelPlacement</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>b81d09b048a56177bee61373f42cd31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_posCost</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>3b41046d422c5b06484503206212109f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_symCost</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>b79c84ed70113c23d388a568de644875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_posNum</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>6fd57836534c2c3025ec5ad260ba95ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_countFeatureIntersect</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>7b3c4ca0edadde9965a4dddfcec74401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_segMargin</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>1ccc7fc7c34e085bb9681f55559244ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlanRepUML *</type>
      <name>m_prup</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>f10be6fb64d10ae3cb85748adf03725f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridLayoutMapped *</type>
      <name>m_gl</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>2b864d8b2b813aa8bffadcd6cecb0f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphAttributes *</type>
      <name>m_ug</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>3ef5682b89c1834395d8a0328c056134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ELabelInterface&lt; coordType &gt; *</type>
      <name>m_eli</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>0bb45054c94bfad4f23dd46f8d3013d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; GenericPoint&lt; coordType &gt; &gt; &gt;</type>
      <name>m_candPosList</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>e90caf54ca652fc01b6a3ae1cf56c550</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; PosInfo &gt; &gt;</type>
      <name>m_candList</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>a9e6ffadcb3ce46c49af8fb0112ffa9d</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; PosInfo * &gt;</type>
      <name>m_freeLabels</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>e2f9281dbd6c50c1fc4cb1d8bafb5264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; PosInfo * &gt;</type>
      <name>m_sectLabels</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>6900db8c56aea1667ff82c89b3c85ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BinaryHeap&lt; double, PosInfo * &gt;</type>
      <name>m_candidateHeap</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>a7723786fd5826b8f15013429e8adc6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; GenericPoint&lt; coordType &gt; &gt; &gt;</type>
      <name>m_poly</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>17a1d921e58eff7671b8d5b325812c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; SegmentInfo &gt; &gt;</type>
      <name>m_segInfo</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>296552a120ce7e3af6f37051dbadbd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; coordType &gt;</type>
      <name>m_edgeLength</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>7de0b4c79522682673b4c93519e53421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; FeatureInfo &gt;</type>
      <name>m_featureInfo</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>f598857209f0819e6e66cd620ccbb106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; List&lt; LabelInfo &gt; &gt; &gt;</type>
      <name>m_intersect</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>7fb4f58d429c3735ba097be6aaf5f908</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_assigned</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>6e094c55f9a4b819e5a6dd2f0722285b</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; coordType &gt;</type>
      <name>m_distance</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>0be03fe45c6364f5e94b4af9f1363963</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_defaultDistance</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>219c548b332d861da6fd65838c3e536e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>m_intersectGraph</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>cf7936f0876d16201607a8ae3aa205a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FeatureComparer</name>
      <anchorfile>classogdf_1_1_e_label_pos.html</anchorfile>
      <anchor>d5bc126cc2f9614c959582af1ead2464</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ogdf::ELabelPos::FeatureComparer</class>
    <class kind="struct">ogdf::ELabelPos::FeatureInfo</class>
    <class kind="struct">ogdf::ELabelPos::FeatureLink</class>
    <class kind="struct">ogdf::ELabelPos::LabelInfo</class>
    <class kind="struct">ogdf::ELabelPos::PosInfo</class>
    <class kind="struct">ogdf::ELabelPos::SegmentInfo</class>
  </compound>
  <compound kind="class">
    <name>ogdf::ELabelPos::FeatureComparer</name>
    <filename>classogdf_1_1_e_label_pos_1_1_feature_comparer.html</filename>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type></type>
      <name>FeatureComparer</name>
      <anchorfile>classogdf_1_1_e_label_pos_1_1_feature_comparer.html</anchorfile>
      <anchor>a68eb5fe2b97f19e06077827764acc0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_e_label_pos_1_1_feature_comparer.html</anchorfile>
      <anchor>1128db849ead7054614b3598fda7b92d</anchor>
      <arglist>(const FeatureLink &amp;f1, const FeatureLink &amp;f2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::ELabelPos::FeatureInfo</name>
    <filename>structogdf_1_1_e_label_pos_1_1_feature_info.html</filename>
    <member kind="variable">
      <type>coordType</type>
      <name>min_x</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_info.html</anchorfile>
      <anchor>4328d5558b7b5674ed849a5366b28fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>max_x</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_info.html</anchorfile>
      <anchor>31d32de1e171ec7d522fbc9aeda9f068</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>min_y</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_info.html</anchorfile>
      <anchor>41956dc3f1db3749e57ad81b9dda1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>max_y</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_info.html</anchorfile>
      <anchor>39722e868023221a66042f9b79b4f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>size_x</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_info.html</anchorfile>
      <anchor>7fee8f44d6c58a70c13f898be2286f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>size_y</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_info.html</anchorfile>
      <anchor>e057733d43bcd26db728085c7fc96259</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::ELabelPos::FeatureLink</name>
    <filename>structogdf_1_1_e_label_pos_1_1_feature_link.html</filename>
    <member kind="function">
      <type></type>
      <name>FeatureLink</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>9e428e1c22a361ddf976db311614c3bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureLink</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>d63af9e77f96c76e9af1403f8580f1b5</anchor>
      <arglist>(edge e, eLabelTyp elt, node v, FeatureInfo &amp;fi, int index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureLink</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>d6774e774cd13ef914289e08ce3c6a19</anchor>
      <arglist>(edge e, eLabelTyp elt, node v, FeatureInfo &amp;fi, int index, PosInfo &amp;pi)</arglist>
    </member>
    <member kind="variable">
      <type>FeatureInfo</type>
      <name>m_fi</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>a498c84e4ce04260cadf82160ff4b2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>edge</type>
      <name>m_edge</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>d8c6c46e7d8783b3cfd4da47161551df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>eLabelTyp</type>
      <name>m_elt</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>a4cef3c9c2f46a02e9a7a1ff079e8851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>d2abe1b651b1af8c5f5c2c88310d61e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_node</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>c0f925eb529aaa30ee559f46888d8a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosInfo *</type>
      <name>m_posInfo</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_feature_link.html</anchorfile>
      <anchor>af10c0ba24a183d5379da468538239b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::ELabelPos::LabelInfo</name>
    <filename>structogdf_1_1_e_label_pos_1_1_label_info.html</filename>
    <member kind="function">
      <type></type>
      <name>LabelInfo</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_label_info.html</anchorfile>
      <anchor>6978ebf35883316f9cc5d198720b29f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelInfo</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_label_info.html</anchorfile>
      <anchor>a9180e4dd7e1a6ea00fc3b78dd6d7a7d</anchor>
      <arglist>(edge e, int l, int i)</arglist>
    </member>
    <member kind="variable">
      <type>edge</type>
      <name>m_e</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_label_info.html</anchorfile>
      <anchor>6fa9ede8187678b274ecbc5b23b986f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_labelTyp</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_label_info.html</anchorfile>
      <anchor>53d517001af1dbfd7cab89ab4adbe215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_label_info.html</anchorfile>
      <anchor>f465ca0b4d011a83051ffc1f1af47509</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::ELabelPos::PosInfo</name>
    <filename>structogdf_1_1_e_label_pos_1_1_pos_info.html</filename>
    <member kind="function">
      <type></type>
      <name>PosInfo</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>d77aeaaf9a099e4c53a7e3c26b8f54d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosInfo</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>c823f5b1277e9452f6e5b19c5aa1bb4b</anchor>
      <arglist>(edge e, eLabelTyp elt, GenericPoint&lt; coordType &gt; gp, int posIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosInfo</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>d787b08191708c29a97fe51476239d7a</anchor>
      <arglist>(edge e, eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>63ed23ba215d047fd48b8546c525bfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>90bd439c0411a0157ca416644a9b5bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GenericPoint&lt; coordType &gt;</type>
      <name>m_coord</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>1bab9b51fb4e83efed9148003eb0e51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>List&lt; PosInfo * &gt;</type>
      <name>m_intersect</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>0752175316b377513febac2f02cae432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_numActive</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>2f743b213f96265b64955229e9df9c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_numFeatures</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>d60ddf7dc56024d8393bd60140a20980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_posIndex</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>015f1299a7525e0124f86a0ca1029b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>edge</type>
      <name>m_edge</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>a28540f517d34ba9ce91f21de7a94b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>eLabelTyp</type>
      <name>m_typ</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>63bd4b0cf60b259a4ad0520d3a5354f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>candStatus</type>
      <name>m_active</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>1b13f44422e7650b8587ac2ae50675a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_cost</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_pos_info.html</anchorfile>
      <anchor>79b5905ca0c05037b1106cc4f1da7edf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::ELabelPos::SegmentInfo</name>
    <filename>structogdf_1_1_e_label_pos_1_1_segment_info.html</filename>
    <member kind="variable">
      <type>coordType</type>
      <name>length</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_segment_info.html</anchorfile>
      <anchor>cd749f7b28d5fa049f3eb97f13863ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>number</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_segment_info.html</anchorfile>
      <anchor>55fc9d20f231ee772224e49c06dac13a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>min_x</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_segment_info.html</anchorfile>
      <anchor>4fb371a19177c5529e4ee6a28ceee9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>max_x</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_segment_info.html</anchorfile>
      <anchor>1d62fb8b93ecd67ced9775470d75879b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>min_y</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_segment_info.html</anchorfile>
      <anchor>177415b7c68a17e437457ad4864aa01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coordType</type>
      <name>max_y</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_segment_info.html</anchorfile>
      <anchor>5381fdb07b6454345c53363a139ee195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrthoDir</type>
      <name>direction</name>
      <anchorfile>structogdf_1_1_e_label_pos_1_1_segment_info.html</anchorfile>
      <anchor>8579304a5376c32e5b4b18161dcfd794</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeLabel</name>
    <filename>classogdf_1_1_edge_label.html</filename>
    <templarg>coordType</templarg>
    <member kind="function">
      <type></type>
      <name>EdgeLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>5c3aee676b2ecc2fb15b2e4d4a86b383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>552e9b906f6278aab65b6242bf97fa13</anchor>
      <arglist>(edge e, int usedLabels=lAll)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>d0648cf564d3233e14a14bdaeec8216f</anchor>
      <arglist>(edge e, coordType w[], coordType h[], int usedLabels=lAll)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>27880d101447227be6bea6a005477ad0</anchor>
      <arglist>(edge e, coordType w, coordType h, int usedLabels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>bd24ac0e9e8b5962eb4b6b3135db7ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>88966481553f0bd432e9b835c88f9273</anchor>
      <arglist>(const EdgeLabel &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeLabel &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>14457b496de567fdb1241470c8ea2d9d</anchor>
      <arglist>(const EdgeLabel &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeLabel &amp;</type>
      <name>operator|=</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>32f082febaf36b81e2d59444d5a4e2b0</anchor>
      <arglist>(const EdgeLabel &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>59960d1dab2766263a496bfcf5d16825</anchor>
      <arglist>(eLabelTyp elt, coordType x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>f3ed9b08d1cacb51fddf2dd099e5cd3d</anchor>
      <arglist>(eLabelTyp elt, coordType y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>6ab6793b61710e6544bc2efcf21a5e37</anchor>
      <arglist>(eLabelTyp elt, coordType h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>a45382a2a8402155aeb77ed5ec715052</anchor>
      <arglist>(eLabelTyp elt, coordType w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEdge</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>a44f0839020ad74035c8012c7bbb4c5b</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addType</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>dc009c703e261fe2314e9612fd5cfde2</anchor>
      <arglist>(eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>coordType</type>
      <name>getX</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>4eb73bcf595496d8bde4958f8ec38288</anchor>
      <arglist>(eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>coordType</type>
      <name>getY</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>dacc405cb7d0ce0d91d0d4ba469d8677</anchor>
      <arglist>(eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>coordType</type>
      <name>getWidth</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>888bf4c6f6c9a68a0f99884acb7909a9</anchor>
      <arglist>(eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>coordType</type>
      <name>getHeight</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>01e02fbb4fe1fe0152fe91c88f6d4d63</anchor>
      <arglist>(eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>theEdge</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>ced4be8ec4951e4c9ec843822c66e3c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usedLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>6fb3fa8c0d975aa2bef5bf23d5901310</anchor>
      <arglist>(eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>usedLabel</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>16fc1ee69daf8ce617011208a61e50ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_xPos</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>eac4bb0961279dcc2909b2088e5a581f</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_yPos</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>4e7e1cca45641ed0379a1443620215bd</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_xSize</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>9f4b26b7197ff99b7c894c0f61dffc12</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_ySize</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>073e7717f8614bbbb84f5df1f9285a1a</anchor>
      <arglist>[labelNum]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_usedLabels</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>13e5b9af1329c4b8efad504e139389af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>edge</type>
      <name>m_edge</name>
      <anchorfile>classogdf_1_1_edge_label.html</anchorfile>
      <anchor>b22afff9cfb1886f3658cd7863c47744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ELabelInterface</name>
    <filename>classogdf_1_1_e_label_interface.html</filename>
    <templarg>coordType</templarg>
    <member kind="function">
      <type></type>
      <name>ELabelInterface</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>f386636d47f6802622a33e67a6242893</anchor>
      <arglist>(PlanRepUML &amp;pru)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ELabelInterface</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>5054a04aaff7c70c2b065ae020afb0f8</anchor>
      <arglist>(GraphAttributes &amp;uml)</arglist>
    </member>
    <member kind="function">
      <type>GraphAttributes &amp;</type>
      <name>graph</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>bbf8598acb88448f29260f40bf1369a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLabel</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>375fd04224986b4d56149b966aa2307e</anchor>
      <arglist>(const edge &amp;e, const EdgeLabel&lt; coordType &gt; &amp;el)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLabel</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>afc031a3e49fb1697e529316dfabab26</anchor>
      <arglist>(const edge &amp;e, const EdgeLabel&lt; coordType &gt; &amp;el)</arglist>
    </member>
    <member kind="function">
      <type>EdgeLabel&lt; coordType &gt; &amp;</type>
      <name>getLabel</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>87063135affa5bca558c242fc14aea1a</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>coordType</type>
      <name>getWidth</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>d1fb8d7640674fc131aeafea708064ff</anchor>
      <arglist>(edge e, eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>coordType</type>
      <name>getHeight</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>70f77ef8651315d9669010a06d21ff94</anchor>
      <arglist>(edge e, eLabelTyp elt)</arglist>
    </member>
    <member kind="function">
      <type>coordType &amp;</type>
      <name>minFeatDist</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>2b8737f02c221e7362a8c450e442ba6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>coordType &amp;</type>
      <name>distDefault</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>989a3d636be70661c327a6f573b411d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; EdgeLabel&lt; coordType &gt; &gt;</type>
      <name>m_labels</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>bc57f4d41f9e293a96bbbfc33d85b475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphAttributes *</type>
      <name>m_ug</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>2b958c6f7164d96c28d5499d8e3ec2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_distDefault</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>bf699047417818632690248571215f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>coordType</type>
      <name>m_minFeatDist</name>
      <anchorfile>classogdf_1_1_e_label_interface.html</anchorfile>
      <anchor>67a385edbcc3fe11df4196770f90c34b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ELabelPosSimple</name>
    <filename>classogdf_1_1_e_label_pos_simple.html</filename>
    <member kind="function">
      <type></type>
      <name>ELabelPosSimple</name>
      <anchorfile>classogdf_1_1_e_label_pos_simple.html</anchorfile>
      <anchor>29d519a4f90e3746a5ee1dabe8a6ba69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ELabelPosSimple</name>
      <anchorfile>classogdf_1_1_e_label_pos_simple.html</anchorfile>
      <anchor>92a7eb40faefc664427eb612fa4c28c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_e_label_pos_simple.html</anchorfile>
      <anchor>02be10d6f62286fa9289b76109e27abc</anchor>
      <arglist>(GraphAttributes &amp;ug, ELabelInterface&lt; double &gt; &amp;eli)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_absolut</name>
      <anchorfile>classogdf_1_1_e_label_pos_simple.html</anchorfile>
      <anchor>86082bb85bb09950528f8bfdd5c2002e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_marginDistance</name>
      <anchorfile>classogdf_1_1_e_label_pos_simple.html</anchorfile>
      <anchor>ee26927236c1c6b4f79dc589596def0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_edgeDistance</name>
      <anchorfile>classogdf_1_1_e_label_pos_simple.html</anchorfile>
      <anchor>4bb0a42c8a8037e565407248029d1689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_midOnEdge</name>
      <anchorfile>classogdf_1_1_e_label_pos_simple.html</anchorfile>
      <anchor>6ee85fdb45ce6b866498cac26ae48190</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BarycenterHeuristic</name>
    <filename>classogdf_1_1_barycenter_heuristic.html</filename>
    <base>ogdf::TwoLayerCrossMin</base>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_barycenter_heuristic.html</anchorfile>
      <anchor>a85167820258557a345783f9e9be84c2</anchor>
      <arglist>(const Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_barycenter_heuristic.html</anchorfile>
      <anchor>c036a6366c6e7124a5ef2c9079633763</anchor>
      <arglist>(Level &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classogdf_1_1_barycenter_heuristic.html</anchorfile>
      <anchor>7b36eab0fa87709014bf54901b70533a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_weight</name>
      <anchorfile>classogdf_1_1_barycenter_heuristic.html</anchorfile>
      <anchor>8dd1614e0b2d391ebc7fda059b9984bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CrossingsMatrix</name>
    <filename>classogdf_1_1_crossings_matrix.html</filename>
    <member kind="function">
      <type></type>
      <name>CrossingsMatrix</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>6a24f4e5bc1d2ab53b16b11a1bdb58f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossingsMatrix</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>c114ebbe4c3dc569cae65cc2a42a2712</anchor>
      <arglist>(const Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CrossingsMatrix</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>4fb1a8feed44b4efd8f88b43aaf3638d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>da70612e52e23d2579b9154e3920be4f</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>6ebb752ece548caa410d111b0f739664</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>ee8e6839532a55efe3d121e67f122b0c</anchor>
      <arglist>(Level &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>03a9a4fb1cc959ea73105c26d773a3f7</anchor>
      <arglist>(Level &amp;L, const EdgeArray&lt; unsigned int &gt; *edgeSubGraph)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; int &gt;</type>
      <name>map</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>8144c171eecbe9044ad65aeca5c1f0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array2D&lt; int &gt;</type>
      <name>matrix</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>a0195f0f092b7f286f0b8c73602a50c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_bigM</name>
      <anchorfile>classogdf_1_1_crossings_matrix.html</anchorfile>
      <anchor>563808caac457dec9d191b6374d8b1a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DfsAcyclicSubgraph</name>
    <filename>classogdf_1_1_dfs_acyclic_subgraph.html</filename>
    <base>ogdf::AcyclicSubgraphModule</base>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_dfs_acyclic_subgraph.html</anchorfile>
      <anchor>68184089036e77d4d8bd5f16cb152f9a</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;arcSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callUML</name>
      <anchorfile>classogdf_1_1_dfs_acyclic_subgraph.html</anchorfile>
      <anchor>288ba91ed0cfb34fd1859b531473fb95</anchor>
      <arglist>(const GraphAttributes &amp;AG, List&lt; edge &gt; &amp;arcSet)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>dfsFindHierarchies</name>
      <anchorfile>classogdf_1_1_dfs_acyclic_subgraph.html</anchorfile>
      <anchor>a8ea5c37bad38b762dd20b18d2362270</anchor>
      <arglist>(const GraphAttributes &amp;AG, NodeArray&lt; int &gt; &amp;hierarchy, int i, node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfsBackedgesHierarchies</name>
      <anchorfile>classogdf_1_1_dfs_acyclic_subgraph.html</anchorfile>
      <anchor>a7b0fba5bca7d67de43fc501fe91196e</anchor>
      <arglist>(const GraphAttributes &amp;AG, node v, NodeArray&lt; int &gt; &amp;number, NodeArray&lt; int &gt; &amp;completion, int &amp;nNumber, int &amp;nCompletion)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::RCCrossings</name>
    <filename>structogdf_1_1_r_c_crossings.html</filename>
    <member kind="function">
      <type></type>
      <name>RCCrossings</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>f4ddfdde23b383fe58554489e7f75dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RCCrossings</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>a71d454aad070d930bd56892be3051a3</anchor>
      <arglist>(int cnClusters, int cnEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incEdges</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>65d191afdc4c0e7deeefa8cc9750bacd</anchor>
      <arglist>(int cn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incClusters</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>3ff6d6c9ef313c238b5bc8fdaec87a6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RCCrossings &amp;</type>
      <name>operator+=</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>3f03206157f3368097e2ae3d13b55cdc</anchor>
      <arglist>(const RCCrossings &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>RCCrossings</type>
      <name>operator+</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>b3aa3ec5422a2959ea3858eff98051bc</anchor>
      <arglist>(const RCCrossings &amp;cr) const </arglist>
    </member>
    <member kind="function">
      <type>RCCrossings</type>
      <name>operator-</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>309e176ab74abf9deefd8bf3a6c5266d</anchor>
      <arglist>(const RCCrossings &amp;cr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>e29a1a7f5d11e63af25953395e146fbd</anchor>
      <arglist>(const RCCrossings &amp;cr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>6fadf7538cc0b7566d523edffa3a90b0</anchor>
      <arglist>(const RCCrossings &amp;cr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>0da6a464adffed131d91fbf331f6299a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RCCrossings &amp;</type>
      <name>setInfinity</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>63cae7a756afd0d994c6feb5109aa0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>f69f2c78cc61e7bf86c28871b60c6a03</anchor>
      <arglist>(const RCCrossings &amp;x, const RCCrossings &amp;y)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_cnClusters</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>5fd6d3ffef2fc900e5562ade0cc124e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_cnEdges</name>
      <anchorfile>structogdf_1_1_r_c_crossings.html</anchorfile>
      <anchor>0c17dbd7b356a5de97e6e5e3dc8c2c1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LHTreeNode</name>
    <filename>classogdf_1_1_l_h_tree_node.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchor>d621f1de0414ad2061a097f21c33e306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Compound</name>
      <anchor>d621f1de0414ad2061a097f21c33e3067a1166305d2547d77e866829b51f91aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Node</name>
      <anchor>d621f1de0414ad2061a097f21c33e306ac7f576e61736d8d2c9b831bc17a0306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AuxNode</name>
      <anchor>d621f1de0414ad2061a097f21c33e306ec390fa2417b9d7a5459aa931aa65460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LHTreeNode</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>fd357822a39f42df0c5306d11a6b11db</anchor>
      <arglist>(cluster c, LHTreeNode *up)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LHTreeNode</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>64540bc409e8cde4019ec2f129e21eee</anchor>
      <arglist>(LHTreeNode *parent, node v, Type t=Node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompound</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>330dde9df3d152602838721ade3478ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfChildren</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>17821d5c48f7eefd1072a2d2d254a9e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LHTreeNode *</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>49462de410fa4f43a6beb015b5b4828f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LHTreeNode *</type>
      <name>child</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>0805a43e04d1aee883e6d069dea536a2</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>originalCluster</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>101aa68c2dcc8364cad9a746308e03e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>getNode</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>6447f9b3dd4463ad147ecc407765a879</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LHTreeNode *</type>
      <name>up</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>dc74c0459b73f5f5a15db734f4112759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LHTreeNode *</type>
      <name>down</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>a96f12911db1ea262a3e1fdc54db1ce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>db81f0d12d5e31204b98fe9c771ce149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LHTreeNode *</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>236a2025a3c4ec012accb8d4446ac8e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>40330a35973638c2862331dcbbc1eaac</anchor>
      <arglist>(LHTreeNode *p)</arglist>
    </member>
    <member kind="function">
      <type>LHTreeNode *</type>
      <name>child</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>6863e727b1a35b0e711e98fe75999483</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initChild</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>0441991a4a432f2bc82176015ff8912b</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChild</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>1c474ef7495371aa2d61e0d34011b244</anchor>
      <arglist>(int i, LHTreeNode *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPos</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>d9e7df1bb8dd43e3a1a30121141a825a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>a0af16afae41e2c8fe7add3e2f36cede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>029ae8d456ab269156899653b9672020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>47324fdf93469dd5a052f5f5cc34ef14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAuxChildren</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>1df15244106887717bf502dd8a769650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>0baf7bfff042ca25d0cea2af8dfad95e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>1c916dfed32bb449503bf537ec18c122</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>3536455f2092d914c9fcdd72044f93bf</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>List&lt; Adjacency &gt;</type>
      <name>m_upperAdj</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>3a7dedea5f67bf31872d11204fda7777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>List&lt; Adjacency &gt;</type>
      <name>m_lowerAdj</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>997499a31b8af53d7fc5e53475e636b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>List&lt; ClusterCrossing &gt;</type>
      <name>m_upperClusterCrossing</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>051428dd68993ee5ccf5fb2a35e4513b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>List&lt; ClusterCrossing &gt;</type>
      <name>m_lowerClusterCrossing</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>ff9cea99ad5e145e1764ad7ed83fbd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LHTreeNode *</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>5c5d4496e146427e946d7c5b6baae3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cluster</type>
      <name>m_origCluster</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>3e0359b573869970229dda1953ab6e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_node</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>cb4319a92e3b41c651e2e4da5074fc2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Type</type>
      <name>m_type</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>71e88e3f9ac85fbd4ca0e2093f09eb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; LHTreeNode * &gt;</type>
      <name>m_child</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>0c718315ba5485fecbda5e5ad86f5836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; LHTreeNode * &gt;</type>
      <name>m_storedChild</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>d8ac1a40a5f48507112464fae3d96a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LHTreeNode *</type>
      <name>m_up</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>03d649edd0d74bdcdc350e1ecd893cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LHTreeNode *</type>
      <name>m_down</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>17d908bbb32e7013499e20785a80f639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_pos</name>
      <anchorfile>classogdf_1_1_l_h_tree_node.html</anchorfile>
      <anchor>41ffaec4c3075c95dd6d2c9bc28ffe85</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::LHTreeNode::Adjacency</class>
    <class kind="struct">ogdf::LHTreeNode::ClusterCrossing</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::LHTreeNode::Adjacency</name>
    <filename>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</filename>
    <member kind="function">
      <type></type>
      <name>Adjacency</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>9e8587c233581948c9f5b8864a7c92af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Adjacency</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>5654ab5571e70f2722ce089be04a62b3</anchor>
      <arglist>(node u, LHTreeNode *vNode, int weight=1)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>21c81ed690bca561f507cd18945c3b9e</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>fe218a993c00773c65d68fdca658e12c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>425dcc772a542ec8ecf5ebe1e1adeedf</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_u</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>ccc1b20fa75266c2950500007004f087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LHTreeNode *</type>
      <name>m_v</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>fd4d45293128328c7ae6bda0938a27bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_weight</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_adjacency.html</anchorfile>
      <anchor>5d7f5897c57f537a1669e686f31e9c7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::LHTreeNode::ClusterCrossing</name>
    <filename>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterCrossing</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</anchorfile>
      <anchor>43f9a231b91c645b8deea1f47845fb3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterCrossing</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</anchorfile>
      <anchor>6111384aeaa02779b0e22dbc15fe6965</anchor>
      <arglist>(node uc, LHTreeNode *cNode, node u, LHTreeNode *uNode, edge e)</arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_uc</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</anchorfile>
      <anchor>ec4892027ba81dcc803c0b591be792ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_u</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</anchorfile>
      <anchor>16887a523dbe167fbc75edbfe9f1538d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LHTreeNode *</type>
      <name>m_cNode</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</anchorfile>
      <anchor>9736af0ffaad08b10fcaddc8688a5719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LHTreeNode *</type>
      <name>m_uNode</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</anchorfile>
      <anchor>82173b3b677a200e3d7544a96066a91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>edge</type>
      <name>m_edge</name>
      <anchorfile>structogdf_1_1_l_h_tree_node_1_1_cluster_crossing.html</anchorfile>
      <anchor>0d9786a5cf7124dddde1f49e920b12b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ENGLayer</name>
    <filename>classogdf_1_1_e_n_g_layer.html</filename>
    <member kind="function">
      <type></type>
      <name>ENGLayer</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>8a49725ae133c83661c98130bf755ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ENGLayer</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>20f490f977c80c9c4e7fb63f4eddc51d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LHTreeNode *</type>
      <name>root</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>a8ab447830475ef0acc7b0b069310993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LHTreeNode *</type>
      <name>root</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>e8855d8bb70a1586c4248be29885da7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRoot</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>e1e98ccfc3f92f096596fa9754bb92a2</anchor>
      <arglist>(LHTreeNode *r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>5923027f40f97676d6302229f84f671c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>b2ca9fac96ec91e1b541c756917250d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>217b14344c044b6e8b9a7b2dd20be5da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifyAdjacencies</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>e0a8a28e07042164b77c277805245dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAuxNodes</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>045ca5aa124a076d370d261e3359a509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>simplifyAdjacencies</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>5201a9d0f65bc662d2c60d8c4231e3a3</anchor>
      <arglist>(List&lt; LHTreeNode::Adjacency &gt; &amp;adjs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LHTreeNode *</type>
      <name>m_root</name>
      <anchorfile>classogdf_1_1_e_n_g_layer.html</anchorfile>
      <anchor>dc5e95127583c925615f830927e18175</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClusterGraphCopy</name>
    <filename>classogdf_1_1_cluster_graph_copy.html</filename>
    <base>ogdf::ClusterGraph</base>
    <member kind="function">
      <type></type>
      <name>ClusterGraphCopy</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>ffed2e463b924e09122e082942d3771a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterGraphCopy</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>7183329ec3871dd69acaac2975fe0ed7</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, const ClusterGraph &amp;CG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>beac968b7e099c3443e70e109db25250</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, const ClusterGraph &amp;CG)</arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraph &amp;</type>
      <name>getOriginalClusterGraph</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>c62412fb395a2a074e0d2111a61bac09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>1e8b806edcbbd7b9de5d026bc4dac883</anchor>
      <arglist>(cluster cOrig) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>4b6b10489542ce3571dd1cc724d19c0c</anchor>
      <arglist>(cluster cCopy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>8a8475367b9514a5e856704d0f7501df</anchor>
      <arglist>(node v, cluster c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createClusterTree</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>16df9fe4148621749a12cc1838d74add</anchor>
      <arglist>(cluster cOrig)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ClusterGraph *</type>
      <name>m_pCG</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>25000044cd4334f901a30a9fee2dfbac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ExtendedNestingGraph *</type>
      <name>m_pH</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>a71e0173889992aa383459a783a870f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; cluster &gt;</type>
      <name>m_copy</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>523bdc32f317b49a2328de9b9e2e9ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; cluster &gt;</type>
      <name>m_original</name>
      <anchorfile>classogdf_1_1_cluster_graph_copy.html</anchorfile>
      <anchor>33b6614839541e64044196467beb289f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ExtendedNestingGraph</name>
    <filename>classogdf_1_1_extended_nesting_graph.html</filename>
    <base>ogdf::Graph</base>
    <member kind="enumeration">
      <name>NodeType</name>
      <anchor>2d4de7a62452de0aafb0b1005c100293</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntNode</name>
      <anchor>2d4de7a62452de0aafb0b1005c100293d02494c69a9ad801fea6875dbde6c8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntClusterTop</name>
      <anchor>2d4de7a62452de0aafb0b1005c10029362448be0c28f1027f0df4e7147e46a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntClusterBottom</name>
      <anchor>2d4de7a62452de0aafb0b1005c100293e8e1ea898787761482fb2e618140600d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntDummy</name>
      <anchor>2d4de7a62452de0aafb0b1005c100293b0cb93f21a733671157892be801d60b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ntClusterTopBottom</name>
      <anchor>2d4de7a62452de0aafb0b1005c10029362cc5623f574a3800808a4544089be39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtendedNestingGraph</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>c53e313566003682b12bca1a7f1a7bc2</anchor>
      <arglist>(const ClusterGraph &amp;CG)</arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraphCopy &amp;</type>
      <name>getClusterGraph</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>f225c10aba36e577d73613c52ae931c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ClusterGraph &amp;</type>
      <name>getOriginalClusterGraph</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>2fab04c5bfa28024bde895471ce5585c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>188f939b9ec2eda11b755ef128f016a6</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>top</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>b946390469023a8068de596e0f2c7f7b</anchor>
      <arglist>(cluster cOrig) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>bottom</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>389acc381cfc546c987eb21adc23412f</anchor>
      <arglist>(cluster cOrig) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>topRank</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>a83c9c59c5f9b41a0e81674561f2df84</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bottomRank</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>ab30451e860f6b8515ff6a1302b77a81</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>NodeType</type>
      <name>type</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>eab86b9fb30bfd1a7a46dd9e42f35566</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>origNode</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>4cf351395d1f588e55226d57ebb8bcce</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>origEdge</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>fe484d357130ef64ffc1760976d0def2</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>originalCluster</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>307952088f59890e948edf10f1026091</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>9d820d215f542a1b97bdeabd2f3439dc</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>cluster</type>
      <name>parent</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>8ffb45ae6d6e5a3f7260a6e01da79d5e</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVirtual</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>fa359923ed65314dd0d8a6190615ef86</anchor>
      <arglist>(cluster c) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; edge &gt; &amp;</type>
      <name>chain</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>3fa8983a2bdaf087d4bc8491ba293ca5</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReversed</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>0e892a9251233a87ff82e5e510813a40</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLongEdgeDummy</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>10d3cfc96a3dc9e65ce61fb38b0f6da3</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verticalSegment</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>9c7417d7f02844e85afbd5d3dab1b004</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfLayers</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>daac4403460de0bce5dbfe7f564c75c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>a75947aab579d44557bec570a51152d4</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>2deb92cd22f358ac8369a47261d9faad</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const LHTreeNode *</type>
      <name>layerHierarchyTree</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>e187b0cbd2ad055331b4030344aac485</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ENGLayer &amp;</type>
      <name>layer</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>5a04c72ad51c122bc47b7f8a9f65a435</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>RCCrossings</type>
      <name>reduceCrossings</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>ebe0d96534b24b1d8f787d5efd2f5006</anchor>
      <arglist>(int i, bool dirTopDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeCurrentPos</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>4b23c59c6c606dabe4a20404969deb6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restorePos</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>0535c2756d60461d230b4b2bfdf22e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>7c29c0cd27d0f5a1b7cab0b2ea1a61ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTopBottomEdges</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>b63886889a3319ec80b06a86bfc5ec44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>aeLevel</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>fd83650e8010bcc8c46b635be26670b9</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cluster</type>
      <name>lca</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>97e9e5bd63432f37f301fab2952a2c6c</anchor>
      <arglist>(node u, node v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LHTreeNode *</type>
      <name>lca</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>b8b052d7a76ef1a45f3526d6bd0fa798</anchor>
      <arglist>(LHTreeNode *uNode, LHTreeNode *vNode, LHTreeNode **uChild, LHTreeNode **vChild) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edge</type>
      <name>addEdge</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>a4baef5a76b654b74112e795fa2f2bb2</anchor>
      <arglist>(node u, node v, bool addAlways=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assignAeLevel</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>01435c1c1faeae9ec645e73a1dc86f49</anchor>
      <arglist>(cluster c, int &amp;count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reachable</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>5bc2b6a8321464192f69a6b626d326d5</anchor>
      <arglist>(node v, node u, SListPure&lt; node &gt; &amp;successors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>tryEdge</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>d9e2cae1dd87ccb985e37c7540b71f9d</anchor>
      <arglist>(node u, node v, Graph &amp;G, NodeArray&lt; int &gt; &amp;level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RCCrossings</type>
      <name>reduceCrossings</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>0edc694378b6f9f420500c725e4d98b5</anchor>
      <arglist>(LHTreeNode *cNode, bool dirTopDown)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assignPos</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>1dd60506be2ee2401fdae1b51c3e97d5</anchor>
      <arglist>(const LHTreeNode *vNode, int &amp;count)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeRanking</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>e1533519e17ecbf50598523137ff7e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createDummyNodes</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>0610242194c8b765a27bfe96f5fe059f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createVirtualClusters</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>9843573db67a05a1dada2f8cdd25ec1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createVirtualClusters</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>ebaea458989bf0f45afeef7ba5f8f839</anchor>
      <arglist>(cluster c, NodeArray&lt; node &gt; &amp;vCopy, ClusterArray&lt; node &gt; &amp;cCopy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildLayers</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>6a57df1b167a2c979331bf1bfe8c5a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeAuxNodes</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>aff14f8b2ca60ddf170d8f4e3dcc072d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterGraphCopy</type>
      <name>m_CGC</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>bd52014f1cdd4823358db43bdaf11613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_copy</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>163642f13db74b0ed34920f4c2e5bb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_origNode</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>f1dcbc6b0347da253dc311da92bb5a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; node &gt;</type>
      <name>m_topNode</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>015bb41aabf75fb7c5e4d3cdbbe7f9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; node &gt;</type>
      <name>m_bottomNode</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>74f652181279f596c7ea7c60cf54ca91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; int &gt;</type>
      <name>m_topRank</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>492921f89cf9378ee6f42fde75abc894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; int &gt;</type>
      <name>m_bottomRank</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>42f9acd68d71c6a71351ed1b87bccf52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeType &gt;</type>
      <name>m_type</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>bb9cae5ef440537336a542609ec9bb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; edge &gt; &gt;</type>
      <name>m_copyEdge</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>279abcf5aec7011773d02d20f65d91a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_origEdge</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>bf6d8833eff8e4f45a161905a2fa28f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_rank</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>8c1951355e5f7b355346ac8c3d79b9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numLayers</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>97ad82c3d7dc9f58e64b04fd54899a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; ENGLayer &gt;</type>
      <name>m_layer</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>10be16cc16dcbf22b90b79a745686cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_pos</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>ebd37ba17f0ec456c221c17b1d4a8d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_vertical</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>4eb26e9d7e2a8e9d441f84f9d9c64f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_aeLevel</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>6e78acd13953620cbb5039b7bd3cf194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_aeVisited</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>82333f69d6351a93d4121e42c2b72fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; cluster &gt;</type>
      <name>m_mark</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>38c4056221ec68464f58a49fd1f44ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; cluster &gt;</type>
      <name>m_markedClusters</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>c3218cdf470d1583c2710207f8778ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cluster</type>
      <name>m_secondPath</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>a7fafc724765a2892431f6671e339855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_secondPathTo</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>afc830e2ecb773a44d93602a4b871ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; cluster &gt;</type>
      <name>m_markedClustersTree</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>0faeb1c7a98235b06c6f7264e7b5c479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; LHTreeNode * &gt;</type>
      <name>m_markTree</name>
      <anchorfile>classogdf_1_1_extended_nesting_graph.html</anchorfile>
      <anchor>387aa18ef0fc90f894b56a55311bfc94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::withKey</name>
    <filename>classogdf_1_1with_key.html</filename>
    <member kind="function">
      <type>withKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1with_key.html</anchorfile>
      <anchor>dc25a3b5d437c0c7553581ee9950897e</anchor>
      <arglist>(const withKey &amp;wk)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>element</name>
      <anchorfile>classogdf_1_1with_key.html</anchorfile>
      <anchor>dd986c8ec312a627e34894e4fd5b5ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>key</name>
      <anchorfile>classogdf_1_1with_key.html</anchorfile>
      <anchor>84968dd23830bd618f3b888056f2dde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1with_key.html</anchorfile>
      <anchor>aff3a3e90ac83276aad6e7e5c004de2d</anchor>
      <arglist>(ostream &amp;out, const withKey &amp;wk)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classogdf_1_1with_key.html</anchorfile>
      <anchor>e51204a72bef95829542b8972bdb37f4</anchor>
      <arglist>(istream &amp;in, withKey &amp;wk)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::cmpWithKey</name>
    <filename>classogdf_1_1cmp_with_key.html</filename>
    <base>ogdf::Comparer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1cmp_with_key.html</anchorfile>
      <anchor>9fa78bdfd9ebf020f10f35dc7a4c3199</anchor>
      <arglist>(const withKey &amp;wk1, const withKey &amp;wk2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::kList</name>
    <filename>classogdf_1_1k_list.html</filename>
    <base>ogdf::List</base>
    <member kind="function">
      <type>bool</type>
      <name>pop</name>
      <anchorfile>classogdf_1_1k_list.html</anchorfile>
      <anchor>7f883b4ac9fe085f3483210eac8a6850</anchor>
      <arglist>(int &amp;e, double &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>peek</name>
      <anchorfile>classogdf_1_1k_list.html</anchorfile>
      <anchor>04e07d3af1ddcd4a4e6c1ba8136e737e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classogdf_1_1k_list.html</anchorfile>
      <anchor>22918382f151534ff342994bebedcc70</anchor>
      <arglist>(int e, double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>median</name>
      <anchorfile>classogdf_1_1k_list.html</anchorfile>
      <anchor>f7b1216973a07c3569dff917034abe54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classogdf_1_1k_list.html</anchorfile>
      <anchor>98a02d056baadb2e1beb4f9e31f24dde</anchor>
      <arglist>(kList &amp;newList)</arglist>
    </member>
    <member kind="function">
      <type>withKey</type>
      <name>popFrontRet</name>
      <anchorfile>classogdf_1_1k_list.html</anchorfile>
      <anchor>709f2304c6da9e334ce7c1d2b8e38e7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FastHierarchyLayout</name>
    <filename>classogdf_1_1_fast_hierarchy_layout.html</filename>
    <base>ogdf::HierarchyLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>FastHierarchyLayout</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>b7dfa194a0999b27be49d045e9e14be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastHierarchyLayout</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>749496aa156949de3ce5e97d4365cf9f</anchor>
      <arglist>(const FastHierarchyLayout &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FastHierarchyLayout</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>a6bff13ba1eb92a8bde1e369e6880cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FastHierarchyLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>a336f768c0af4c9e1dbde769b78a438c</anchor>
      <arglist>(const FastHierarchyLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nodeDistance</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>32662c8f919ac452bcad06d4b6674afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodeDistance</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>4ca86537a096061fe6454d4a4082d14b</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>layerDistance</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>00decfaee8e93199d91c7babca102142</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layerDistance</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>224fc9e4fa99d6d3bf52bc3d29ac85d7</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>dbb8f5ec4ef4e2db65a89cecdad016ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>1b3eea0b8c9e88f4de1cb8f6283e2a6c</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>1fd89c6d8bd89033af53828479d7b7ea</anchor>
      <arglist>(const Hierarchy &amp;H, GraphCopyAttributes &amp;AGC)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decrTo</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>4399923948e8ed3cf8c056cab4dcddd7</anchor>
      <arglist>(double &amp;, double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>incrTo</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>bc37649811d1cb6daccbedb377629640</anchor>
      <arglist>(double &amp;, double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>sameLayer</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>d06d53e3f0bdf25d0c3db3a2792e32d6</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isFirst</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>f1fac41c79f9a5e4dc8a721aac286052</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isLast</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>b5ed822e87dce4709ee632b765702df4</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sortLongEdges</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>ba97cb49a75cbb97e34018793532606e</anchor>
      <arglist>(int, int, double *, bool &amp;, double &amp;, int *, bool *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>placeSingleNode</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>25e96f549b59f9cba198b4833799b749</anchor>
      <arglist>(int, int, int, double &amp;, int)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>placeNodes</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>e6c5fb8056c1cd5ff6cba67cabfefea0</anchor>
      <arglist>(int, int, int, int, int)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>moveLongEdge</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>bc5ffcf95e101f4e470af2f915699700</anchor>
      <arglist>(int, int, bool *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>straightenEdge</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>8ffe7716ef02542a00d1b494760e7552</anchor>
      <arglist>(int, bool *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findPlacement</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>24efbdbb32c265d9dd4ad737585cd0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>74824f94de318cc29946c133b5dfac6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>872ce3cdb40c455b54d2d59440d5c6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>k</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>ca1c032507cfe0eab0263da67cbe5d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>layer</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>4ec93c2ddf751fe859450663e29f8685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>first</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>47d7fb3ef05a9e407b7175e337656349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; int &gt; *</type>
      <name>adj</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>48f1cf1d9f74f26dd0bc81e14d15260b</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; int &gt; **</type>
      <name>longEdge</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>ae0b8a2f7d02d8a819d5cd4530e40475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minNodeDist</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>21fab50d702ee5ea4a931eebefdf5aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minLayerDist</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>dd3bd3e0d2c5708d686c372b9d9b9b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>breadth</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>2d95d06c562b308675c696d851c839ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>height</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>f2b1441dbe18b2b187c4077d0a8575ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>y</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>b9b895b02414993b0d282c3a402479ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>x</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>8a737cad7627cfdbecc7cc5e256c2312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>totalB</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>dc8b1e5b5b3d80ea6daa815390c1d42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>mDist</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>8e4dc88a7f4318298e130db335662143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_fixedLayerDist</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>4b42784f701f97d96b4b776cc0d5718e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool *</type>
      <name>virt</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>14b0a3b034e94d63af6175f32de4416e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cmpWithKey</type>
      <name>_cmp</name>
      <anchorfile>classogdf_1_1_fast_hierarchy_layout.html</anchorfile>
      <anchor>71c984804cf3d8bb2d86c5dc1823dc37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GreedyCycleRemoval</name>
    <filename>classogdf_1_1_greedy_cycle_removal.html</filename>
    <base>ogdf::AcyclicSubgraphModule</base>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>504dfa407b4e2e69c4c42fdd864a7335</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;arcSet)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfs</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>920d738cb0d465eace9ba33eed837d1a</anchor>
      <arglist>(node v, const Graph &amp;G)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_min</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>f230ef2fac990947c3d62bb564a2e6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_max</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>62b5ff8d02e98187bd38fe1ec2559115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_counter</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>24de20bef65ac0d3a7249c43e7de8c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_in</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>3aa23d8e3ac99adb8439452c8ba0580a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_out</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>acefcf71b17930a78df1cae7d4aaa712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_index</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>8282273ccff0b1254604848d117f3350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; ListPure&lt; node &gt; &gt;</type>
      <name>m_B</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>e001c747cd88b780c2e336b840208cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_item</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>59a4b38da568d152d4c530864e2b2794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_visited</name>
      <anchorfile>classogdf_1_1_greedy_cycle_removal.html</anchorfile>
      <anchor>018b3dafb21b7ea55c9269a1eeef94ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Hierarchy</name>
    <filename>classogdf_1_1_hierarchy.html</filename>
    <member kind="enumeration">
      <name>TraversingDir</name>
      <anchor>6d3b359d8ed5287cdbf4ebb2d9f2a3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>downward</name>
      <anchor>6d3b359d8ed5287cdbf4ebb2d9f2a3f62374f23126441fd0506a5563a274b562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upward</name>
      <anchor>6d3b359d8ed5287cdbf4ebb2d9f2a3f6ea4dc7f231bdac8d7fddfe723cf51131</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>8dd370921122967cfe90f26977509f88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>53e43efcf1870ef088ac612c0e973c19</anchor>
      <arglist>(const Graph &amp;G, const NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Hierarchy</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>5e5132081cda21491492204f239914b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createEmpty</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>d9ba014459c506fd71c255330f218232</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initByNodes</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>36a8dd7252aa2e2e4e296736f8b20024</anchor>
      <arglist>(const List&lt; node &gt; &amp;nodes, EdgeArray&lt; edge &gt; &amp;eCopy, const NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const GraphCopy &amp;</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>908791ad0efd9fc713c26a98b324219e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TraversingDir</type>
      <name>direction</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>a8ef9472570238c48932f2c44cc8cf0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>direction</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>e45f36ad63f911b55dcd139e4e0a5ad7</anchor>
      <arglist>(TraversingDir dir)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>53043c2b52d652726e64394564112d78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>high</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>a148d3898063e22d4e99107644357ae3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>f159c5d1dd885405f0792236b4612747</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>f314fa705a903075a8e637af61154b36</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; node &gt; &amp;</type>
      <name>adjNodes</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>aea8a9b74b2b9a13c06b568422c64b8f</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const Level &amp;</type>
      <name>adjLevel</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>3de3621911ae4d352f571e73713e2e36</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLongEdgeDummy</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>9714f1669d4ffa332b04d1982f7ff64b</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const Level &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>12e9385da9e26d610f6123b61d28b88c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Level &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>f6588732367f3317e009cfa566718227</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateCrossings</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>80ea933ae710d59a8f35099f13503238</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateCrossings</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>d4d657b070cfac321791f63a0c83eeb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateCrossingsPlaneSweep</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>dae0327b5e7a25aaa722465ab012c1e8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateCrossingsPlaneSweep</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>fecb428113453faf36820a7b1cafba3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateCrossingsSimDraw</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>46a875d301302fc712ea9ba00fcda38e</anchor>
      <arglist>(int i, const EdgeArray&lt; unsigned int &gt; *edgeSubGraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateCrossingsSimDraw</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>481d93bc07944adc197bca9433d738be</anchor>
      <arglist>(const EdgeArray&lt; unsigned int &gt; *edgeSubGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storePos</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>853619db1705d1e2526476e5b359d99a</anchor>
      <arglist>(NodeArray&lt; int &gt; &amp;oldPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restorePos</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>5c5644f412e66949a3041cf126c51e1c</anchor>
      <arglist>(const NodeArray&lt; int &gt; &amp;newPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>fa0c4dffc988f1b5c8f9747743a5026c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separateCCs</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>a51cae55fccdab8c92c3d1110984361b</anchor>
      <arglist>(int numCC, NodeArray&lt; int &gt; &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transpose</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>7d285a2d8dc860ce154ba9a69589402f</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>7546faeb0323581c8954201d6b6d9ad4</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildAdjNodes</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>5cf23800658703af081108f5b371d57f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildAdjNodes</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>5bbcb7dfa94d87745a837b6e328d9b7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>9b4dee69e3c6ab7fcf2d4e08e73f0fcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>f5e7a9ed1332b29edbd0bb49c7d56d44</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>2b776ca69ac034da23651fc2bd72812c</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>c80d603a74a693fd5f214945adc1124b</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>c607117dbd45fcef4304bf574193ef6f</anchor>
      <arglist>(const NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>transposePart</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>a455cfbc0c2a4762832e43803aa4d962</anchor>
      <arglist>(const Array&lt; node &gt; &amp;adjV, const Array&lt; node &gt; &amp;adjW)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; Level * &gt;</type>
      <name>m_pLevel</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>811f9241b5123a3a20c7ac902ddb299c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphCopy</type>
      <name>m_GC</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>f8f4542127741851abf67935930475c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_pos</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>944109c405eff15fdca082f80d9b92ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_rank</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>32e0c48372333218ac82d2128452340a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Array&lt; node &gt; &gt;</type>
      <name>m_lowerAdjNodes</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>8db7ab068eba064927b195d83661ef1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Array&lt; node &gt; &gt;</type>
      <name>m_upperAdjNodes</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>d1142c74cc0e5b032dbc10585f224941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_nSet</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>545c094e28b8cffa4b045202b95f36ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_lastOcc</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>5f3d00ae59e5ad85e893cebb074015dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraversingDir</type>
      <name>m_direction</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>ee83ca7e5502b75af122ed85b6289f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Level</name>
      <anchorfile>classogdf_1_1_hierarchy.html</anchorfile>
      <anchor>564b27969f812d1f057f58288257c783</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::Level</name>
    <filename>classogdf_1_1_level.html</filename>
    <member kind="function">
      <type></type>
      <name>Level</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>e0ba2a638fabb9e46ab519535df0270c</anchor>
      <arglist>(Hierarchy *pHierarchy, int index, int num)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Level</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>3831e4c02f3bfee003ea13a1d260f5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>519fb8f17cf518ae97ec5d0394e5820d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>7fce8ea4dc8fdc09767a4f07859ff930</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>f90ab8e7fb72504bee9c580c4852c492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>high</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>73b9422eeb705827cf446bfd8774163b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>57137fe30734dac78b81ac2c5b0cab9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array&lt; node &gt; &amp;</type>
      <name>adjNodes</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>74621b1b12501edc19b376922a356466</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>const Hierarchy &amp;</type>
      <name>hierarchy</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>78609183372e16696f6ca067e0d8f164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>809b89732cd3c41c575f993ed3ff2e1f</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>96bf2f149db78eb5319272d6b89a021d</anchor>
      <arglist>(NodeArray&lt; double &gt; &amp;weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>9b840701bca978453952aee173f627a9</anchor>
      <arglist>(NodeArray&lt; int &gt; &amp;weight, int minBucket, int maxBucket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalcPos</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>4ec8d24652a4fbf91e0d793164a2ba36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>3af4eb9f0ac2bc8c0a1e3e25800a25f6</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>0cb3e1e91a6e7257babc01f1cf7bb584</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>8ff5af886577d72cae0756d0303aac9a</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getIsolatedNodes</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>736c5c6ae13ad8c421403ca73b1c4c0f</anchor>
      <arglist>(SListPure&lt; Tuple2&lt; node, int &gt; &gt; &amp;isolated)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setIsolatedNodes</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>4d2cb16e64ff938854f53db550c9dc3c</anchor>
      <arglist>(SListPure&lt; Tuple2&lt; node, int &gt; &gt; &amp;isolated)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; node &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>f52933495642f9e66b5004d7644d1b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Hierarchy *</type>
      <name>m_pHierarchy</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>d12add131a8a533397e14332fab48bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>33221f1baa02f7767a11bb21e525d4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Hierarchy</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>11617a6fb68ec7260e4acfc6d2d81ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_level.html</anchorfile>
      <anchor>d3dd88891852333c0b65032b42f81cd1</anchor>
      <arglist>(ostream &amp;os, const Level &amp;L)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LongestPathRanking</name>
    <filename>classogdf_1_1_longest_path_ranking.html</filename>
    <base>ogdf::RankingModule</base>
    <member kind="function">
      <type></type>
      <name>LongestPathRanking</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>1ed3a9b813002f78ec7b50e24c2007f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>97154a033e4b0787076a7c8e45dd1124</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>10501392e85e851be8574260b02074fa</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;length, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callUML</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>f624c7966d48060f4f0e73d4fb6e6bf2</anchor>
      <arglist>(const GraphAttributes &amp;AG, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>separateDeg0Layer</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>afb2c267e208498f18a9d7129397e6ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separateDeg0Layer</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>ef2ef6a61929a7046deb871638d94665</anchor>
      <arglist>(bool sdl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>separateMultiEdges</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>41ee80ff36a14187bf33ef937e1c6b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separateMultiEdges</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>f5687b1f5034af5e8af26b7c5690b722</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimizeEdgeLength</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>2d55a24b925e7e51b29701f29e7f3e97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimizeEdgeLength</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>efbc98fe9e04b728448bd82c84b7d926</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alignBaseClasses</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>0d36ec7d0494d3e079cf71202f56459a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alignBaseClasses</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>1f07c296ded44fb6eaf5555b835da089</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alignSiblings</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>5b61b0994eeeb9830cebc52b7574b7bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alignSiblings</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>4dfb3acadc7043cfef126d54da29d135</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgraph</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>2c079ee5d2486dad446e1c9d26ee4014</anchor>
      <arglist>(AcyclicSubgraphModule *pSubgraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>cb2e44be7ed9f3685ecf15ae5852b46e</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;rank, EdgeArray&lt; bool &gt; &amp;reversed, const EdgeArray&lt; int &gt; &amp;length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>join</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>b4adf5f829e84e9b5b0486604f853539</anchor>
      <arglist>(GraphCopySimple &amp;GC, NodeArray&lt; node &gt; &amp;superNode, NodeArray&lt; SListPure&lt; node &gt; &gt; &amp;joinedNodes, node v, node w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfs</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>c86f5df036913133f397240d41e3330e</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getTmpRank</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>0a1636b273a9ee94357f9da77fd79d23</anchor>
      <arglist>(node v, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfsAdd</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>51638ef0fb63b231175be11da2adc73e</anchor>
      <arglist>(node v, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; AcyclicSubgraphModule &gt;</type>
      <name>m_subgraph</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>58c6082b6a922db90b5111b7b799dcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_sepDeg0</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>ffc733febd9e455a08e0c78791e87275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_separateMultiEdges</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>8ebdddc2260b06d27f27d346c0f72a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_optimizeEdgeLength</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>ee3d8116f59340cc98bab823bc0d8280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_alignBaseClasses</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>ff49492569ad69c6c94e589044dc8dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_alignSiblings</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>4cb95b188ed87241217885ec71f9228a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_offset</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>b353c8135cc16415a674c3182a4d0e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxN</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>c3c1a2848e99c61497a4c6f111b56187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_isSource</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>cfae6b33f4da9629b5125d07106ca42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_finished</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>b6c6c0b9cb3513c39c23799a14a51812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SListPure&lt; Tuple2&lt; node, int &gt; &gt; &gt;</type>
      <name>m_adjacent</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>1f7eb3c34280a361570fd3b3ed09624f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_ingoing</name>
      <anchorfile>classogdf_1_1_longest_path_ranking.html</anchorfile>
      <anchor>2d8df1fa4baa18c2a353a0d3a4f66903</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MedianHeuristic</name>
    <filename>classogdf_1_1_median_heuristic.html</filename>
    <base>ogdf::TwoLayerCrossMin</base>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_median_heuristic.html</anchorfile>
      <anchor>dd396ac334112f99f123b197793454ae</anchor>
      <arglist>(const Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_median_heuristic.html</anchorfile>
      <anchor>cfce90c4940d9d287fee80b9b383d73f</anchor>
      <arglist>(Level &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classogdf_1_1_median_heuristic.html</anchorfile>
      <anchor>528d5fde9bc73430238df5d2de8f943a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_weight</name>
      <anchorfile>classogdf_1_1_median_heuristic.html</anchorfile>
      <anchor>e8b0560d8fb0613e8ac4049e09721c87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::OptimalHierarchyClusterLayout</name>
    <filename>classogdf_1_1_optimal_hierarchy_cluster_layout.html</filename>
    <base>ogdf::HierarchyClusterLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>OptimalHierarchyClusterLayout</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>53eddbe46efaec894471a1f37e3f5b55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimalHierarchyClusterLayout</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>d8dabdd3ba519c48ea4a8634f6cadea6</anchor>
      <arglist>(const OptimalHierarchyClusterLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptimalHierarchyClusterLayout</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>29ae8ce9afa3882608d46f9752b9941b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimalHierarchyClusterLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>3bea370dc8ff4bb37e74f5b947ba10c3</anchor>
      <arglist>(const OptimalHierarchyClusterLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nodeDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>409be9e631858904de29cd649c130191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodeDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>dee57f032aaa07f559bdd6d41fa8a0be</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>layerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>f58ddd8ee0907c05de49ab9c40fcd365</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>9f663838b99261b528458551d466f88b</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>8056a1f8b66a5bb141cff0f47c7c8766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>74be9a8cbb9d75b712c1ae275cbc31fd</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightSegments</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>655ea5e6a80b5be562e26e3cda4cca90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightSegments</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>73be4deefc417516b039095d309815b0</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightBalancing</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>170552efedf4d29c7aca2138e84620cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightBalancing</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>a3019f4728353cfe4198e5a7f65d8f7e</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightClusters</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>7023016566d23b3ab44ffd9e7a84f424</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightClusters</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>2951ea4ff0d968fdb221582d327a93dd</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>047efa2c5a15b2d65665131da3421b06</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, ClusterGraphCopyAttributes &amp;ACGC)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildLayerList</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>601d5c063ba9c2f5fc9e9c890eeaf413</anchor>
      <arglist>(const LHTreeNode *vNode, List&lt; Tuple2&lt; int, double &gt; &gt; &amp;L)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeXCoordinates</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>5d4603a4aa2df778542ad86ad1e9ca77</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, ClusterGraphCopyAttributes &amp;AGC)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeYCoordinates</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>8d404ef631515b6fbbedc90edd2ac304</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, ClusterGraphCopyAttributes &amp;AGC)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_nodeDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>54fb994cf4515be1f65b9366767cabb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_layerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>dd3b0b5225fea665b1760220af401a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>83d5f5d4331a9be7feb5282de2a3bc7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_weightSegments</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>a7e7c5f07bce895032ac18724155fc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_weightBalancing</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>bf5ea479606b36eb988be5d43355e1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_weightClusters</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>260ddf80f7277351c2b8c582b1756fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterGraphCopyAttributes *</type>
      <name>m_pACGC</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>792c8804b8ce0ff789731869d25f0fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ExtendedNestingGraph *</type>
      <name>m_pH</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>9680ab483e65598b87a388733d6894cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_vertexOffset</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>e5324c2aa0f59ef9bc8401bb21acb08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_segmentOffset</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>8c979b37c88f47c4b8311ca4df642ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_clusterLeftOffset</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>daca291de71031ef3de363cf4366c9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_clusterRightOffset</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>ccc8550e50d617994a09217bddcc515d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_isVirtual</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>021c3127a33aa89bf3d2303c2d01138f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_vIndex</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>8b7886017f454c4e6f57c9cd682bae29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ClusterArray&lt; int &gt;</type>
      <name>m_cIndex</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_cluster_layout.html</anchorfile>
      <anchor>14e71bedbba0281b366fb00016a43a3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::OptimalHierarchyLayout</name>
    <filename>classogdf_1_1_optimal_hierarchy_layout.html</filename>
    <base>ogdf::HierarchyLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>OptimalHierarchyLayout</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>62085ba12435a9bc8dc202db0c8f126e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimalHierarchyLayout</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>580f10786c79ddb4b74bc0771edb0beb</anchor>
      <arglist>(const OptimalHierarchyLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptimalHierarchyLayout</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>58a5563bf0ffc4cee0230df6f1da0090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptimalHierarchyLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>c9fb640b7b86126550906b5fd5a06731</anchor>
      <arglist>(const OptimalHierarchyLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nodeDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>19ef03ecb614a8b79fbb119f4717fa40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodeDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>e018ed941fce5f191a93b2566cfe2ed4</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>layerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>6bdc1785eb4f29fb990459a3b2aaaf65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>layerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>4aef6bda85aa865b91a5d08a757794e9</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>37191648d92483f0148916da6c800148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>64c840ca0afb3549935c19772cf6c0a3</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightSegments</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>dfd67d3263c70558aa8f5f5874f8e92f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightSegments</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>8bce30239911ce49f1b60a6b5b2e42de</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightBalancing</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>1c08b534f418c13292e0073e321c33f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weightBalancing</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>092729372d0a9c66627e3b695d17af4c</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>caf0f1da36eaf3690f812ed4a877222e</anchor>
      <arglist>(const Hierarchy &amp;H, GraphCopyAttributes &amp;AGC)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeXCoordinates</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>e6dbcc63d2f2449d3c10de16256ca385</anchor>
      <arglist>(const Hierarchy &amp;H, GraphCopyAttributes &amp;AGC)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeYCoordinates</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>67f12d24fb2b9a1ea1206065b54d9953</anchor>
      <arglist>(const Hierarchy &amp;H, GraphCopyAttributes &amp;AGC)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_nodeDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>3d4e5dbb4131491d75c6d0b5b7327573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_layerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>88db61a06864f836d23695344e3b9619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_fixedLayerDistance</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>0d1a909b9747c079d1559aaaf8e3dd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_weightSegments</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>f06cff658fa6df102e89c51ae2b29308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_weightBalancing</name>
      <anchorfile>classogdf_1_1_optimal_hierarchy_layout.html</anchorfile>
      <anchor>569073835e2bd1c2e0b32fb376b920fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::OptimalRanking</name>
    <filename>classogdf_1_1_optimal_ranking.html</filename>
    <base>ogdf::RankingModule</base>
    <member kind="function">
      <type></type>
      <name>OptimalRanking</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>b34236254d429a689cc079d59591dc81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>cd933d442134f5ae6180430aebd4536e</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>9abc3b5846e3beeb8a828dd0c25ec5f2</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;length, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>ef953e286f4100d4a6545ed73a16dbe4</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;length, const EdgeArray&lt; int &gt; &amp;cost, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>separateMultiEdges</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>20218837f66a982a9baec1c47e36b52e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separateMultiEdges</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>5b302053e028bd5182f325d46cfaba56</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgraph</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>624fbc222c4535e5cbda2459f0db9183</anchor>
      <arglist>(AcyclicSubgraphModule *pSubgraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>bcc9c2e5053baa79ce84ec306df3739b</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;rank, EdgeArray&lt; bool &gt; &amp;reversed, const EdgeArray&lt; int &gt; &amp;length, const EdgeArray&lt; int &gt; &amp;cost)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; AcyclicSubgraphModule &gt;</type>
      <name>m_subgraph</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>44bb4630eef3982e5a316229ef85064f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_separateMultiEdges</name>
      <anchorfile>classogdf_1_1_optimal_ranking.html</anchorfile>
      <anchor>1cb473501dc7b448be012efba79b23a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SplitHeuristic</name>
    <filename>classogdf_1_1_split_heuristic.html</filename>
    <base>ogdf::TwoLayerCrossMinSimDraw</base>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_split_heuristic.html</anchorfile>
      <anchor>4edd6e8b7d2cd0fe649c48b479716f5f</anchor>
      <arglist>(const Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_split_heuristic.html</anchorfile>
      <anchor>6c84c89ca312d29e63edb12e89e13504</anchor>
      <arglist>(Level &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_split_heuristic.html</anchorfile>
      <anchor>d9141c97b1fdaacd825ddba275183611</anchor>
      <arglist>(Level &amp;L, const EdgeArray&lt; unsigned int &gt; *edgeSubGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classogdf_1_1_split_heuristic.html</anchorfile>
      <anchor>30c966200be70cbef5ed38937c09a725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>recCall</name>
      <anchorfile>classogdf_1_1_split_heuristic.html</anchorfile>
      <anchor>1f6e301e82e31dfa2532374b94994b10</anchor>
      <arglist>(Level &amp;, int low, int high)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CrossingsMatrix *</type>
      <name>m_cm</name>
      <anchorfile>classogdf_1_1_split_heuristic.html</anchorfile>
      <anchor>8591e68f8df3751a3b4b301683ff18d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; node &gt;</type>
      <name>buffer</name>
      <anchorfile>classogdf_1_1_split_heuristic.html</anchorfile>
      <anchor>65b2064d6305086e54e8910771363114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SugiyamaLayout</name>
    <filename>classogdf_1_1_sugiyama_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="function">
      <type></type>
      <name>SugiyamaLayout</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>ecd9e20a45c4c923b44927b8fa7cfac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SugiyamaLayout</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>b4fb7fafda15b7297a8e51a766a00151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>32ace5c7660f27165df3970a92d99e3a</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>b6143251f02c3552149265bc8cba1d32</anchor>
      <arglist>(ClusterGraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>dd4cf91f4ed8d43ba8c5fa740539761b</anchor>
      <arglist>(GraphAttributes &amp;AG, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callUML</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>7880c92d47f3c966e5ef24776e6738b8</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fails</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>473d4fece90ff82b9e4a2a70fb2e968a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fails</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>bd0b52ab5ab7683ce4a6cbfea2e20a6e</anchor>
      <arglist>(int nFails)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>c3c939f9e897ecb70fadd1380a081843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>769338ee048d5cc186fe834fe3d85f70</anchor>
      <arglist>(int nRuns)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transpose</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>d104ab301976d2dffeb8302dc07aba30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>f77d4a92e4636268e4d45a32a9161bcc</anchor>
      <arglist>(bool bTranspose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrangeCCs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>e6bfce3c7f425f8b3d2236fe8b05cd4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arrangeCCs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>1a3ac8f1001cfa78f97f464bbe17b2ae</anchor>
      <arglist>(bool bArrange)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>3f401e9a120a4d1a5c349080154ffe63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>7ff0aed5d1d8a2f9d2cd6ddcfc19b18e</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>978e75f4f677565ac970f83f9c587114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>b24b3f161acd1a221fab099dc73b5c64</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alignBaseClasses</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>29fcb24b5e7a93bcf84ba665a29b18a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alignBaseClasses</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>a7df4a307f4472ce9d5b683727e7dd55</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alignSiblings</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>0c18a60d7ac457c84c6f617cdd7f94af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alignSiblings</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>2c8c7e2330c238d0df08d05d4627baac</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgraphs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>550e81be769ae0b0a354f24b20ae6730</anchor>
      <arglist>(EdgeArray&lt; unsigned int &gt; *esg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useSubgraphs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>4957135893e7e5bea77d0d672d5da0d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRanking</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>d7bb7e1df9f9057f630a0622e8fa8ee6</anchor>
      <arglist>(RankingModule *pRanking)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCrossMin</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>83cb67a8c56306a5aed70557c589c37a</anchor>
      <arglist>(TwoLayerCrossMin *pCrossMin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayout</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>03ff0a101faa7b881da32b09827db3da</anchor>
      <arglist>(HierarchyLayoutModule *pLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClusterLayout</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>d47f701795256340d7ea60033ca7c30f</anchor>
      <arglist>(HierarchyClusterLayoutModule *pLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacker</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>3f66445c602acb3447e2c88dc065ccd4</anchor>
      <arglist>(CCLayoutPackModule *pPacker)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCrossings</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>d0015c77b1837c9b2ef4c892831dbca9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RCCrossings</type>
      <name>numberOfCrossingsCluster</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>71b07331d49f3de85b62f8669a6699f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reduceCrossings</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>75a0ace0716e8ab809c3123925c6580a</anchor>
      <arglist>(Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reduceCrossings</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>a0ddebe2c57b1ed9e88d17515de39557</anchor>
      <arglist>(ExtendedNestingGraph &amp;H)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ModuleOption&lt; RankingModule &gt;</type>
      <name>m_ranking</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>201704b5e2255d2e665aada77f51c597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ModuleOption&lt; TwoLayerCrossMin &gt;</type>
      <name>m_crossMin</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>5cc6f4256c2b1de9c7bc11deb568b851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ModuleOption&lt; TwoLayerCrossMinSimDraw &gt;</type>
      <name>m_crossMinSimDraw</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>b9b3828863ec7cd66b0642a3f8380845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ModuleOption&lt; HierarchyLayoutModule &gt;</type>
      <name>m_layout</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>7673fb8798312d493676a656cf5a363c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ModuleOption&lt; HierarchyClusterLayoutModule &gt;</type>
      <name>m_clusterLayout</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>5b4a326dbfe530d70e52fdb8bda081e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ModuleOption&lt; CCLayoutPackModule &gt;</type>
      <name>m_packer</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>952293eee3bcc61cb6839d73b727c875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_fails</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>fc4bda6f2b34c0a3cfff014bf573eace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_runs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>0ee330e9a256bfcc5069d9feecb673d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_transpose</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>94fc6b996a85cdf98b9b8c28f4f16dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_arrangeCCs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>7c87a77d3dfc3b7b0bab51e705e135a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minDistCC</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>da9cf18c1840c85d2ce65701f47b385c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>09a6a72ddc29feda6ed223e11c519400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nCrossings</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>140ad8c4145c0ae28c255545a569480a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RCCrossings</type>
      <name>m_nCrossingsCluster</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>8f659cc48c56b155eaba525adb9dae7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; bool &gt;</type>
      <name>m_levelChanged</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>c0eb7e3ccb81e0163b5bfed4d8386ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_alignBaseClasses</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>825c3c0bf761e7322d5440840932f0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_alignSiblings</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>4b4ce099f7154f025dcbd4d22ada52c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; unsigned int &gt; *</type>
      <name>m_subgraphs</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>c4eb1d9ea3619013a6e6461fe829354c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>ff7e9c2d66a425bac2e17dd1cfc49621</anchor>
      <arglist>(GraphAttributes &amp;AG, bool umlCall)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>73938ee6dba7b9ecd4a02e8707a66dd0</anchor>
      <arglist>(GraphAttributes &amp;AG, bool umlCall, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>traverseTopDown</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>0008d561dec25855e5fb5a9ba3fc5af3</anchor>
      <arglist>(Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>traverseBottomUp</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>19a403d18a45e5b837cc8ecb50a155e4</anchor>
      <arglist>(Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>transposeLevel</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>37410195220ca5a965ac06ea4a875058</anchor>
      <arglist>(int i, Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doTranspose</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>063d2a2f13c17435421b27f783bdcc74</anchor>
      <arglist>(Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doTransposeRev</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>4d7e83e0dc996b38733f79966cd074bd</anchor>
      <arglist>(Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RCCrossings</type>
      <name>traverseTopDown</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>52cc8736b5056103289a4b6cb2094ff2</anchor>
      <arglist>(ExtendedNestingGraph &amp;H)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RCCrossings</type>
      <name>traverseBottomUp</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>3f31953b15baab28b306bf75791ce447</anchor>
      <arglist>(ExtendedNestingGraph &amp;H)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numCC</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>bea9a9bd6f91367b6c210210f368b8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_compGC</name>
      <anchorfile>classogdf_1_1_sugiyama_layout.html</anchorfile>
      <anchor>e964644facb8e4e9b6beecb408278862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BalloonLayout</name>
    <filename>classogdf_1_1_balloon_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="enumeration">
      <name>RootSelection</name>
      <anchor>cf67976d3ba2c9111c9bf5c67fd14100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootCenter</name>
      <anchor>cf67976d3ba2c9111c9bf5c67fd14100c9206357de22e02b49f6f3ff76c736c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootHighestDegree</name>
      <anchor>cf67976d3ba2c9111c9bf5c67fd1410083ad569955065374c672e3f6688149e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ChildOrder</name>
      <anchor>85cf52451323be1389d705781ee9c7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>orderFixed</name>
      <anchor>85cf52451323be1389d705781ee9c7d9e5c458533eb5e802405217317d2d0084</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>orderOptimized</name>
      <anchor>85cf52451323be1389d705781ee9c7d913135473b907efcea92b1abe8456b23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TreeComputation</name>
      <anchor>4c0907ad5aa63967eb0dae310208d53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>treeBfs</name>
      <anchor>4c0907ad5aa63967eb0dae310208d53d69b97c690bc500433d9431c422bca2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>treeDfs</name>
      <anchor>4c0907ad5aa63967eb0dae310208d53db8f58a525a639c6c0b876fe177bf93be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>treeBfsRandom</name>
      <anchor>4c0907ad5aa63967eb0dae310208d53dd72face1c3f5605e5a6348800e95905d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BalloonLayout</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>865ab25ddf238f9dffe08875ba34fec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BalloonLayout</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>3bc957b58f5764065f15bdba0214ef2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BalloonLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>0c9547c7c7369c2931cd5703f56b61f2</anchor>
      <arglist>(const BalloonLayout &amp;bl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>4beadceaaf36833a78d268cef6c41a15</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFractal</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>9452bc3e83c3baba2d3212f533f48922</anchor>
      <arglist>(GraphAttributes &amp;AG, double ratio=0.3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvenAngles</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>2d81858da02640404156b5ae51aa5ead</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEvenAngles</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>288172d5c65a33679e40a54a8d427982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>158c6c2810c19b10c7739e8c7d7416c4</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>48a800d561727f7f1fbb87c08b004cda</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>6ab6bf066c55151abdb775fa178cb561</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeTree</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>ae9d83b404b441444509cc157478c079</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeBFSTree</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>aae15aabf0a00ad1afc357c426080d51</anchor>
      <arglist>(const Graph &amp;G, node v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>selectRoot</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>ff8cd83738568fb26b3ff21aaa466a4e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeRadii</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>aa44643671ad38f816f8441faa91cabc</anchor>
      <arglist>(const GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeAngles</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>002990d04f60ba833365cf3ded1084ce</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeCoordinates</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>bd9c71a8590bf4ae86c363782c2fccea</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>5a4a8d2cc2703df4451303cc3dbb63f8</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_radius</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>a4352a73a76819e34fbfe3fd33f614d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_oRadius</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>8252966a067a056c1db85946e311a361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_maxChildRadius</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>0340e8c83fe43f481a0a1ae1271524c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>22c92d6e4e63defda110a4b13fc2ac7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_childCount</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>41a9444ada74606d9f77c38967bc2063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_angle</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>10203f9e4a801675096848a5322ae877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_estimate</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>1006a40d5dd295081e02a7fe21fae940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_size</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>163ae9c12d80120704b992c2a1b309bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>m_childList</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>97d2d9cac7f6cc6b93fd3a8ca5922b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RootSelection</type>
      <name>m_rootSelection</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>e78fb2f43bf063802f98083ba0a15043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_treeRoot</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>31276a79240284ecc0690e1bca29be44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_root</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>975350c83846d1a1000a6075fc7a7ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_estimateFactor</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>f0be440fa58c64f876fe4973a44435bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_fractalRatio</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>a42f3cc6389f07b45e73afe4c374a34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ChildOrder</type>
      <name>m_childOrder</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>6e9b023910482c355c7cc5ceb8cfe45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TreeComputation</type>
      <name>m_treeComputation</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>5076fb91d8be389c79db9e57034a9eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_evenAngles</name>
      <anchorfile>classogdf_1_1_balloon_layout.html</anchorfile>
      <anchor>285a3ec3552d1d21dd790ca98b89961e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CircularLayout</name>
    <filename>classogdf_1_1_circular_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="function">
      <type></type>
      <name>CircularLayout</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>152faf26be5d317ba67b4753b342587d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CircularLayout</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>344803417183320571c418f15209bab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>71fea85227371d40fe5530856158c3cb</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistCircle</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>fa339478db54bceb92d78f570d4456e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistCircle</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>973d129b33431fe85f639c55c81c18fa</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistLevel</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>ffdd7a201e2e1d92bb108cc8b52e0683</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistLevel</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>f2ffd26c1b1ef5a8cab28e4f5b7a272b</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistSibling</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>a34e300ea6aa17deb451ddefaa56886b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistSibling</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>ab79292116d62e6811ec2509a836a4d6</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>ad0ce7c84c3471a93c38020965d60a97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minDistCC</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>1965cc868aa0831305848bb1fe7aeb21</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>2525970583ce59d25593e8c6a254124f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>801a3c5d637cb4ef068c144332cc2c7c</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>358b2da7440d4d315596e5fd8150050f</anchor>
      <arglist>(GraphCopyAttributes &amp;AG, ClusterStructure &amp;C)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assignClustersByBiconnectedComponents</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>c0ab48f46f9060b372dd883c668d59b7</anchor>
      <arglist>(ClusterStructure &amp;C)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sizeBC</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>e5034d322b1a1cbc8e6b8a6f959175bf</anchor>
      <arglist>(node vB)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computePreferedAngles</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>8f46017ab85b109a20f26c8569d795c9</anchor>
      <arglist>(ClusterStructure &amp;C, const Array&lt; double &gt; &amp;outerRadius, Array&lt; double &gt; &amp;preferedAngle)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assignPrefAngle</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>37b2b61671d2b41b48f27c425314cc02</anchor>
      <arglist>(ClusterStructure &amp;C, const Array&lt; double &gt; &amp;outerRadius, Array&lt; double &gt; &amp;preferedAngle, int c, int l, double r1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minDistCircle</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>88db07569f95d3024c61e29651ff26fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minDistLevel</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>78bbd9981986d166069710ed73037f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minDistSibling</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>a23641a0c22880d4e907dc2abbc94abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_minDistCC</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>dc4355e5cca9c3d02415f99992bc30f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_circular_layout.html</anchorfile>
      <anchor>db22e36a33046a737616b8a0671660a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AcyclicSubgraphModule</name>
    <filename>classogdf_1_1_acyclic_subgraph_module.html</filename>
    <member kind="function">
      <type></type>
      <name>AcyclicSubgraphModule</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>8ad86edaada82a47ca1d947e390e1bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AcyclicSubgraphModule</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>44f281fc8e7daaf0dd6b69d57ccc9a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>bf887c318e530b6c426bbf02d7239f99</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;arcSet)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>b6da4fe7f268f86cc53af95afc13478b</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;arcSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callAndReverse</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>aeed165c3080157ec4a7ebbdd1a3b23c</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;reversed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callAndReverse</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>3b56b62de8279bbf2d5cd784f9cdb682</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callAndDelete</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>eadade2c825adefd61d68d3d8f8fc27e</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>ee3ab41f832800fb4157743df9cebcd1</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>0f220435794a3dff4721eb21a73093f4</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_acyclic_subgraph_module.html</anchorfile>
      <anchor>d45377111ec15192a9ca1f8ef7317f01</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AugmentationModule</name>
    <filename>classogdf_1_1_augmentation_module.html</filename>
    <member kind="function">
      <type></type>
      <name>AugmentationModule</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>d69f45efa3d9226dae3abacfb85341e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AugmentationModule</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>5bd3a3893b339b25137183b355c606a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>fac12adff502cf601d17878d720b8774</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>b263fff6ab86ae9db585af5f6656d48e</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>75d78b670d45c3050d227e48a695a790</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>1183b297d968390176d9dc0ef6922041</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfAddedEdges</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>b53dcc54e409ac08b8cbd2e60568cc35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>14c7ef98bb3eb2e7578ad9ab6b3bf48b</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>00406f1f5221b51a2f69f1ebb101b42f</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>26fd93439bf6b4c609303d6d517c84e8</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>cef6f1796c4281e15c25bac7264a25d2</anchor>
      <arglist>(Graph &amp;G, List&lt; edge &gt; &amp;L)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nAddedEdges</name>
      <anchorfile>classogdf_1_1_augmentation_module.html</anchorfile>
      <anchor>6c37d0f41317eb26308b52f0cd81d3e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CCLayoutPackModule</name>
    <filename>classogdf_1_1_c_c_layout_pack_module.html</filename>
    <member kind="function">
      <type></type>
      <name>CCLayoutPackModule</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>9216c2508da91b2aed918c2d3642e812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CCLayoutPackModule</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>4a2ac5432eb92f035a86991e26421b5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>24f2aa80f3f885196d565bcb27f3ce29</anchor>
      <arglist>(Array&lt; DPoint &gt; &amp;box, Array&lt; DPoint &gt; &amp;offset, double pageRatio=1.0)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>d4c48c90c11644f0e1121fb33ceb2e73</anchor>
      <arglist>(Array&lt; DPoint &gt; &amp;box, Array&lt; DPoint &gt; &amp;offset, double pageRatio=1.0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>4b8365a685e534c0f610b302c97d82ec</anchor>
      <arglist>(Array&lt; IPoint &gt; &amp;box, Array&lt; IPoint &gt; &amp;offset, double pageRatio=1.0)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>efaa938c52b521ec9d3ca3bd17708250</anchor>
      <arglist>(Array&lt; IPoint &gt; &amp;box, Array&lt; IPoint &gt; &amp;offset, double pageRatio=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>fefab77f2ab918d231fffc432170aac4</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>3e4470fb3c4a24cd94a037f81d1de69b</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>50962b7ab4ffc8869a27f9146e97adcf</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkOffsets</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>789bb374925a7bcbd43f5e92b34a2ea8</anchor>
      <arglist>(const Array&lt; DPoint &gt; &amp;box, const Array&lt; DPoint &gt; &amp;offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkOffsets</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>33a1a223e9fbd837a1be7695bdd20702</anchor>
      <arglist>(const Array&lt; IPoint &gt; &amp;box, const Array&lt; IPoint &gt; &amp;offset)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>checkOffsetsTP</name>
      <anchorfile>classogdf_1_1_c_c_layout_pack_module.html</anchorfile>
      <anchor>e15bff65a0f45145cff62e05d814893b</anchor>
      <arglist>(const Array&lt; POINT &gt; &amp;box, const Array&lt; POINT &gt; &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimpleCluster</name>
    <filename>classogdf_1_1_simple_cluster.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleCluster</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>441050876dc0a5e891079631f4c710da</anchor>
      <arglist>(SimpleCluster *parent=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBackVertex</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>daf93fb007bb79fcc292595b5ef1e966</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBackChild</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>b1d9c478127aea31b1cdc7efd334bd63</anchor>
      <arglist>(SimpleCluster *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>f18bb43b8ce0f3d4e5906a60f4074baf</anchor>
      <arglist>(SimpleCluster *parent)</arglist>
    </member>
    <member kind="function">
      <type>SimpleCluster *</type>
      <name>getParent</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>f59be4efee44c53f3d5d36db58247e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>e280c7d20a5a9963a55b6e6d9019073d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>0bf54ea949f368bd0f85425732a8442f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SList&lt; node &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>addd0bc0aadfcc02a4bac3bbb1fac7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SList&lt; SimpleCluster * &gt; &amp;</type>
      <name>children</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>6e31a61cf1033b358932968b07bc9393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>ff4cd92ac2ace5ccfd209984afbb4886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; node &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>b1c8ad514cb66e67b68b9b49655108d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; SimpleCluster * &gt;</type>
      <name>m_children</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>80a74c6c5aec16ce82437834746bf2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SimpleCluster *</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>52c7aca99854d4c90ae5d971e919ecbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>classogdf_1_1_simple_cluster.html</anchorfile>
      <anchor>1dbabe150b5b533a92318fcf2f1008b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ClustererModule</name>
    <filename>classogdf_1_1_clusterer_module.html</filename>
    <member kind="function">
      <type></type>
      <name>ClustererModule</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>3a5a23385a89816abb785ac787ff7aa7</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClustererModule</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>3fe062d8026b3964e9fc5f8dbb3bdbd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGraph</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>49d1265e8d41d838d56c382a82259a61</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>317496cd97395fee4691f6b1dea13420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeClustering</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>92c8297a91200512ac425cf485a2c041</anchor>
      <arglist>(SList&lt; SimpleCluster * &gt; &amp;sl)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createClusterGraph</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>f95a46ec89d052d09803233ca99bcd77</anchor>
      <arglist>(ClusterGraph &amp;C)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeCIndex</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>abc52322ca26c1b0d2d0d9140001a7da</anchor>
      <arglist>(const Graph &amp;G, node v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeCIndex</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>910dada66a0762b275dca431fe4194c8</anchor>
      <arglist>(node v)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>averageCIndex</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>0f916e7b3296eb5fa7f90d570b091b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>averageCIndex</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>908d12d0a7e36866bd382fabb967f374</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>42d7c66154d08216c3f5e1617371bc17</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>7c003157c8418043f5fdea5af566cda3</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>ca8e77a430da8fd372a9ab4cd15c8928</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_clusterer_module.html</anchorfile>
      <anchor>8ac28a42d094f37c8d473964461c2758</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CrossingMinimizationModule</name>
    <filename>classogdf_1_1_crossing_minimization_module.html</filename>
    <base>ogdf::Module</base>
    <base>ogdf::Timeouter</base>
    <member kind="function">
      <type></type>
      <name>CrossingMinimizationModule</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>0ae5e91d7668a11b92504f5087192f78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CrossingMinimizationModule</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>100c02f5bab738e030b9ed2ee5e2ee72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>a55f9cf5b06958fdfaeae9cc4e811416</anchor>
      <arglist>(PlanRep &amp;PG, int cc, int &amp;crossingNumber, const EdgeArray&lt; int &gt; *cost=0, const EdgeArray&lt; bool &gt; *forbid=0, const EdgeArray&lt; unsigned int &gt; *subgraphs=0)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>ac7082f1f405780ca5c1b14e4ca7217a</anchor>
      <arglist>(PlanRep &amp;PG, int cc, int &amp;crossingNumber, const EdgeArray&lt; int &gt; *cost=0, const EdgeArray&lt; bool &gt; *forbid=0, const EdgeArray&lt; unsigned int &gt; *const subgraphs=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useCost</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>167bf6ecb93979f22a6d276b1bdb1f75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useForbid</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>f8dfd9b310aef0c8b3d4db12731bd535</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useSubgraphs</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>a52bf3655d4f2a5096fd964677fb2857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>6965fff0f43a21fd09cc5c9080836687</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>0cd0a8ddff6185935c3aebcf1c8fad90</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>09355d19d923741132a9c5fc66d5e05e</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>9081ef4aab21c0ffa0cbe841a665da85</anchor>
      <arglist>(PlanRep &amp;PG, int cc, const EdgeArray&lt; int &gt; &amp;cost, const EdgeArray&lt; bool &gt; &amp;forbid, const EdgeArray&lt; unsigned int &gt; &amp;subgraphs, int &amp;crossingNumber)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_useCost</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>67d299a7bd74d688ccf1f94ed679119f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_useForbid</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>d9bbf18849d32ec5db2429658f41f704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_useSubgraphs</name>
      <anchorfile>classogdf_1_1_crossing_minimization_module.html</anchorfile>
      <anchor>3a187a40f691a57ea854a9934e025d11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeInsertionModule</name>
    <filename>classogdf_1_1_edge_insertion_module.html</filename>
    <base>ogdf::Module</base>
    <base>ogdf::Timeouter</base>
    <member kind="enumeration">
      <name>RemoveReinsertType</name>
      <anchor>a228297a65b4fa6d364e22f3da5c6c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrNone</name>
      <anchor>a228297a65b4fa6d364e22f3da5c6c7149c99dffb5366ce3fd3dd93eac9eedac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrInserted</name>
      <anchor>a228297a65b4fa6d364e22f3da5c6c718a0f0a15339e423f74fe3809ea1c9173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrMostCrossed</name>
      <anchor>a228297a65b4fa6d364e22f3da5c6c7178f45f187912e6c7c8ba6987fafdb8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrAll</name>
      <anchor>a228297a65b4fa6d364e22f3da5c6c71959153edc2d0babde7ccbb6b0137ce6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrIncremental</name>
      <anchor>a228297a65b4fa6d364e22f3da5c6c715ee3696b16bdd17ab98cb37ab95d5d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeInsertionModule</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>88b0d681e088f33c8990f814d71f2f08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeInsertionModule</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>f40c4c2b9ddb7a0e784673a0dccd4189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>e4752bc83cbe3b854d0c640d7a41c95d</anchor>
      <arglist>(PlanRep &amp;PG, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>8169a12d79e95fd29d2cc0ae1884fb65</anchor>
      <arglist>(PlanRep &amp;PG, const EdgeArray&lt; int &gt; &amp;costOrig, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>085bb7c6f694ea58f5b17e0d3b95250c</anchor>
      <arglist>(PlanRep &amp;PG, const EdgeArray&lt; int &gt; &amp;costOrig, const List&lt; edge &gt; &amp;origEdges, const EdgeArray&lt; unsigned int &gt; &amp;edgeSubGraph)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>b38a26212ad1193cf5ba49b3ecabb8b9</anchor>
      <arglist>(PlanRep &amp;PG, const EdgeArray&lt; bool &gt; &amp;forbidOriginal, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>bf16f2311a9be9404d8ffc6d684d1a75</anchor>
      <arglist>(PlanRep &amp;PG, const EdgeArray&lt; int &gt; &amp;costOrig, const EdgeArray&lt; bool &gt; &amp;forbidOriginal, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>b91237e1ed47ecd765a41e187ac5e0c0</anchor>
      <arglist>(PlanRep &amp;PG, const EdgeArray&lt; int &gt; &amp;costOrig, const EdgeArray&lt; bool &gt; &amp;forbidOriginal, const List&lt; edge &gt; &amp;origEdges, const EdgeArray&lt; unsigned int &gt; &amp;edgeSubGraph)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>callForbidCrossingGens</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>ddb8a937d9e138338ed4cbe53c6bbda1</anchor>
      <arglist>(PlanRepUML &amp;PG, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>callForbidCrossingGens</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>9285d611f506d065308fe46eb28a4dca</anchor>
      <arglist>(PlanRepUML &amp;PG, const EdgeArray&lt; int &gt; &amp;costOrig, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>runsPostprocessing</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>93443eee6cb88233006d19b0be37659b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>4fda2d578f0eec00b8eb562243ee3e95</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>20e18996f5096847e51891028b57af1e</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>a57afb758e875e3357b97957542cdd00</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_edge_insertion_module.html</anchorfile>
      <anchor>7d80ee0c7130bc9e2bd15ba8c8acdbdc</anchor>
      <arglist>(PlanRep &amp;PG, const List&lt; edge &gt; &amp;origEdges, bool forbidCrossingGens, const EdgeArray&lt; int &gt; *costOrig, const EdgeArray&lt; bool &gt; *forbiddenEdgeOrig, const EdgeArray&lt; unsigned int &gt; *edgeSubGraph)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderModule</name>
    <filename>classogdf_1_1_embedder_module.html</filename>
    <base>ogdf::Module</base>
    <base>ogdf::Timeouter</base>
    <member kind="function">
      <type></type>
      <name>EmbedderModule</name>
      <anchorfile>classogdf_1_1_embedder_module.html</anchorfile>
      <anchor>1a2ff0b3962422697beeb09cc69422d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EmbedderModule</name>
      <anchorfile>classogdf_1_1_embedder_module.html</anchorfile>
      <anchor>65c9ec447f2729369e3dbc6067f5ae39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_embedder_module.html</anchorfile>
      <anchor>bccc4ca461c96c6d8f0779f2ba4d959d</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_embedder_module.html</anchorfile>
      <anchor>c99972353e6aaf033aaf6729a30e44a6</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_embedder_module.html</anchorfile>
      <anchor>22fa19d70db231e0769ba6340782cc69</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_embedder_module.html</anchorfile>
      <anchor>7718b16fd6d730ffaffc61ff52a67ebe</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_embedder_module.html</anchorfile>
      <anchor>1075f6abe4c1f6c6bf5f240da1c63967</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GridLayoutModule</name>
    <filename>classogdf_1_1_grid_layout_module.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="function">
      <type></type>
      <name>GridLayoutModule</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>2f712e2f2843d5ab8eca2fe230ed0653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridLayoutModule</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>4801e5f3320cbc6a8e60c3501d95db50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>f74a607e81e756ca3ecfb85a076238b0</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callGrid</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>2f7bca68e174719314f50f732d7c8ad4</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>39a90ce1313df3a604153b039cfbaf7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>b08600983075637a217f7b0daaf72496</anchor>
      <arglist>(double sep)</arglist>
    </member>
    <member kind="function">
      <type>const IPoint &amp;</type>
      <name>gridBoundingBox</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>0fdc7de6b8bd7116584e917f1e951338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>02398be4b95b3ef75074349e228153ba</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout, IPoint &amp;boundingBox)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>mapGridLayout</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>8a5b322a16577a04627b014268210453</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_separation</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>2e3b65259aadf3ecb80e93f8c1ec2827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IPoint</type>
      <name>m_gridBoundingBox</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>3700bc4b62c3c44be300481ebb196451</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GridLayoutPlanRepModule</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>a1c905d7c3922c13d8fa220447e28a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PlanarGridLayoutModule</name>
      <anchorfile>classogdf_1_1_grid_layout_module.html</anchorfile>
      <anchor>0fb4d75466a86b3e5dd1fefe12984150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarGridLayoutModule</name>
    <filename>classogdf_1_1_planar_grid_layout_module.html</filename>
    <base>ogdf::GridLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>PlanarGridLayoutModule</name>
      <anchorfile>classogdf_1_1_planar_grid_layout_module.html</anchorfile>
      <anchor>a1ae56f6f645663f0ca71fecf3765405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanarGridLayoutModule</name>
      <anchorfile>classogdf_1_1_planar_grid_layout_module.html</anchorfile>
      <anchor>acc1e6be102591000b8159d1c8708477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFixEmbed</name>
      <anchorfile>classogdf_1_1_planar_grid_layout_module.html</anchorfile>
      <anchor>e00dbec91c404fc3451d51859d755c77</anchor>
      <arglist>(GraphAttributes &amp;AG, adjEntry adjExternal=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callGridFixEmbed</name>
      <anchorfile>classogdf_1_1_planar_grid_layout_module.html</anchorfile>
      <anchor>98eb276e5ddc41ddabc63df43a9833f8</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout, adjEntry adjExternal=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planar_grid_layout_module.html</anchorfile>
      <anchor>f364cfbdfcc372ce2eee2ddfdd06f549</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout, IPoint &amp;boundingBox)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planar_grid_layout_module.html</anchorfile>
      <anchor>81dad22c31c7a2313bf213d6408ea60e</anchor>
      <arglist>(const Graph &amp;G, adjEntry adjExternal, GridLayout &amp;gridLayout, IPoint &amp;boundingBox, bool fixEmbedding)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::GridLayoutPlanRepModule</name>
    <filename>classogdf_1_1_grid_layout_plan_rep_module.html</filename>
    <base>ogdf::PlanarGridLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>GridLayoutPlanRepModule</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>87062f6c626aedbfa1c39841cdc9536e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridLayoutPlanRepModule</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>4178203f511ef58820f2ff479831bd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callGrid</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>348a39d6359df2bc5710e0d4b1615ab5</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callGrid</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>51f008b27553298d111513f91d1caf9a</anchor>
      <arglist>(PlanRep &amp;PG, GridLayout &amp;gridLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callGridFixEmbed</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>cff32b5a4b664fd6a25ba3d854661a25</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout, adjEntry adjExternal=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callGridFixEmbed</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>4243ee97afc595b25cd54f5a5c5f06d1</anchor>
      <arglist>(PlanRep &amp;PG, GridLayout &amp;gridLayout, adjEntry adjExternal=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>f5c80c930b1618e399751691d861afc0</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry adjExternal, GridLayout &amp;gridLayout, IPoint &amp;boundingBox, bool fixEmbedding)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_grid_layout_plan_rep_module.html</anchorfile>
      <anchor>5bb14cada82be8c76cf3594e9f449025</anchor>
      <arglist>(const Graph &amp;G, adjEntry adjExternal, GridLayout &amp;gridLayout, IPoint &amp;boundingBox, bool fixEmbedding)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HierarchyClusterLayoutModule</name>
    <filename>classogdf_1_1_hierarchy_cluster_layout_module.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyClusterLayoutModule</name>
      <anchorfile>classogdf_1_1_hierarchy_cluster_layout_module.html</anchorfile>
      <anchor>e5a2614dbc6e2fe15dd9c3efc856c95c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyClusterLayoutModule</name>
      <anchorfile>classogdf_1_1_hierarchy_cluster_layout_module.html</anchorfile>
      <anchor>4a4bd003f5ccc5230edf41c1e7252f9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callCluster</name>
      <anchorfile>classogdf_1_1_hierarchy_cluster_layout_module.html</anchorfile>
      <anchor>a8e0216323fb52b0abae9a917ccca286</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, ClusterGraphAttributes &amp;ACG)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hierarchy_cluster_layout_module.html</anchorfile>
      <anchor>b39564f095c7977713d6f47ec5b4701a</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hierarchy_cluster_layout_module.html</anchorfile>
      <anchor>3f6e1451e4580336e73a9b0661f67171</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_hierarchy_cluster_layout_module.html</anchorfile>
      <anchor>2179ee6fae354353ba023600ac012d5f</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_hierarchy_cluster_layout_module.html</anchorfile>
      <anchor>660cb7cb1c5c3adbe5f1adf4afc5d160</anchor>
      <arglist>(const ExtendedNestingGraph &amp;H, ClusterGraphCopyAttributes &amp;ACGC)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::HierarchyLayoutModule</name>
    <filename>classogdf_1_1_hierarchy_layout_module.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyLayoutModule</name>
      <anchorfile>classogdf_1_1_hierarchy_layout_module.html</anchorfile>
      <anchor>89901e8aaf5f40b873eaeeb0b3e52478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyLayoutModule</name>
      <anchorfile>classogdf_1_1_hierarchy_layout_module.html</anchorfile>
      <anchor>f91523030998d153548b8b688f58e9de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_hierarchy_layout_module.html</anchorfile>
      <anchor>aa5f10f228b88de9a661e08692e06f6c</anchor>
      <arglist>(const Hierarchy &amp;H, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hierarchy_layout_module.html</anchorfile>
      <anchor>1c57bfb071302d17a150d73220c564a7</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_hierarchy_layout_module.html</anchorfile>
      <anchor>70cbf5cb76dc5635f4d1b9b64ca71431</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_hierarchy_layout_module.html</anchorfile>
      <anchor>8e9050b34bcde2085017b503d5beae07</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_hierarchy_layout_module.html</anchorfile>
      <anchor>9d423061201bf7d9ee62e6ab6f4e7179</anchor>
      <arglist>(const Hierarchy &amp;H, GraphCopyAttributes &amp;AGC)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LayoutClusterPlanRepModule</name>
    <filename>classogdf_1_1_layout_cluster_plan_rep_module.html</filename>
    <member kind="function">
      <type></type>
      <name>LayoutClusterPlanRepModule</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>68701297af5e9af41c9cf06513a8c5cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LayoutClusterPlanRepModule</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>d53dfea4e738220c72cc51d2e73d75af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>c424de3fc8ac25cf371e6d80327c3959</anchor>
      <arglist>(ClusterPlanRep &amp;PG, adjEntry adjExternal, Layout &amp;drawing, List&lt; NodePair &gt; &amp;npEdges, List&lt; edge &gt; &amp;newEdges, Graph &amp;originalGraph)=0</arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>a4d4d095f0396ec5f0a6bd9ee6b74641</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>a66ea7950ec4ddb5b7f13fddf587fbd2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptions</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>547c271a0c76f90b07cc1c17db5f26aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>5fa03cce4cc4cc332706cec08c9033ae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>7c4acd56a880319534c035e5088e2444</anchor>
      <arglist>(double sep)=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>d30e9fe10eda61c199a2ac2c5d55307d</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>cd541411b3c867fa81c8cb4d600efbb1</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>252b79c7e6b0d291c58d389ada784253</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DPoint</type>
      <name>m_boundingBox</name>
      <anchorfile>classogdf_1_1_layout_cluster_plan_rep_module.html</anchorfile>
      <anchor>e07816ca9eb09f10b30f6e380edea3a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LayoutModule</name>
    <filename>classogdf_1_1_layout_module.html</filename>
    <member kind="function">
      <type></type>
      <name>LayoutModule</name>
      <anchorfile>classogdf_1_1_layout_module.html</anchorfile>
      <anchor>fa15908e24507d452034fb16841e5a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LayoutModule</name>
      <anchorfile>classogdf_1_1_layout_module.html</anchorfile>
      <anchor>dbef4957f0e46af181a88048e11d0ef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_layout_module.html</anchorfile>
      <anchor>e6fe7945f310d5e21e5e559675bb6521</anchor>
      <arglist>(GraphAttributes &amp;GA)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_layout_module.html</anchorfile>
      <anchor>d21c3c2a7f0c237e2c3ab02c6ae1edc7</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout_module.html</anchorfile>
      <anchor>335c9d1db8650f9e8a94dd7804814243</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout_module.html</anchorfile>
      <anchor>bbd3b47d4108fd312eb719b8a34e85c0</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_layout_module.html</anchorfile>
      <anchor>e1d26f411a1f1b09c9c89d18fb189773</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LayoutPlanRepModule</name>
    <filename>classogdf_1_1_layout_plan_rep_module.html</filename>
    <member kind="function">
      <type></type>
      <name>LayoutPlanRepModule</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>b249b864d99c4ed610cbb6c6ff64070f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LayoutPlanRepModule</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>664e6650b0a3c760781455dba68bbe0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>1b176dab756705548f7c9c65703e2011</anchor>
      <arglist>(PlanRepUML &amp;PG, adjEntry adjExternal, Layout &amp;drawing)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>cd51994cc8e5f580fe06b908990301aa</anchor>
      <arglist>(PlanRepUML &amp;PG, adjEntry adjExternal, Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>const DPoint &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>595de4cbf6610c7a7d2944027d04025a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>1641e535300804c274a9832b25708919</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptions</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>4685276b741198f38d3c46634e987502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>25a87ddd85b0c10f4a6588bbe53f19e4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>6842be4cc7fc895b6cef1743b88e3618</anchor>
      <arglist>(double sep)=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>fb8438d2b00d01ae8c5c4240674b5594</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>24d29da120133b9f9f1a194761245464</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>2ba9b24e39d908daa36ee968559ff1db</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBoundingBox</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>2c77023225d8d62f015231dca44c1814</anchor>
      <arglist>(PlanRepUML &amp;PG, Layout &amp;drawing)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DPoint</type>
      <name>m_boundingBox</name>
      <anchorfile>classogdf_1_1_layout_plan_rep_module.html</anchorfile>
      <anchor>4c43b3b38b4f5d0d69744cdbd6a8c9fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MinCostFlowModule</name>
    <filename>classogdf_1_1_min_cost_flow_module.html</filename>
    <member kind="function">
      <type></type>
      <name>MinCostFlowModule</name>
      <anchorfile>classogdf_1_1_min_cost_flow_module.html</anchorfile>
      <anchor>356fffece94b9590e2aacc459d0e7690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MinCostFlowModule</name>
      <anchorfile>classogdf_1_1_min_cost_flow_module.html</anchorfile>
      <anchor>3659076639b4b4da6010fe0242ab0c4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_min_cost_flow_module.html</anchorfile>
      <anchor>f8d77150e48c59a05b367beb4da571b0</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;lowerBound, const EdgeArray&lt; int &gt; &amp;upperBound, const EdgeArray&lt; int &gt; &amp;cost, const NodeArray&lt; int &gt; &amp;supply, EdgeArray&lt; int &gt; &amp;flow, NodeArray&lt; int &gt; &amp;dual)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>generateProblem</name>
      <anchorfile>classogdf_1_1_min_cost_flow_module.html</anchorfile>
      <anchor>27d65ce4c7c4f6c73750c5d3ee242b4b</anchor>
      <arglist>(Graph &amp;G, int n, int m, EdgeArray&lt; int &gt; &amp;lowerBound, EdgeArray&lt; int &gt; &amp;upperBound, EdgeArray&lt; int &gt; &amp;cost, NodeArray&lt; int &gt; &amp;supply)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkProblem</name>
      <anchorfile>classogdf_1_1_min_cost_flow_module.html</anchorfile>
      <anchor>21313e29c1d5d74f1a3796651998dd7d</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;lowerBound, const EdgeArray&lt; int &gt; &amp;upperBound, const NodeArray&lt; int &gt; &amp;supply)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkComputedFlow</name>
      <anchorfile>classogdf_1_1_min_cost_flow_module.html</anchorfile>
      <anchor>79149b2a82697ffd8b16a4dcf3193836</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; int &gt; &amp;lowerBound, EdgeArray&lt; int &gt; &amp;upperBound, EdgeArray&lt; int &gt; &amp;cost, NodeArray&lt; int &gt; &amp;supply, EdgeArray&lt; int &gt; &amp;flow, int &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkComputedFlow</name>
      <anchorfile>classogdf_1_1_min_cost_flow_module.html</anchorfile>
      <anchor>a3d3d31578d865b6938b57dbf1c58d67</anchor>
      <arglist>(const Graph &amp;G, EdgeArray&lt; int &gt; &amp;lowerBound, EdgeArray&lt; int &gt; &amp;upperBound, EdgeArray&lt; int &gt; &amp;cost, NodeArray&lt; int &gt; &amp;supply, EdgeArray&lt; int &gt; &amp;flow)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MixedModelCrossingsBeautifierModule</name>
    <filename>classogdf_1_1_mixed_model_crossings_beautifier_module.html</filename>
    <member kind="function">
      <type></type>
      <name>MixedModelCrossingsBeautifierModule</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>640784f1775b60856086fe3168d634eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MixedModelCrossingsBeautifierModule</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>efd21d6ebdce0d7128c05633aa5f0171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>0bafd61ee12d0ed3cbacaa64a26263ff</anchor>
      <arglist>(const PlanRep &amp;PG, GridLayout &amp;gl)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCrossings</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>7e4e0e7b3dc53d5b5788bb9cad05ba4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>1fa815a50f9e141feefd423c9427c2f6</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>648d159091a66251d88de45428aa9231</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>17e4a835e3c532c44a8ac98ced90e7b8</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>bafe79fc7a00927617641eac132ab77a</anchor>
      <arglist>(const PlanRep &amp;PG, GridLayout &amp;gl, const List&lt; node &gt; &amp;L)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nCrossings</name>
      <anchorfile>classogdf_1_1_mixed_model_crossings_beautifier_module.html</anchorfile>
      <anchor>98c846156bfa959218cbec1b2d8e7726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMDummyCrossingsBeautifier</name>
    <filename>classogdf_1_1_m_m_dummy_crossings_beautifier.html</filename>
    <base>ogdf::MixedModelCrossingsBeautifierModule</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_dummy_crossings_beautifier.html</anchorfile>
      <anchor>17bd47876c8c99863aac119943c56154</anchor>
      <arglist>(const PlanRep &amp;PG, GridLayout &amp;gl, const List&lt; node &gt; &amp;L)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMCrossingMinimizationModule</name>
    <filename>classogdf_1_1_m_m_crossing_minimization_module.html</filename>
    <base>ogdf::Module</base>
    <member kind="function">
      <type></type>
      <name>MMCrossingMinimizationModule</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>d30c29201f6cc81a92b5fc0ae40446c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MMCrossingMinimizationModule</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>2a85f70ea7d87433c314dbc54347d00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>47dbf5820de728f59f693ad4b273de4c</anchor>
      <arglist>(PlanRepExpansion &amp;PG, int cc, int &amp;crossingNumber)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>2ab88553d59c5a6166ec822cf3cd2a6e</anchor>
      <arglist>(const Graph &amp;G, int &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>25582b2026e1cbd47b16f830eeb39a7f</anchor>
      <arglist>(const Graph &amp;G, const List&lt; node &gt; &amp;splittableNodes, int &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfNodeSplits</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>8fc0b4002c006c743cdd3548523bd393</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfSplittedNodes</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>40634bc326bbbea28015fa82f489ab08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>86718ee2a4a267f4bb15f0559f1eb73c</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>451d2a6bddd78401806fec84b15883b8</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>f3e0f2875e2c65dd6c84428c0e77b984</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>fc82b46572bbfc0dfdfa5614b896318b</anchor>
      <arglist>(PlanRepExpansion &amp;PG, int cc, int &amp;crossingNumber, int &amp;numNS, int &amp;numSN)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nodeSplits</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>a0760678e83ad4271306df1f928b2f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_splittedNodes</name>
      <anchorfile>classogdf_1_1_m_m_crossing_minimization_module.html</anchorfile>
      <anchor>7699e020aca78a508b4b1cc7efc65a3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMEdgeInsertionModule</name>
    <filename>classogdf_1_1_m_m_edge_insertion_module.html</filename>
    <base>ogdf::Module</base>
    <member kind="enumeration">
      <name>RemoveReinsertType</name>
      <anchor>e3182337d265e3cc3078d2473f4ea43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrNone</name>
      <anchor>e3182337d265e3cc3078d2473f4ea43f1a78e1d6e5af18bd292c37f22ee1753d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrInserted</name>
      <anchor>e3182337d265e3cc3078d2473f4ea43f41eef0582abdae036bb5595f0fcb1acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrMostCrossed</name>
      <anchor>e3182337d265e3cc3078d2473f4ea43f3319d61daa0dbd094be04232683b9071</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrAll</name>
      <anchor>e3182337d265e3cc3078d2473f4ea43f2175c204bcb0c873641b549870ee77fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rrIncremental</name>
      <anchor>e3182337d265e3cc3078d2473f4ea43ff6e527a0181ff99a00ae5e7e22398d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MMEdgeInsertionModule</name>
      <anchorfile>classogdf_1_1_m_m_edge_insertion_module.html</anchorfile>
      <anchor>9bc1f413583b2a4da86c6b77c38f34a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MMEdgeInsertionModule</name>
      <anchorfile>classogdf_1_1_m_m_edge_insertion_module.html</anchorfile>
      <anchor>e1f2af2013b3007e9cff14197b523529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_m_m_edge_insertion_module.html</anchorfile>
      <anchor>315d7122be43899aedd88402da5505e8</anchor>
      <arglist>(PlanRepExpansion &amp;PG, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_m_m_edge_insertion_module.html</anchorfile>
      <anchor>6bba13e03bba8b6410cfcc9fc74d6dc2</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_m_m_edge_insertion_module.html</anchorfile>
      <anchor>fed81725d6f9dc64a045dd892efca205</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_m_m_edge_insertion_module.html</anchorfile>
      <anchor>d912fc1e2638b1e9e7b66854cc7d4ccf</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_edge_insertion_module.html</anchorfile>
      <anchor>9c863069114a6f91a950ea64c6df1e5b</anchor>
      <arglist>(PlanRepExpansion &amp;PG, const List&lt; edge &gt; &amp;origEdges)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarSubgraphModule</name>
    <filename>classogdf_1_1_planar_subgraph_module.html</filename>
    <base>ogdf::Module</base>
    <base>ogdf::Timeouter</base>
    <member kind="function">
      <type></type>
      <name>PlanarSubgraphModule</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>ab754bc6fdd98f4d929b9ad710d05448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanarSubgraphModule</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>ca85a13a4857827a84833dc2e0019116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>9f4b8548296419ace9ed17b1e37693f5</anchor>
      <arglist>(const Graph &amp;G, const List&lt; edge &gt; &amp;preferedEdges, List&lt; edge &gt; &amp;delEdges, bool preferedImplyPlanar=false)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>ede4049dbd1caddb62258884adaf4618</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; &amp;cost, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>6689c6befc5e2d49d7e6726eccb553cf</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>8936b9feac50f10678e9f3649f35d7f3</anchor>
      <arglist>(const Graph &amp;G, const List&lt; edge &gt; &amp;preferedEdges, List&lt; edge &gt; &amp;delEdges, bool preferedImplyPlanar=false)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>281c5c3117a0b4a80d3cac1041ddca89</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>callAndDelete</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>1acddc2d35a39b37b6f4f467df89f0c9</anchor>
      <arglist>(GraphCopy &amp;GC, const List&lt; edge &gt; &amp;preferedEdges, List&lt; edge &gt; &amp;delOrigEdges, bool preferedImplyPlanar=false)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>callAndDelete</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>b8c150416bce0c23428ce75ad94604cb</anchor>
      <arglist>(GraphCopy &amp;GC, List&lt; edge &gt; &amp;delOrigEdges)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>b664a647a35cc550d65f28936b5ba1fc</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>4273fbdcb81a3f261944094e228b1b03</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>27c82cce1c1cea650d32500003e336c4</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planar_subgraph_module.html</anchorfile>
      <anchor>850ee666cfe633c67503d47b9f1b9c1c</anchor>
      <arglist>(const Graph &amp;G, const List&lt; edge &gt; &amp;preferedEdges, List&lt; edge &gt; &amp;delEdges, const EdgeArray&lt; int &gt; *pCost=0, bool preferedImplyPlanar=false)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::RankingModule</name>
    <filename>classogdf_1_1_ranking_module.html</filename>
    <member kind="function">
      <type></type>
      <name>RankingModule</name>
      <anchorfile>classogdf_1_1_ranking_module.html</anchorfile>
      <anchor>9df53ccdaca2b2a880f0472c3ce3cd76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RankingModule</name>
      <anchorfile>classogdf_1_1_ranking_module.html</anchorfile>
      <anchor>81df1c68b0174b4776c291441c96b7f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_ranking_module.html</anchorfile>
      <anchor>80c753248153c6a294b0fd219abb9c41</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;rank)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_ranking_module.html</anchorfile>
      <anchor>ad59fba1c7ed3d58dae44ef6d2a8a0f6</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_ranking_module.html</anchorfile>
      <anchor>b8cf27a3f89e2a8dab2047c57709f96f</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_ranking_module.html</anchorfile>
      <anchor>5a09c3f5d22db09bec12adc886bd7246</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_ranking_module.html</anchorfile>
      <anchor>d89c19ca63d394cedb13beb11c588c8a</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ShellingOrderModule</name>
    <filename>classogdf_1_1_shelling_order_module.html</filename>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_shelling_order_module.html</anchorfile>
      <anchor>788795513842f22890ff252d4bffb069</anchor>
      <arglist>(const Graph &amp;G, ShellingOrder &amp;order, adjEntry adj=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callLeftmost</name>
      <anchorfile>classogdf_1_1_shelling_order_module.html</anchorfile>
      <anchor>532cb0cad58912ecb3d52ba6e1b14e56</anchor>
      <arglist>(const Graph &amp;G, ShellingOrder &amp;order, adjEntry adj=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>baseRatio</name>
      <anchorfile>classogdf_1_1_shelling_order_module.html</anchorfile>
      <anchor>f2cdb5f11f368dc41859983b38562cd3</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseRatio</name>
      <anchorfile>classogdf_1_1_shelling_order_module.html</anchorfile>
      <anchor>e2a0ad267d5f3fb2685a4a756792ac41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShellingOrderModule</name>
      <anchorfile>classogdf_1_1_shelling_order_module.html</anchorfile>
      <anchor>ea8545052aff5713be827d1820e828de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_shelling_order_module.html</anchorfile>
      <anchor>d7907c1b66f4222a39d1272f9faf3e98</anchor>
      <arglist>(const Graph &amp;G, adjEntry adj, List&lt; ShellingOrderSet &gt; &amp;partition)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_baseRatio</name>
      <anchorfile>classogdf_1_1_shelling_order_module.html</anchorfile>
      <anchor>6a14aa9f3a040c9c644b67ac134bfaab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ShortestPathModule</name>
    <filename>classogdf_1_1_shortest_path_module.html</filename>
    <member kind="function">
      <type></type>
      <name>ShortestPathModule</name>
      <anchorfile>classogdf_1_1_shortest_path_module.html</anchorfile>
      <anchor>032864ae204f8aa100b8202f6e0a4d4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_shortest_path_module.html</anchorfile>
      <anchor>706c0b912583fe3073dc5b86bbe80c93</anchor>
      <arglist>(const Graph &amp;G, const node s, const EdgeArray&lt; int &gt; &amp;length, NodeArray&lt; int &gt; &amp;d, NodeArray&lt; edge &gt; &amp;pi)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::TwoLayerCrossMin</name>
    <filename>classogdf_1_1_two_layer_cross_min.html</filename>
    <member kind="function">
      <type></type>
      <name>TwoLayerCrossMin</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>be8c10a50265fa562a8a570c117d5bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TwoLayerCrossMin</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>04a8da01819a81722c44263e2c751cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>857a52b924cf41f052d7cb693af3d583</anchor>
      <arglist>(const Hierarchy &amp;H)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>66ddb727056e36eaf49e1c06ba4210b2</anchor>
      <arglist>(Level &amp;L)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>a1f1ac43be4e86a73bdfe03b44667ae6</anchor>
      <arglist>(Level &amp;level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>b58ae10b1c672c8950586e40911f0c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>131ae2ccc708c0b496cea8304b2cf7ec</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>25a8e6f0d440606979f62013dab67a03</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min.html</anchorfile>
      <anchor>87265274e4dc07cbf7a724b8c429a3ae</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::UMLLayoutModule</name>
    <filename>classogdf_1_1_u_m_l_layout_module.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="function">
      <type></type>
      <name>UMLLayoutModule</name>
      <anchorfile>classogdf_1_1_u_m_l_layout_module.html</anchorfile>
      <anchor>281c0f7780d96791eca157030302b996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UMLLayoutModule</name>
      <anchorfile>classogdf_1_1_u_m_l_layout_module.html</anchorfile>
      <anchor>236f6906453893a4a986b77972cda6ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_u_m_l_layout_module.html</anchorfile>
      <anchor>df15d713dbb0d251ddc68b6537411295</anchor>
      <arglist>(UMLGraph &amp;umlGraph)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_u_m_l_layout_module.html</anchorfile>
      <anchor>39776b11cc3e1bc64250f5577aa0cbce</anchor>
      <arglist>(UMLGraph &amp;umlGraph)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_u_m_l_layout_module.html</anchorfile>
      <anchor>d109aa2d4b79ec746c2da31cbb9c5cc1</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_u_m_l_layout_module.html</anchorfile>
      <anchor>3fa0236f340fd6b00c4e53579646dfa0</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_u_m_l_layout_module.html</anchorfile>
      <anchor>b6203b72cdd76fbb894dbaf3668e3dda</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::UpwardPlanarSubgraphModule</name>
    <filename>classogdf_1_1_upward_planar_subgraph_module.html</filename>
    <member kind="function">
      <type></type>
      <name>UpwardPlanarSubgraphModule</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>7caf8f1241c700d30891d27c47ab810d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UpwardPlanarSubgraphModule</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>2aa87511a77c44244c0e97d646ce37e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>d6f690fa03e98baac7f24a8bbae0ebf3</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;delEdges)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>93b8fa0dac799ce70c2b4b0400935446</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callAndDelete</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>39b6c04835569d11e8c6f1bf5a6316bc</anchor>
      <arglist>(GraphCopy &amp;GC, List&lt; edge &gt; &amp;delOrigEdges)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>55c664e11637620d93ee4b7ee916bc67</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>2009aa72010744e53a9cdb86fd06ecde</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_module.html</anchorfile>
      <anchor>25c193d78f64a2a8c288f395084b1c07</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CompactionConstraintGraphBase</name>
    <filename>classogdf_1_1_compaction_constraint_graph_base.html</filename>
    <base protection="protected">ogdf::Graph</base>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>a20dd3f154481c026a0d6a80895d5128</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>36d741c41935b8c15af0684656d44793</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>cbf3e474a89597c312da2d6a35ed224e</anchor>
      <arglist>(const char *fileName, NodeArray&lt; bool &gt; one) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>9935c7fac7a81351219bf7fa16a759cf</anchor>
      <arglist>(ostream &amp;os, NodeArray&lt; bool &gt; one) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>basicArc</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>666604dde58b98808186bee1f9c39746</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verticalGen</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>eb2b3d8adedefe6c9030bf34459dc67d</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verticalArc</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>e940e13bc785340855ab278cbe1183ab</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>onBorder</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>c0dfa86145f86b78b70c91ab676bec6f</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixOnBorder</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>e11d86c3b74608c11e251ff2e35bf0f0</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>0c9019b4a58b6b1b64c6b82966c8ee2b</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alignmentArc</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>9a7c0e243bd5d64fc83fc87bc1b77c23</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const PlanRep &amp;</type>
      <name>getPlanRep</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>09ebd61b80b650251c7e30b9414e8163</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>pathToOriginal</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>775d5ac2dad482c35d70ebeb4b69ed32</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CompactionConstraintGraphBase</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>a4f47b5f7cb5695b4a760f4fec08e036</anchor>
      <arglist>(const OrthoRep &amp;OR, const PlanRep &amp;PG, OrthoDir arcDir, int costGen=1, int costAssoc=1, bool align=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeTopologicalSegmentNum</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>113664f0a2a06cadd9ae6a5c8e072cda</anchor>
      <arglist>(NodeArray&lt; int &gt; &amp;topNum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeRedundantVisibArcs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>673f5d00588c0bbddfa87e7de96fe167</anchor>
      <arglist>(SListPure&lt; Tuple2&lt; node, node &gt; &gt; &amp;visibArcs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>e0cbb33fc6774a7c412c5cdee89adebd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>writeLength</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>47b0f25d24aa74bc82a8567220227ec5</anchor>
      <arglist>(ostream &amp;os, edge e) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const OrthoRep *</type>
      <name>m_pOR</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>0e86e5bec36321c287805f47da7b1a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const PlanRep *</type>
      <name>m_pPR</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>b5e23e2dfc7909d28bc84501899b48c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrthoDir</type>
      <name>m_arcDir</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>05c725e9f839b7bd49af8325298202ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrthoDir</type>
      <name>m_oppArcDir</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>042a52e22e10fe55a70e9742dc92f60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_edgeCost</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>f6ad4e9e687e83277eb4e7932bdc8236</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; SListPure&lt; node &gt; &gt;</type>
      <name>m_path</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>8c88aaf1471c5d30420bce3b3241ac0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_pathNode</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>dd95ac77837ee313abd490e43f417f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_edgeToBasicArc</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>59a321281ea34dd463680e90f057cc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_cost</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>cfabc44564726cae69f867c551a96f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; ConstraintEdgeType &gt;</type>
      <name>m_type</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>3f5873402e726fc8e7b7a7f8391a9c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_verticalGen</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>3a7c87c77b00bb0c8d3171cbcac2b90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_verticalArc</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>c29b652d182bbe7bc02e0bbb916374d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_border</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>a065a3f563b2f01f027e112498eed3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_alignmentArc</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>15a6228dd5e80080e30b685c6afda82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; edge &gt;</type>
      <name>m_pathToEdge</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>e93c369bd37de6a6224680195797edbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; edge &gt;</type>
      <name>m_originalEdge</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>7c4da6c851a28cbb3302d5e2c7b4a78f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertPathVertices</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>5b9c826e053013f574ebba6d87f08358</anchor>
      <arglist>(const PlanRep &amp;PG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfsInsertPathVertex</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>17ed92f015deba24c45821d0e3b7e95b</anchor>
      <arglist>(node v, node pathVertex, NodeArray&lt; bool &gt; &amp;visited, const NodeArray&lt; node &gt; &amp;genOpposite)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertBasicArcs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>b16681bf5ba6c0aaa0eec53be16db2a2</anchor>
      <arglist>(const PlanRep &amp;PG)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_align</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>b7c04fead96e1e50bd0e80cb5f3f0571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_superSource</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>323192b2777dd96231b3da5fee7f49c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_superSink</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>ee53d030e09f29682bd05a40c51b477b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; node &gt;</type>
      <name>m_sources</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>2f521dffb5efedb735b87ddbfc38d739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; node &gt;</type>
      <name>m_sinks</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_base.html</anchorfile>
      <anchor>d26ab00c5ed609276daaf57abb3c5096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CompactionConstraintGraph</name>
    <filename>classogdf_1_1_compaction_constraint_graph.html</filename>
    <templarg>ATYPE</templarg>
    <base>ogdf::CompactionConstraintGraphBase</base>
    <member kind="function">
      <type></type>
      <name>CompactionConstraintGraph</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>39004f96499497257223148443569047</anchor>
      <arglist>(const OrthoRep &amp;OR, const PlanRep &amp;PG, OrthoDir arcDir, ATYPE sep, int costGen=1, int costAssoc=1, bool align=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>b010d4e7b86d1d7258d4003ad0e7d894</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>e5e0ea5cc4ffad0e115fc737c7a64173</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>f233236f742e36ac136fac621d7e877b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>32a11eef6842f7f8fececc381fb55085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const OrthoRep &amp;</type>
      <name>getOrthoRep</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>b8b86a6260d80aa9b9d3b5bc97e51d4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; node &gt; &amp;</type>
      <name>nodesIn</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>a9e8bf42d11236ef5afe7131bdbfebca</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>pathNodeOf</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>290fe3e604b05aa79df1f0df7ce58a92</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>ATYPE</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>12c819a2f92ba1612638c1988563b13b</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cost</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>2ba2820f31523bd9d6d6a7872b5bd9c8</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>ConstraintEdgeType</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>bb4d4c74ee7528a3620ce6f258f03e47</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extraNode</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>c2d85e056cd076f1738b80054d3332ce</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>ATYPE</type>
      <name>extraOfs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>d566ca7c72802c3274597df679072be0</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>extraRep</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>c03c56402c1f9b1acba00f919a7222fd</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>centerPriority</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>7f9243265e4ead0632f70a8b3d4ab0cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centerPriority</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>d117bf9f55565587d1cb1c17bb8faaaf</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>ATYPE</type>
      <name>computeTotalCosts</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>dfe60ec63f6bdabd9dc34a62724180fb</anchor>
      <arglist>(const NodeArray&lt; ATYPE &gt; &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVertexSizeArcs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>37eca1597cd48c9d7247df4ab4f1830d</anchor>
      <arglist>(const PlanRep &amp;PG, const NodeArray&lt; ATYPE &gt; &amp;sizeOrig, const RoutingChannel&lt; ATYPE &gt; &amp;rc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVertexSizeArcs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>3620522df93836ed0f6a83d31208b7dd</anchor>
      <arglist>(const PlanRep &amp;PG, const NodeArray&lt; ATYPE &gt; &amp;sizeOrig, const MinimumEdgeDistances&lt; ATYPE &gt; &amp;minDist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVisibilityArcs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>855f6512222f03e86e18caec4e724c17</anchor>
      <arglist>(const PlanRep &amp;PG, ATYPE currentSeparation, const NodeArray&lt; ATYPE &gt; &amp;posDir, const NodeArray&lt; ATYPE &gt; &amp;posOppDir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVisibilityArcs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>9a21e35e135556f7a2c38fe4ce37cdb4</anchor>
      <arglist>(const PlanRep &amp;PG, const NodeArray&lt; ATYPE &gt; &amp;posDir, const NodeArray&lt; ATYPE &gt; &amp;posOrthDir, const MinimumEdgeDistances&lt; ATYPE &gt; &amp;minDist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumSeparation</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>2945e831aa928db8e72c9a15372e1c8e</anchor>
      <arglist>(const PlanRep &amp;PG, const NodeArray&lt; int &gt; coord, const MinimumEdgeDistances&lt; ATYPE &gt; &amp;minDist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>68e1abaeb87ef224ba08e6885b5ee332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>860eb864204ea2f799bfc5a20e2b4cfb</anchor>
      <arglist>(const NodeArray&lt; ATYPE &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>ATYPE</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>5d98660c245efcdb411dbf65245ff4b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areMulti</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>6b62b9ceb7c3f78558f2ed159f714627</anchor>
      <arglist>(edge e1, edge e2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setExtra</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>caf4dbfc45985e4ec664dd72f5b63d72</anchor>
      <arglist>(node v, node rep, ATYPE ofs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeCosts</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>6bb6d51f8827b1995e6c05b41a23d7e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLength</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>df82eefbf246125be11dd093f82c5f9d</anchor>
      <arglist>(ostream &amp;os, edge e) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setBasicArcsZeroLength</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>877dcb89843bd1502443ee0e88c35283</anchor>
      <arglist>(const PlanRep &amp;PG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetGenMergerLengths</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>6ed22bb070fb2ea4782079390792b41f</anchor>
      <arglist>(const PlanRep &amp;PG, adjEntry adjFirst)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setBoundaryCosts</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>c5e460b8bbf1c46ae4927bf1738cdefd</anchor>
      <arglist>(adjEntry cornerDir, adjEntry cornerOppDir)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkSweepLine</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>d49bb8d6ca5e788c56c3caa49a7219fa</anchor>
      <arglist>(const List&lt; Interval &gt; &amp;sweepLine)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ATYPE</type>
      <name>m_sep</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>2826ff37382bec7c89134d74cb0d93ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; ATYPE &gt;</type>
      <name>m_length</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>2eaef4ed58a85b43f07ffc5ed2ef512a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_extraNode</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>cd5eedfd7de5a7e04f8f35f1678f36be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ATYPE &gt;</type>
      <name>m_extraOfs</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>0b0a8b55f3fa217306b21893b1aa6403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_extraRep</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>41b9e809cf7928d765eba06c98d33a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_vertexArcCost</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>f41948354c2ef728d6b032b39129693d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_bungeeCost</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>7c4a2bcf37649c98678f4148d9714772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_MedianArcCost</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>9c66f9f01d97abcb9cdd9b8267682c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_doubleBendCost</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>71af96899c353957f5375755bdb47709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_genToMedian</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>2a1184967dff9c905fd27bf48668fdff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_centerPriority</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>a3502ce7fba730f194725b460bc8ad33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>c_vertexArcFactor</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>4aa4d61c988b0a716acc112cc362b732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>c_bungeeFactor</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>2aff1b79777dab54cfb8f0c08efa4083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>c_doubleBendFactor</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>bd5ad258bb383924a6f4eaaa1fad564b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>c_MedianFactor</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph.html</anchorfile>
      <anchor>8228ae4bda3b65b2dd2b92f5c4d1cd46</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::CompactionConstraintGraph::Interval</class>
    <class kind="class">ogdf::CompactionConstraintGraph::SegmentComparer</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::CompactionConstraintGraph::Interval</name>
    <filename>structogdf_1_1_compaction_constraint_graph_1_1_interval.html</filename>
    <member kind="function">
      <type></type>
      <name>Interval</name>
      <anchorfile>structogdf_1_1_compaction_constraint_graph_1_1_interval.html</anchorfile>
      <anchor>b5c14e49a52c5d28e34caf5d13296926</anchor>
      <arglist>(node v, ATYPE low, ATYPE high)</arglist>
    </member>
    <member kind="variable">
      <type>ATYPE</type>
      <name>m_low</name>
      <anchorfile>structogdf_1_1_compaction_constraint_graph_1_1_interval.html</anchorfile>
      <anchor>146265063be64a0a7132d38763bb0ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ATYPE</type>
      <name>m_high</name>
      <anchorfile>structogdf_1_1_compaction_constraint_graph_1_1_interval.html</anchorfile>
      <anchor>2aa34c475d43022376edd0e28e5dbceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_pathNode</name>
      <anchorfile>structogdf_1_1_compaction_constraint_graph_1_1_interval.html</anchorfile>
      <anchor>cbb8f80ec4137ae958a049ec441a1775</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structogdf_1_1_compaction_constraint_graph_1_1_interval.html</anchorfile>
      <anchor>5f6602c66430278e509d471ea745d097</anchor>
      <arglist>(ostream &amp;os, const Interval &amp;interval)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::CompactionConstraintGraph::SegmentComparer</name>
    <filename>classogdf_1_1_compaction_constraint_graph_1_1_segment_comparer.html</filename>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type></type>
      <name>SegmentComparer</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_1_1_segment_comparer.html</anchorfile>
      <anchor>1dc7bd6f4deedf4210d2c9eb0f330fe9</anchor>
      <arglist>(const NodeArray&lt; ATYPE &gt; &amp;segPos, const NodeArray&lt; int &gt; &amp;secSort)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_1_1_segment_comparer.html</anchorfile>
      <anchor>7a756d0efc0fa5b156a27f70a7cec8bd</anchor>
      <arglist>(const node &amp;x, const node &amp;y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const NodeArray&lt; ATYPE &gt; *</type>
      <name>m_pPos</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_1_1_segment_comparer.html</anchorfile>
      <anchor>38f7281e32e4bdca1a984a902c8b12ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const NodeArray&lt; int &gt; *</type>
      <name>m_pSec</name>
      <anchorfile>classogdf_1_1_compaction_constraint_graph_1_1_segment_comparer.html</anchorfile>
      <anchor>13c0715baa43d4b5c77045d1240599d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EdgeRouter</name>
    <filename>classogdf_1_1_edge_router.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeRouter</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>cd53236adb454abd9d1532addc2e4340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeRouter</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>99e496d6f3956e5dd0f82c2112f20a85</anchor>
      <arglist>(PlanRep &amp;pru, OrthoRep &amp;H, GridLayoutMapped &amp;L, CombinatorialEmbedding &amp;E, RoutingChannel&lt; int &gt; &amp;rou, MinimumEdgeDistances&lt; int &gt; &amp;med, NodeArray&lt; int &gt; &amp;nodewidth, NodeArray&lt; int &gt; &amp;nodeheight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeRouter</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>bd4a657a33df7c173cbad9cc72cd5c7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>75aceabe62e443d2fa8a6f09bfe09d7b</anchor>
      <arglist>(PlanRep &amp;pru, OrthoRep &amp;H, GridLayoutMapped &amp;L, RoutingChannel&lt; int &gt; &amp;rou, bool align=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistances</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>f4807adff71956228e1393441de9c8ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>d603db7b00492490b6b6e13510020ce4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>fb8af7a1a71926ff4266baffa2682c3d</anchor>
      <arglist>(PlanRep &amp;pru, OrthoRep &amp;H, GridLayoutMapped &amp;L, CombinatorialEmbedding &amp;E, RoutingChannel&lt; int &gt; &amp;rou, MinimumEdgeDistances&lt; int &gt; &amp;med, NodeArray&lt; int &gt; &amp;nodewidth, NodeArray&lt; int &gt; &amp;nodeheight, bool align=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>place</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>8ead2bf70900087cc074b06bcdaab6a3</anchor>
      <arglist>(node v, int l_sep, int l_overh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_place</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>1ca05841e2740416cce6ea319e74ae33</anchor>
      <arglist>(node v, NodeInfo &amp;inf, int sep=10.0, int overh=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_routing</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>7e8408ca14bcfefc016da666dcb72838</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_glue_points_y</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>6765941002f95654fa7398dff319ae5e</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_gen_glue_points_y</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>b16e2290e4fdd19d229850d94d0f11ba</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_glue_points_x</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>5ebdaac5656272a5e8efdc40a03f978e</anchor>
      <arglist>(node &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_gen_glue_points_x</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>976482587a881ed06e741ab2036a8cca</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_node_info</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>34292a6b98b9a22c2fbd8e2d05b31f1a</anchor>
      <arglist>(node v, int sep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_node_info</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>add01f29209c7de2656bf443e0d60549</anchor>
      <arglist>(node v, NodeInfo &amp;inf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cp_x</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>2f87fa22542f0ca81a1c6565693bd8e3</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cp_y</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>99fe180bc2a98eb3d6fd5c680a23230a</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gp_x</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>f13136dbb15216b60a68fa17bd19d875</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gp_y</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>5c12f3ab66102dcfaa565421553da3a4</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function">
      <type>bend_type</type>
      <name>abendType</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>0f0ea5f024727ab09e76b01f4762b3b3</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addbends</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>1c38448d5b85a78c73035ac3c4a33913</anchor>
      <arglist>(BendString &amp;bs, const char *s2)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>addRightBend</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>7b66b531edadb9c144b50045c2dead5d</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>addLeftBend</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>4fd25928387b0a96468c71b2cef326f8</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>outEntry</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>c96360d08c764b482e9a15589719a826</anchor>
      <arglist>(NodeInfo &amp;inf, OrthoDir d, int pos)</arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>inEntry</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>a4fe3cc5796661a6649c34fb8db47484</anchor>
      <arglist>(NodeInfo &amp;inf, OrthoDir d, int pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_position</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>8192f62c47302d43ccdac805eea82a17</anchor>
      <arglist>(node v, int x=0, int y=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fix_position</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>216ee7c54c850a4bb812f55f2eef874d</anchor>
      <arglist>(node v, int x=0, int y=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiDelta</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>439fc5daff80fe4912e5083d2c34d6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>0dcee05f0b160cc69d0052717940f43b</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unsplit</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>afbd99974cc1865601e18a6199ad0237</anchor>
      <arglist>(edge e1, edge e2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_corners</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>9d4d530d97891fff154ba390464dc6b9</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>alpha_move</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>477a74e4a0f7fcfbc465ccce892225c0</anchor>
      <arglist>(OrthoDir s_to, OrthoDir s_from, node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>oppositeNode</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>57cae63c2b4794754b502e307dac569a</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>oppositeExpander</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>3e73e948a96fe9984ed0bc751ad7777a</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>beta_move</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>dafa968e9915a126823132903f47e0dd</anchor>
      <arglist>(OrthoDir s_from, OrthoDir s_to, int move_num, node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>compute_move</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>3f13dfcb1dbb8461349cc4d095f03f66</anchor>
      <arglist>(OrthoDir s_from, OrthoDir s_to, int &amp;kflip, node v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlanRep *</type>
      <name>m_prup</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>9cde0f36377e4d28aa46a4b00189472d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridLayoutMapped *</type>
      <name>m_layoutp</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>c0bcff50c77f2006c3b19c754f8f71b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OrthoRep *</type>
      <name>m_orp</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>c88e5e5a7e1b217f4620ccb966603c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CombinatorialEmbedding *</type>
      <name>m_comb</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>ba22ea66e9f4c2fe5cccb179385f36f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingChannel&lt; int &gt; *</type>
      <name>m_rc</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>82c57b18e88192771ac6266aac9e88f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MinimumEdgeDistances&lt; int &gt; *</type>
      <name>m_med</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>894adc90e0b89bc87e106d3d85bc6d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; *</type>
      <name>m_nodewidth</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>e6244dbc8d68f94f19533c2ee2f3176b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt; *</type>
      <name>m_nodeheight</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>4345437d378cedf4c2e909bc3cde0256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeInfo &gt;</type>
      <name>infos</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>2b813604e5ad572c44e8db9dccc70f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_sep</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>7c34cfb6d9478558e9b776b0f314e5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_overh</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>5bf1c3b7970895f0af5952fd6b911449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Cconst</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>08209421ba4f459d577e1376156d2e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_minDelta</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>55d88149567e4e2f99f51f06c94a9d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_newx</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>a72028b8d95beed306859790faa9c7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_newy</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>67db34963d224bb9a28679c056d7dc7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_fixed</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>cbd443e44ed322b92b04936f6e0c268a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>lowe</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>397d436191319c3f9bc88bbba0b5b6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>uppe</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>104add7449012015bf33fec9d6727dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>lefte</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>2e20b6e7982a7fccd24ae2f907d8f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>righte</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>5214e67c488763e9221692a7439fe194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>alowe</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>c75f92a50130760a640f454039ac541f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>auppe</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>e7ac8f411f455bc84e9b002daec6f72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>alefte</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>8464682bd571436a75bcb5450e6558f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>arighte</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>efbe6da4cf91ffa26f94400ec86769dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>m_agp_x</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>84a16fbc077ed1d87b327e5ac2d1c5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>m_agp_y</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>5d59021c36a6c5b88cd61ad4ca9f2b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; node &gt;</type>
      <name>m_cage_point</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>de6e3ced10c5e1be6c2cdfd52b67d7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>m_acp_x</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>53c8675a092bcc466d35d349e74231a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>m_acp_y</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>f65c11958ec41ea43fbbbdbfafb8de72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; bend_type &gt;</type>
      <name>m_abends</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>a8e73a9c31acaef7c673373ab6e072dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bend_type &gt;</type>
      <name>m_oppositeBendType</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>1d3877020ab12fea9fb1ae6918714049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; process_type &gt;</type>
      <name>m_processStatus</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>f6ddfb8e720581d57dd17a770e9ad399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_mergerSon</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>88c942802844491167106177721d617d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; OrthoDir &gt;</type>
      <name>m_mergeDir</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>02287bc18741f99b8c5445bcc04159ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_align</name>
      <anchorfile>classogdf_1_1_edge_router.html</anchorfile>
      <anchor>065b01c74de86d0beae39ee31bf5bd84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FlowCompaction</name>
    <filename>classogdf_1_1_flow_compaction.html</filename>
    <member kind="function">
      <type></type>
      <name>FlowCompaction</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>8960fb859920ac31389c59962a26af0a</anchor>
      <arglist>(int maxImprovementSteps=0, int costGen=1, int costAssoc=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructiveHeuristics</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>d71b3ea3e1670425ad4e507df532fbbb</anchor>
      <arglist>(PlanRep &amp;PG, OrthoRep &amp;OR, const RoutingChannel&lt; int &gt; &amp;rc, GridLayoutMapped &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>improvementHeuristics</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>291974432a609f9eb780fc56f380bb8b</anchor>
      <arglist>(PlanRep &amp;PG, OrthoRep &amp;OR, const RoutingChannel&lt; int &gt; &amp;rc, int currentSeparation, GridLayoutMapped &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>improvementHeuristics</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>65b017bc4b127a76c92583358f7d6ce2</anchor>
      <arglist>(PlanRep &amp;PG, OrthoRep &amp;OR, MinimumEdgeDistances&lt; int &gt; &amp;minDist, GridLayoutMapped &amp;drawing, int originalSeparation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxImprovementSteps</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>c313f27c4289447772ec8b4edb8addc9</anchor>
      <arglist>(int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxImprovementSteps</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>f1cd6c4064280014bc34c98b3557326c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costGen</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>7d95c27b8a3b83a532bfc4fe26f67d5d</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>costGen</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>7f145cbb771cbff8f5460d4e5e4dc5a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costAssoc</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>027fb6af48bdca07001d064ce24fdb69</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>costAssoc</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>62963b6f63d664b7117916f9eee517ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalingSteps</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>970d612ef1dc77ad13ac1bf5885033b0</anchor>
      <arglist>(int sc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>5488d5d0046db3f21d1a0cc2c3af4ccc</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeCoords</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>e6ae925b2b39e9bb150a64c6edab8ec9</anchor>
      <arglist>(CompactionConstraintGraph&lt; int &gt; &amp;D, NodeArray&lt; int &gt; &amp;pos, bool fixZeroLength=false, bool fixVertexSize=false, bool improvementHeuristics=false, bool onlyGen=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfsAssignPos</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>038e35e3dc88c5f25cc1e2fb9c759ce8</anchor>
      <arglist>(NodeArray&lt; bool &gt; &amp;visited, NodeArray&lt; int &gt; &amp;pos, node v, int x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxImprovementSteps</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>7ac9218d9d242b8b84a7758622835de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_costGen</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>cab3a45f6df79c4c4a6e3ed70f120a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_costAssoc</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>64ec0aa6de85c2681f13b9e7bfcbe6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_cageExpense</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>398cc9962df59c10e1516e09a46454e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numGenSteps</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>7515789442a316cd1a4a0b98ff290a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_scalingSteps</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>92e10ed8a6d47fbb20b336c62accdbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_align</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>4717c11396df322c00109807fd6a9b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_dualEdge</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>11b229d394b7a5d450974f6c80935f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_flow</name>
      <anchorfile>classogdf_1_1_flow_compaction.html</anchorfile>
      <anchor>7f6b5aafc469136112f2097ad6cc9009</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::LongestPathCompaction</name>
    <filename>classogdf_1_1_longest_path_compaction.html</filename>
    <member kind="function">
      <type></type>
      <name>LongestPathCompaction</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>e1ad053efe08e030a94023c4f2d963fb</anchor>
      <arglist>(bool tighten=true, int maxImprovementSteps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructiveHeuristics</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>94e95e87eef267b55414417b1981fbad</anchor>
      <arglist>(PlanRepUML &amp;PG, OrthoRep &amp;OR, const RoutingChannel&lt; int &gt; &amp;rc, GridLayoutMapped &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>improvementHeuristics</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>933d1509819019198db3d72526ae6a9b</anchor>
      <arglist>(PlanRepUML &amp;PG, OrthoRep &amp;OR, const RoutingChannel&lt; int &gt; &amp;rc, GridLayoutMapped &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tighten</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>b6b4a423c9e8204f2a21b1fe5bbc0c0a</anchor>
      <arglist>(bool select)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tighten</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>7b563fbb82e33928c6a980d62b8dd6d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxImprovementSteps</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>062d6af13d16d0244e6a445b0f5f5657</anchor>
      <arglist>(int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxImprovementSteps</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>c8c47bdd2494a9d42116ba18a34ad861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeCoords</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>c93ad8d23f148552ee66b6765b3ad0b9</anchor>
      <arglist>(const CompactionConstraintGraph&lt; int &gt; &amp;D, NodeArray&lt; int &gt; &amp;pos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyLongestPaths</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>372f79840964a7e42a739b1c94b949fc</anchor>
      <arglist>(const CompactionConstraintGraph&lt; int &gt; &amp;D, NodeArray&lt; int &gt; &amp;pos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>moveComponents</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>7099319d3f9cbdb9cc05484ecc894b43</anchor>
      <arglist>(const CompactionConstraintGraph&lt; int &gt; &amp;D, NodeArray&lt; int &gt; &amp;pos)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_tighten</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>771b4c162ef904a27c96023645d34fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxImprovementSteps</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>607bf38d6c841b4c0bdba730ff0eac9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; node &gt;</type>
      <name>m_pseudoSources</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>42ad516180a7d95c14efd51ebc111256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_component</name>
      <anchorfile>classogdf_1_1_longest_path_compaction.html</anchorfile>
      <anchor>8a321df574cf7481d70b6f5e04f79b61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MinimumEdgeDistances</name>
    <filename>classogdf_1_1_minimum_edge_distances.html</filename>
    <templarg>ATYPE</templarg>
    <member kind="function">
      <type></type>
      <name>MinimumEdgeDistances</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>2a77b5fbbd5df538bbcfbc2527db3e30</anchor>
      <arglist>(const Graph &amp;G, ATYPE sep)</arglist>
    </member>
    <member kind="function">
      <type>const ATYPE &amp;</type>
      <name>delta</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>42600628db89a047d0911b538d2ee9c4</anchor>
      <arglist>(node v, OrthoDir s, int i) const </arglist>
    </member>
    <member kind="function">
      <type>ATYPE &amp;</type>
      <name>delta</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>e8f0b243664495bb4fdf8c82200decbc</anchor>
      <arglist>(node v, OrthoDir s, int i)</arglist>
    </member>
    <member kind="function">
      <type>const ATYPE &amp;</type>
      <name>epsilon</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>b8872ab0624a62675b38ca6f6bc34085</anchor>
      <arglist>(node v, OrthoDir s, int i) const </arglist>
    </member>
    <member kind="function">
      <type>ATYPE &amp;</type>
      <name>epsilon</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>41e4e1a15573d7b153419515815ddbb8</anchor>
      <arglist>(node v, OrthoDir s, int i)</arglist>
    </member>
    <member kind="function">
      <type>ATYPE</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>ce368905e8344654697de478e38f3a5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>a074c0d321753c5040fe3e2c0ca30ecc</anchor>
      <arglist>(ATYPE sep)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; InfoType &gt;</type>
      <name>m_delta</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>85501062f2917cdf05f763ca2febe4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; InfoType &gt;</type>
      <name>m_epsilon</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>399518b34baa0d7feaa2d48762109ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ATYPE</type>
      <name>m_sep</name>
      <anchorfile>classogdf_1_1_minimum_edge_distances.html</anchorfile>
      <anchor>28785a9d1c6f97d109373eaaf0710d54</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::MinimumEdgeDistances::InfoType</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::MinimumEdgeDistances::InfoType</name>
    <filename>structogdf_1_1_minimum_edge_distances_1_1_info_type.html</filename>
    <member kind="variable">
      <type>ATYPE</type>
      <name>info</name>
      <anchorfile>structogdf_1_1_minimum_edge_distances_1_1_info_type.html</anchorfile>
      <anchor>4d71141dcddbb4069de63476563a8410</anchor>
      <arglist>[4][2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::OrthoLayout</name>
    <filename>classogdf_1_1_ortho_layout.html</filename>
    <base>ogdf::LayoutPlanRepModule</base>
    <member kind="function">
      <type></type>
      <name>OrthoLayout</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>ef36ff38575fc9e356cfef5d228cefa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>7f792e70667c3b6b5d1565e13e005f99</anchor>
      <arglist>(PlanRepUML &amp;PG, adjEntry adjExternal, Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>46d303026f1cd5e7ad8ccfb8e000d6c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separation</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>bbcce39a55cccedb2482aae0acac7ee8</anchor>
      <arglist>(double sep)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cOverhang</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>0b623efb5a6ca1ac68e3d9fbdf877d56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cOverhang</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>a392877cb21e09b955b0c50c09c4644c</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>margin</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>4eafcf97e21a44aee7abe64791090991</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>margin</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>8540d0c384a8a6fcb3c633c80f31a2be</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>OrthoDir</type>
      <name>preferedDir</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>3737ae2ea11f8babbd17a11e2e832160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preferedDir</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>207e87b60b73b8ef35a83cceba5f8159</anchor>
      <arglist>(OrthoDir dir)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>costAssoc</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>f246962ed93050437fc9d96cda7ebd7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costAssoc</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>38aa810fb12311745f1afafe73a0f32a</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>costGen</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>3788da823977a302b614ca3428bffe9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>costGen</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>bfeeca43a209ea82a4113018e3fe472d</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optionProfile</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>29c374e900f22330c6ada01212008dd7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>eabd504e912bfe3df6f3e14c1b859c5c</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaling</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>c0fb5c94b52f5eee2e90710745872855</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptions</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>f0654d29cbde7ffe131b6c55c8d6d734</anchor>
      <arglist>(int optionField)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptions</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>dbcd575934687694351c40311b65398b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>classifyEdges</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>61343ddb9dc83b3e2e0a1fcc6501b660</anchor>
      <arglist>(PlanRepUML &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>310b1ae4fc1ba4e6727efa1dfa01ff54</anchor>
      <arglist>(const PlanRepUML &amp;PG, Layout &amp;drawing)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_separation</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>9664e0741ec8fb29a9587ca12d10b2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_cOverhang</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>fe3f5bdb8880bba69869d406f6daeb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_margin</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>6d37c633c0a8e6ec4a04203b1d179cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OrthoDir</type>
      <name>m_preferedDir</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>6ed4fc3819eb06c7916492ad65614043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_optionProfile</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>36311c16e1c11a104a329d6bc4f76be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_costAssoc</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>678230e34ec394f3be0be667c579f4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_costGen</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>0e9efc10c72b0594058b7962002a670f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_align</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>3b6f578b82a163c1fd4c80745b71a801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_useScalingCompaction</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>eb8f2d638afee10598a5ad1e68ddebbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_scalingSteps</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>b6ee17c18de2be4867817f9e5ef58e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_orthoStyle</name>
      <anchorfile>classogdf_1_1_ortho_layout.html</anchorfile>
      <anchor>296b7276ac1730db987bb4e71bc0b37b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BendString</name>
    <filename>classogdf_1_1_bend_string.html</filename>
    <member kind="function">
      <type></type>
      <name>BendString</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>713d24538dd1ddb567d1bb3428af213d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BendString</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>e0b04ea27412d1fa5e324762fc9554ca</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BendString</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>b7efc8b4f66c44e27c4cd6587747ffdf</anchor>
      <arglist>(char c, size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BendString</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>e062bebcae485795bdd5a49aa48a18dc</anchor>
      <arglist>(const BendString &amp;bs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BendString</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>2ae607ea4f3491aab314e909e882ce8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>199a83b9682fb580bdb82f7947743ebe</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>1f063f6c375d391f57da5ae2c1a26315</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>18663bb06b003d4265a01c744282f4d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toString</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>d0dac762c4a6a2eb17af83ef3b325c1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>d95a896dead4de2c1afc140cf31325cc</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>8e8be75848535c56b047db02f5de7bf9</anchor>
      <arglist>(char c, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>9c5cfb9179d44ef5250fd31b90c16e43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BendString &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>855b73770bf09b52bbf90777aabca375</anchor>
      <arglist>(const BendString &amp;bs)</arglist>
    </member>
    <member kind="function">
      <type>BendString &amp;</type>
      <name>operator+=</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>067244b5552c8d60de829ed1231528f4</anchor>
      <arglist>(const BendString &amp;bs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>6301930128025a1124783142f1b8e52a</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>e21b998e47f26ccdcb68d6bf5f1a9832</anchor>
      <arglist>(char c, size_t n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>b5ef4fbfcd3e4ba14bbb8eb823f7cc80</anchor>
      <arglist>(const BendString &amp;bs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>m_pBend</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>c41f888139ebeb174462924fc776f34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>m_len</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>4cb738f1cfa2ff118b787e1c570fa745</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_bend_string.html</anchorfile>
      <anchor>240178b11a124cf3be7693c16cae815f</anchor>
      <arglist>(ostream &amp;os, const BendString &amp;bs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::OrthoRep</name>
    <filename>classogdf_1_1_ortho_rep.html</filename>
    <member kind="function">
      <type>adjEntry</type>
      <name>externalAdjEntry</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>c8faa9b1fbdc91b6b65b53f62ac4e6d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>alignAdjEntry</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>4a73bc65748c6759d9e26101b88137ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrthoRep</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>75d3ce4b868a222c47f18fdf24342555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrthoRep</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>dc4ec8d833e46db53d14a109a0c0df97</anchor>
      <arglist>(CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OrthoRep</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>c1de6ffe60f57c23acff92773ab49021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>4f081311d2669b4686df9aea1325821d</anchor>
      <arglist>(CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CombinatorialEmbedding &amp;</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>2bf05f8964ab15b50ee140a8652a1011</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Graph &amp;</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>1f2acbcc6ee89e5ec44eefad2480c5c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>angle</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>f065ed0c05eb0e7abc46c5c6d34d61b3</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>angle</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>073380e37501ab0c2fa239d415d43477</anchor>
      <arglist>(adjEntry adj)</arglist>
    </member>
    <member kind="function">
      <type>const BendString &amp;</type>
      <name>bend</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>4a7eaf9bb368a0f4d0a97dfae0fd9061</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>BendString &amp;</type>
      <name>bend</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>85506cb690ab10f3c010959869e98b7f</anchor>
      <arglist>(adjEntry adj)</arglist>
    </member>
    <member kind="function">
      <type>OrthoDir</type>
      <name>direction</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>a4e7866ff63f94b44b2a2f9c30071227</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function">
      <type>const VertexInfoUML *</type>
      <name>cageInfo</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>c3f390aed0dba28413854db5bd5ad39a</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>VertexInfoUML *</type>
      <name>cageInfo</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>26212a29c5456c8ddc513a63a3002605</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>a6d8c52ac91e3f59e98e3836acc76026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNormalized</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>2fa75c16e2b47c8b16f59ed45d2fd6cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dissect</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>6b7e54ed802f48ffeaa5bd207ec433ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dissect2</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>2259d0be115b43540ca6c14b43f4b41b</anchor>
      <arglist>(PlanRepUML *PG=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undissect</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>2d416f1681fbd30e47bb0e84bf5b35a1</anchor>
      <arglist>(bool align=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientate</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>63791d63914aadf6eb59259130a09b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientate</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>3e224fdb75273dea48bb1cfd7c99cbe1</anchor>
      <arglist>(const PlanRep &amp;PG, OrthoDir preferedDir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientate</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>66608471f9ca0bfd079ef2a39aa770df</anchor>
      <arglist>(adjEntry adj, OrthoDir dir)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrientated</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>be6545b4e1061093973ebc7f58347e04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>8d0b4d16685058128cbac13c2ce225cc</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCageInfoUML</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>f15c433d3bcf0ca51b221ab494da71c1</anchor>
      <arglist>(const PlanRep &amp;PG)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>0f234352602715e4d621671aec11dc53</anchor>
      <arglist>(String &amp;error)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>flip</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>d86c6c4733608ff58d93fdeafbdf49a4</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OrthoDir</type>
      <name>oppDir</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>07497287d7bc08b7365a969adab9a34d</anchor>
      <arglist>(OrthoDir d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OrthoDir</type>
      <name>nextDir</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>de3a6448a7d6f1bd11467baf0c5cab29</anchor>
      <arglist>(OrthoDir d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OrthoDir</type>
      <name>prevDir</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>918fec617b7964b8d2608edd15bc79e4</anchor>
      <arglist>(OrthoDir d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>orientateFace</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>dfaebc4ab6864b0685a07b6a64810c2a</anchor>
      <arglist>(adjEntry adj, OrthoDir dir)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>freeCageInfoUML</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>2e7ee1b4534db937da9dda505ad673a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CombinatorialEmbedding *</type>
      <name>m_pE</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>e0ab57539162b0448c5ae2e7e8896e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; int &gt;</type>
      <name>m_angle</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>8cfa36f6751b367b47268186c63c35ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; BendString &gt;</type>
      <name>m_bends</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>f2379a234157418cc6431669b167c213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; OrthoDir &gt;</type>
      <name>m_dir</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>0a306610345d1c71f8bbf3e7023422f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; VertexInfoUML * &gt;</type>
      <name>m_umlCageInfo</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>e7f19e80df8020c3a7cc0615fca7f7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_dissectionEdge</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>e1429ccd81f0fee2ff66ebf03f13b2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_alignmentEdge</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>57318fa1df0d7e8bbed84fb17681b771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StackPure&lt; node &gt;</type>
      <name>m_splitNodes</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>79e5b07df7a899ed0d1fbf77c40a6f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_adjExternal</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>9c16090fae3f4110d6288320ba8605c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_adjAlign</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>ff6c1891d2f1a1f7640024ead5884021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_preprocess</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>337bb7c7d1b1ecb4be92a7590f629766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_pattern2</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>823c61f0abfc6afe4ccea205814274e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classogdf_1_1_ortho_rep.html</anchorfile>
      <anchor>a5cb6d4e385a0acfb70911876cb08aa5</anchor>
      <arglist>(ostream &amp;os, const OrthoRep &amp;op)</arglist>
    </member>
    <class kind="struct">ogdf::OrthoRep::SideInfoUML</class>
    <class kind="struct">ogdf::OrthoRep::VertexInfoUML</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::OrthoRep::SideInfoUML</name>
    <filename>structogdf_1_1_ortho_rep_1_1_side_info_u_m_l.html</filename>
    <member kind="function">
      <type></type>
      <name>SideInfoUML</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_side_info_u_m_l.html</anchorfile>
      <anchor>042c07433f22b4b76a5bd03b4e372a79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalAttached</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_side_info_u_m_l.html</anchorfile>
      <anchor>fee76f19643f720cd569b54419af6ec7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>adjEntry</type>
      <name>m_adjGen</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_side_info_u_m_l.html</anchorfile>
      <anchor>779cd5ee60c8c6e69d6fbc1d369361f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_nAttached</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_side_info_u_m_l.html</anchorfile>
      <anchor>3c14b3ce48594339e4fd6306a857381c</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_side_info_u_m_l.html</anchorfile>
      <anchor>bc8c36c229c6b3775819299bf8c7a6ac</anchor>
      <arglist>(ostream &amp;os, const SideInfoUML &amp;si)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::OrthoRep::VertexInfoUML</name>
    <filename>structogdf_1_1_ortho_rep_1_1_vertex_info_u_m_l.html</filename>
    <member kind="function">
      <type></type>
      <name>VertexInfoUML</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_vertex_info_u_m_l.html</anchorfile>
      <anchor>fde75e9dd1cf261959da475c377abae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SideInfoUML</type>
      <name>m_side</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_vertex_info_u_m_l.html</anchorfile>
      <anchor>2b004abef0e272119336fd0d1888f657</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>adjEntry</type>
      <name>m_corner</name>
      <anchorfile>structogdf_1_1_ortho_rep_1_1_vertex_info_u_m_l.html</anchorfile>
      <anchor>a9d9cceb21b14664eec800f9e0afc4bc</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::OrthoShaper</name>
    <filename>classogdf_1_1_ortho_shaper.html</filename>
    <member kind="enumeration">
      <name>n_type</name>
      <anchor>d1dbc86ffa2b5a015b8d6e8caad0de4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>low</name>
      <anchor>d1dbc86ffa2b5a015b8d6e8caad0de4bc5bf5f9db206c1b9b34dd6f77eb1f548</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>high</name>
      <anchor>d1dbc86ffa2b5a015b8d6e8caad0de4bf9b1653ecc7ab1744b6811d919c24840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>inner</name>
      <anchor>d1dbc86ffa2b5a015b8d6e8caad0de4bebda5d33a7002316f74b82bd54d43afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>outer</name>
      <anchor>d1dbc86ffa2b5a015b8d6e8caad0de4b91a3a7b9a208a4873ca4bd40c06a1e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrthoShaper</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>909955aafd79f7f7d6abc093c9b1df79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OrthoShaper</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>e694f9226148ad69157f5da54bec5cb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>0d9a318f95c20e8892fea3e7144b76fe</anchor>
      <arglist>(PlanRepUML &amp;PG, CombinatorialEmbedding &amp;E, OrthoRep &amp;OR, int startBoundBendsPerEdge=0, bool fourPlanar=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultSettings</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>bd03c590644566d4a476962c7777822a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>distributeEdges</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>bb37e6ebab63899f1ee3c2f7d98470f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distributeEdges</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>b593a829b086a3721b4351bf5479f3ed</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>multiAlign</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>80012b62364183397836f1e305b98513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiAlign</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>debeff4d6627940766b6c920d962de67</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>traditional</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>95a0dbe04992fea85551bf456a760d90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traditional</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>701c80e9b4692102a9c0fb413f4026de</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixDegreeFourAngles</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>28a8af22e862d862d313485b968e62f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixDegreeFourAngles</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>61a88bcd46dfad8a02ad8573d4ff04ab</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>78fd0d0c80c4e21691fb6c26c5fdc3b2</anchor>
      <arglist>(bool al)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>align</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>9c589bfbebfc3ad1eb62096312cbe1f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setAngleBound</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>1717af1261ccef0febe1fb8cec65a8b8</anchor>
      <arglist>(edge netArc, int angle, EdgeArray&lt; int &gt; &amp;lowB, EdgeArray&lt; int &gt; &amp;upB, EdgeArray&lt; edge &gt; &amp;aTwin, bool maxBound=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_distributeEdges</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>e68bc4b9c113ad63da62d2a68fba8a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_fourPlanar</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>59d45244e59f1e09146dcdeaa717c5aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_allowLowZero</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>16227be85b060249553d83697eacf4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_multiAlign</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>af3483670e7261f4492f2143dae992c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_deg4free</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>398262d74c2a0af7dcaff90cd1925eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_traditional</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>ccf0ae64b5755e7813cd939a4be29571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_align</name>
      <anchorfile>classogdf_1_1_ortho_shaper.html</anchorfile>
      <anchor>1f8a42593769ce167385099ab889047f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::TileToRowsCCPacker</name>
    <filename>classogdf_1_1_tile_to_rows_c_c_packer.html</filename>
    <base>ogdf::CCLayoutPackModule</base>
    <member kind="function">
      <type></type>
      <name>TileToRowsCCPacker</name>
      <anchorfile>classogdf_1_1_tile_to_rows_c_c_packer.html</anchorfile>
      <anchor>9e1edcf050168a35f21324319b7cab1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TileToRowsCCPacker</name>
      <anchorfile>classogdf_1_1_tile_to_rows_c_c_packer.html</anchorfile>
      <anchor>1a77a686c516ffdc0e643e6517f26b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_tile_to_rows_c_c_packer.html</anchorfile>
      <anchor>011a12a558fade9994b215c40ae32700</anchor>
      <arglist>(Array&lt; DPoint &gt; &amp;box, Array&lt; DPoint &gt; &amp;offset, double pageRatio=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_tile_to_rows_c_c_packer.html</anchorfile>
      <anchor>0e866aa8fe9d9ec0f57633a96c29a3fe</anchor>
      <arglist>(Array&lt; IPoint &gt; &amp;box, Array&lt; IPoint &gt; &amp;offset, double pageRatio=1.0)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>callGeneric</name>
      <anchorfile>classogdf_1_1_tile_to_rows_c_c_packer.html</anchorfile>
      <anchor>a792bdbe381010cfcf3c6a7f72fd5830</anchor>
      <arglist>(Array&lt; POINT &gt; &amp;box, Array&lt; POINT &gt; &amp;offset, double pageRatio)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>findBestRow</name>
      <anchorfile>classogdf_1_1_tile_to_rows_c_c_packer.html</anchorfile>
      <anchor>24b702eae067a534b39eac476b4f5c87</anchor>
      <arglist>(Array&lt; RowInfo&lt; POINT &gt; &gt; &amp;row, int nRows, double pageRatio, const POINT &amp;rect)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BoyerMyrvold</name>
    <filename>classogdf_1_1_boyer_myrvold.html</filename>
    <member kind="function">
      <type></type>
      <name>BoyerMyrvold</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>0cb07ecec9f7b56f9e37a3b691c4aa36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoyerMyrvold</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>6f8787909fe42a1de4626acdbcb571df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfStructures</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>d6c44a75d15a892902afefacc58767b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planarDestructive</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>9f03fe84f0a080c8a21147be00090720</anchor>
      <arglist>(Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planar</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>7f3baecfbd1c307f6883f151d18ce866</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>22a8a438497960d41caadbd5397c9e5a</anchor>
      <arglist>(const KuratowskiWrapper &amp;source, KuratowskiSubdivision &amp;target, NodeArray&lt; int &gt; &amp;count, EdgeArray&lt; int &gt; &amp;countEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>eb03dd960f2e8dfc9a116f81f5533d4b</anchor>
      <arglist>(const SList&lt; KuratowskiWrapper &gt; &amp;sourceList, SList&lt; KuratowskiSubdivision &gt; &amp;targetList, const Graph &amp;g, const bool onlyDifferent=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planarEmbedDestructive</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>0bc3916df0e7b6d129398ccd586e088b</anchor>
      <arglist>(Graph &amp;g, SList&lt; KuratowskiWrapper &gt; &amp;output, int embeddingGrade=BoyerMyrvoldPlanar::doNotFind, bool bundles=false, bool limitStructures=false, bool randomDFSTree=false, bool avoidE2Minors=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planarEmbed</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>6f92608f9d583d07714c6c51fa1debf4</anchor>
      <arglist>(Graph &amp;g, SList&lt; KuratowskiWrapper &gt; &amp;list, int embeddingGrade=BoyerMyrvoldPlanar::doNotFind, bool bundles=false, bool limitStructures=false, bool randomDFSTree=false, bool avoidE2Minors=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planarEmbed</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>b1fc8649d88eaf0af9675604d983bae6</anchor>
      <arglist>(const Graph &amp;g, GraphCopySimple &amp;h, SList&lt; KuratowskiWrapper &gt; &amp;list, int embeddingGrade=BoyerMyrvoldPlanar::doNotFind, bool bundles=false, bool limitStructures=false, bool randomDFSTree=false, bool avoidE2Minors=true)</arglist>
    </member>
    <member kind="function">
      <type>BoyerMyrvoldPlanar &amp;</type>
      <name>getBoyerMyrvoldPlanar</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>259c201ca41c6a3a2aeceb616a9a0bb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>4a18b4b169b8a15f48b1a9c99b1f1101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>euler</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>c7efa1ab8fb7c2febe40b20dbb7ffd90</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoyerMyrvoldPlanar *</type>
      <name>pBMP</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>842e998f6e26860280444c2d282a4aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nOfStructures</name>
      <anchorfile>classogdf_1_1_boyer_myrvold.html</anchorfile>
      <anchor>749b3172353091385e39e5600f2ab6a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMaxFace</name>
    <filename>classogdf_1_1_embedder_max_face.html</filename>
    <base>ogdf::EmbedderModule</base>
    <member kind="function">
      <type></type>
      <name>EmbedderMaxFace</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>a7d6389b0881e2aea8e3218956c7aafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EmbedderMaxFace</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>ff48b1c5b937143201761618185acfca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>f4fdca8dc9cffdbc2541b5b1cfd52300</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBlockGraphs</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>1d803e68032b7d5a5b021fea68065367</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>constraintMaxFace</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>58d0a109b7470cb19c7995e382b35e8c</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>maximumFaceRec</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>1b917a3c43c4fc292529cd33121df8d3</anchor>
      <arglist>(const node &amp;bT, node &amp;bT_opt, int &amp;ell_opt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>15561d704d13ea6ba120ff9fc28588ac</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>66ebf53a039c0ccdc33bbe940b3ec374</anchor>
      <arglist>(const node &amp;bT, const node &amp;cT, ListIterator&lt; adjEntry &gt; &amp;after)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCTree *</type>
      <name>pBCTree</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>bc608b968de0dd6fd9b283157cedb604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry *</type>
      <name>pAdjExternal</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>9c2b8d72e8d079098dfd85d628d8eb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Graph &gt;</type>
      <name>blockG</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>3864dd71a4a1b43d7dcfa3655fff941b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nH_to_nBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>b0080b7a3da5c110784ab514c5abe28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eH_to_eBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>022824da2559139842189ea27365508c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nBlockEmbedding_to_nH</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>d7dc5754908034fd822dd2436626b52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eBlockEmbedding_to_eH</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>c4ee2ecbbe796f0aa230bf9ff076b92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; int &gt; &gt;</type>
      <name>nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>6a5f6a4d30c954e48fc5cc613839eef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; int &gt; &gt;</type>
      <name>cstrLength</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>e2079eafa4de1aea39f0e39331020d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; adjEntry &gt; &gt;</type>
      <name>newOrder</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>3556dc29ceb49f08d6cc268ad5319168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>treeNodeTreated</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>8f5d4d245c085b0623cae750bc06b0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; StaticSPQRTree * &gt;</type>
      <name>spqrTrees</name>
      <anchorfile>classogdf_1_1_embedder_max_face.html</anchorfile>
      <anchor>f18f9dc23ffa37598c29372b3f6925e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMaxFaceLayers</name>
    <filename>classogdf_1_1_embedder_max_face_layers.html</filename>
    <base>ogdf::EmbedderModule</base>
    <member kind="function">
      <type></type>
      <name>EmbedderMaxFaceLayers</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>cbc140bb050aab2a03b8c87a81688bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EmbedderMaxFaceLayers</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>17d709fcb99a3c1239a73aa8d683a871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>d79d985ade3a834ec1a2ca094fa59f3c</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBlockGraphs</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>e1be461dba69375c3f92d3c12b141776</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>constraintMaxFace</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>eb118fdb8b427cbab5c9206abf05a1e0</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>maximumFaceRec</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>f001e998186193f163f490ade168848d</anchor>
      <arglist>(const node &amp;bT, node &amp;bT_opt, int &amp;ell_opt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>aeafb173e52300e0f27605ece255c2e4</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>62cb820dc5542fcefdade4550e27e37d</anchor>
      <arglist>(const node &amp;bT, const node &amp;cT, ListIterator&lt; adjEntry &gt; &amp;after)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCTree *</type>
      <name>pBCTree</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>4020d3d95732a57a51c0fac63cc003c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry *</type>
      <name>pAdjExternal</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>7a4e7d8f25f708adf06b8328317ead99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Graph &gt;</type>
      <name>blockG</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>6553f4c589f01c760ee64d3135f99400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nH_to_nBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>bbeaacf5e79ebe6e4d32b152af63c36a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eH_to_eBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>5fe58f674463305bcff88f5777fdcdf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nBlockEmbedding_to_nH</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>0a870fbbc533421062838dcfe219a212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eBlockEmbedding_to_eH</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>86d0f88b049a6b67f4d4cd934e8e67eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; int &gt; &gt;</type>
      <name>nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>5e23c345e7e809efa39b18e4a30fd4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; int &gt; &gt;</type>
      <name>cstrLength</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>741594b763ef158eb3d037379deb4acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; adjEntry &gt; &gt;</type>
      <name>newOrder</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>0751269fac2c43ca0edb641fdfec6cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>treeNodeTreated</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>e07fcdf438831affb2fdc49106c47589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; StaticSPQRTree * &gt;</type>
      <name>spqrTrees</name>
      <anchorfile>classogdf_1_1_embedder_max_face_layers.html</anchorfile>
      <anchor>177cd48a96600c89769c19ad4c652e6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMinDepth</name>
    <filename>classogdf_1_1_embedder_min_depth.html</filename>
    <base>ogdf::EmbedderModule</base>
    <member kind="function">
      <type></type>
      <name>EmbedderMinDepth</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>6ebd8c0d44cbae43827c6dfbd503bf68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>b26bfb3c214cb8ca5e49e2c374441696</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBlockGraphs</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>55b9f1200ee7f8dcbad236a08394457d</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>bottomUpTraversal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>4cb0ce0e2e5f38eba2b2fa2d11461468</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>topDownTraversal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>8b01b39f7fb50f1f4a626ae60eeaddaf</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>067c6d5faf4f6b254f1d5728bcd92587</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>14ea427c473d30128890ef80dc28f436</anchor>
      <arglist>(const node &amp;bT, const node &amp;cT, ListIterator&lt; adjEntry &gt; &amp;after)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCTree *</type>
      <name>pBCTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>39ea00aad463c5734b7eea7b132fcb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry *</type>
      <name>pAdjExternal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>7ec23fbbcc48edbaa2cee276eea523bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Graph &gt;</type>
      <name>blockG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>8a203a81778940531035d076e72345b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nH_to_nBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>3e14f5b0725952358f36e94e935c688e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eH_to_eBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>140d6794d953283be866686d55f91bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nBlockEmbedding_to_nH</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>6672c68dd920c83ec876d7eb6e71af56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eBlockEmbedding_to_eH</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>44fda8901ff3982e01964c2727e110a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; int &gt; &gt;</type>
      <name>nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>e126c4759eaae83937fb6d73e3a737d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>minDepth</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>cf3727ff1a2a13c4261fac809f92813e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_cB</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>0227ebd4698569f76f66bca8482525f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>M_B</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>9c2eb38650f24fbd519b09356b72dca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>M2</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>9891845f0fb8043c23d5b3c747c11d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; adjEntry &gt; &gt;</type>
      <name>newOrder</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>e33beab60d68a08fe8800606dbcb0ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>treeNodeTreated</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>618b1bf4961c90aa3e7c1d98c89f0ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; StaticSPQRTree * &gt;</type>
      <name>spqrTrees</name>
      <anchorfile>classogdf_1_1_embedder_min_depth.html</anchorfile>
      <anchor>ab76fac1262afd5810cc2d1dcff075d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMinDepthMaxFace</name>
    <filename>classogdf_1_1_embedder_min_depth_max_face.html</filename>
    <base>ogdf::EmbedderModule</base>
    <member kind="function">
      <type></type>
      <name>EmbedderMinDepthMaxFace</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>9d3051443fa07d070f96a4d716f6ff9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>6971037f76b111f23e5da3c92eb764f2</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>md_bottomUpTraversal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>86acf15e166827d71f54338579f02c14</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>md_topDownTraversal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>e76761921be2d5499116c7f49ddbade7</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>mf_constraintMaxFace</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>08de42a40e0195305f32b2c18df9741d</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>mf_maximumFaceRec</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>33568cb25d7a744a8cce229f8b1bad92</anchor>
      <arglist>(const node &amp;bT, node &amp;bT_opt, int &amp;ell_opt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>e019b70f9872b3f81b12158d0174f6d5</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>6b46333bbc0ea33486943c29bf7cbbbb</anchor>
      <arglist>(const node &amp;bT, const node &amp;cT, ListIterator&lt; adjEntry &gt; &amp;after)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCTree *</type>
      <name>pBCTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>3c2f090d3d08ccc51e82910af2b2a96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry *</type>
      <name>pAdjExternal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>4c99997942bb082408306fdbd8a08358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>md_nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>6957d8a7d963e6333cce80a6baca600c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>md_minDepth</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>577be31264d00dc775fb3d4e145f9618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>md_m_cB</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>69fa59fb7438ff31c687ed5d07293511</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>md_M_B</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>d0462f864ff1f1402eb3846b12dbe438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>md_M2</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>41ca5b3f12f9befe55b593f6261a2c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>mf_nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>28547782f46612a49b83567d8b2a1189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>mf_cstrLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>8b0c3b337e10ee4c14f83d0c405c7077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>mf_maxFaceSize</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>d0bfed989fac77b0044345053eca8485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; mdmf_la &gt;</type>
      <name>mdmf_nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>6dec603ade7ce25a9fa67b4bb85e300c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; mdmf_la &gt;</type>
      <name>mdmf_edgeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>73572c7e8e9bcefd8c18b34cea1e2d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; adjEntry &gt; &gt;</type>
      <name>newOrder</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>1c5f9d09036af3c0451db2b7e600f259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>treeNodeTreated</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face.html</anchorfile>
      <anchor>60052d3c982385f1eb36e64d16062f61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMinDepthMaxFaceLayers</name>
    <filename>classogdf_1_1_embedder_min_depth_max_face_layers.html</filename>
    <base>ogdf::EmbedderModule</base>
    <member kind="function">
      <type></type>
      <name>EmbedderMinDepthMaxFaceLayers</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>b304f6b619fa1b5854f5b2a5907d8198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>dfafc88dc658b88c8b617e96b41d41df</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>md_bottomUpTraversal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>12434e150cb2527e1fb1fcd6a49c3a5e</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>md_topDownTraversal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>aeacb26ed083b7893f4555c376ec4818</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>mf_constraintMaxFace</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>b7f68cf6970b973d802c2549f1db8aa2</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>mf_maximumFaceRec</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>7fd1fec33d1b2da36bec55f65122713e</anchor>
      <arglist>(const node &amp;bT, node &amp;bT_opt, int &amp;ell_opt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>38f6d66205568d1ee784b7b25fab9b38</anchor>
      <arglist>(const node &amp;bT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlock</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>d4784aa60cb5a43c5283196ba2df6725</anchor>
      <arglist>(const node &amp;bT, const node &amp;cT, ListIterator&lt; adjEntry &gt; &amp;after)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCTree *</type>
      <name>pBCTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>291dee352e5216ddc892ec41b8721b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry *</type>
      <name>pAdjExternal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>3584bd7688d2a6050f86d6d46853472f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>md_nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>73e1de731896e284aae0a578a9dfcb2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>md_minDepth</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>de08a931dd88b0d752b43aa95b93d026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>md_m_cB</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>6418ff71ee71aaf49aebf4b7add13804</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>md_M_B</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>746e8c0d29d643f3c8678b690667bd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>md_M2</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>fee466c81b7bf36e8cbf52cc498e3121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>mf_nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>9f511888e3b5bc17e9e7d8fc4ce0564b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>mf_cstrLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>d8f3572fe836d95e37edb27880a77c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>mf_maxFaceSize</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>c308b24be9d9e6717095b259826d8c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; mdmf_la &gt;</type>
      <name>mdmf_nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>1052501e3e343e6bd20bfbe6ecd2915b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; mdmf_la &gt;</type>
      <name>mdmf_edgeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>b84e685c0cd6eeb2d596257df25a8785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; adjEntry &gt; &gt;</type>
      <name>newOrder</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>b07de6f6a48e3a87a55b40779778a582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>treeNodeTreated</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_max_face_layers.html</anchorfile>
      <anchor>5143afaa49457a1ca9eff9c4e5c28b59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::EmbedderMinDepthPiTa</name>
    <filename>classogdf_1_1_embedder_min_depth_pi_ta.html</filename>
    <base>ogdf::EmbedderModule</base>
    <member kind="function">
      <type></type>
      <name>EmbedderMinDepthPiTa</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>10767e30f61c3e17eedc2f90143d4a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>be393cad5e7519de224eefe713e3f6dd</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlocks</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>d1923dcb9ebf123042ee26da96b3e6f2</anchor>
      <arglist>(const node &amp;bT, const node &amp;cH)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedCutVertex</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>5358a5b4d724d51245d1ed5b84689bc5</anchor>
      <arglist>(const node &amp;vT, bool root=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedBlockVertex</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>ca6563a824da20ae7699acec4468ab0d</anchor>
      <arglist>(const node &amp;bT, const node &amp;parent_cT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>computeBlockCutfaceTreeEdgeLengths</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>62035511e1025bd39d214212e79bb580</anchor>
      <arglist>(const node &amp;n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeTdiam</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>ea7af8a2786976613bf52164adb68faf</anchor>
      <arglist>(const node &amp;n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>invertPath</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>be3e7c461ab6d6aabd48f4a8484848ef</anchor>
      <arglist>(Graph &amp;G, const node &amp;n, const edge &amp;e)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>computeBlockMapping</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>f8a7d985bb4047275b50956a162adc35</anchor>
      <arglist>(const node &amp;bDG, const node &amp;parent, List&lt; node &gt; &amp;blocksNodes, List&lt; node &gt; &amp;childBlocks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>eccentricityBottomUp</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>1b2ebffdb43a23101fd46da329b4da98</anchor>
      <arglist>(const node &amp;nT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>eccentricityTopDown</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>9b4f9fa73d2469c97fcddef4d52ecaf1</anchor>
      <arglist>(const node &amp;nT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>depthBlock</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>96e7587e8bfbbba8cc0bb6fb088d1162</anchor>
      <arglist>(const node &amp;bT, const node &amp;parent_cT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>depthCutvetex</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>95b0dcd16f479add5d8c349b6a93765f</anchor>
      <arglist>(const node &amp;cT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteDummyNodes</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>386ef6802ac9d31ca13c629d69705a79</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCTree *</type>
      <name>pBCTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>483c3564d68d8c7a2e77d29f5539cb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>bcTreePG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>0192cb169d08cb0de430c26ee4803c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>nBCTree_to_npBCTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>af27cd2ca8ba442f44aa82d14fdae769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>npBCTree_to_nBCTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>bce801af10d61a05ecf5fd57e24466e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry *</type>
      <name>pAdjExternal</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>9e1a3a01da431030229edb708cbaa768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Graph &gt;</type>
      <name>blockG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>43b7eb802c98f3e87344de75e4e9c8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nH_to_nBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>4e46027e4f7e759ff73eaf48e6d1dc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eH_to_eBlockEmbedding</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>db8dcbbe543f2c666969e6c95f66cee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nBlockEmbedding_to_nH</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>2a8c4178641a7fb37edd5061c8fdbfb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eBlockEmbedding_to_eH</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>bebccdfc3f707aba8a05cfcb7ef88fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; int &gt; &gt;</type>
      <name>nodeLength</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>dfefbaf6d6a273dae1bf3486d93745ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_cB</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>043d6e8de503bbb175a685b1c32ba0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>M_B</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>ff9f20ed53c07c2b9b036233ad9b87f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>edgeLength_blockCutfaceTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>9b2c89e26679d72461f1748a2a41251e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>Tdiam</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>db4cca94999a76cb4bb2b2f82977fe40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Tdiam_initialized</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>b2c17ab8a7baa33669243f453faffd25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>nBlockCutfaceTree_to_nTdiam</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>0e804ad89ebae0c7b865ab56b8593d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>nTdiam_to_nBlockCutfaceTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>1743cf827d480e1d2f656b66790c2417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>knotTdiam</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>b1e6cd535e6d36d2287fc4d8cc0780c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>tmpAdjExtFace</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>ff453e452f0b83dba3fbf642d32ec6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; List&lt; adjEntry &gt; &gt;</type>
      <name>faces</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>d0fb578480370140e72ecb783785a1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>fPG_to_nDG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>2f6d49e81c5bb48dbd25a20cabc011cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>nDG_to_fPG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>8457c2e169ed383514ebdd2c8bb0af91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>blockCutfaceTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>07aae01bcd5a5e88bbda16f4dadd298d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCTree *</type>
      <name>pm_blockCutfaceTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>8797ac14449f18256667f8d2ed27ea98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>nBlockCutfaceTree_to_nm_blockCutfaceTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>bd8ea8a29f985b06cc486873aa209603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>nm_blockCutfaceTree_to_nBlockCutfaceTree</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>3a96533b94c8fba60d4b905472a0b4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>bPG_to_bDG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>8a77c2562e99ee03ffe2c2c5a44ecab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>bDG_to_bPG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>19ad3aaf86d0424db502cd45e96367ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>eccentricity_alt</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>46addaafc06808a22bb52ef057b393f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>eccentricity</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>a133f48fd70e0b91ef36f3f75251b087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>oneEdgeBlockNodes</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>4c4ae17fe7d52f36e3b99eea27f6d7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; node &gt;</type>
      <name>dummyNodes</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>46363410201988077df36b6d1c08b7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; adjEntry &gt; &gt;</type>
      <name>newOrder</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>431c4a7043c77857a863ad4970cac65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Graph &gt;</type>
      <name>G_nT</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>886494d3a43c5edc170a995b9cc2e92d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nG_nT_to_nPG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>1b3d53093ddc65f43219a0c11d09197f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; NodeArray&lt; node &gt; &gt;</type>
      <name>nPG_to_nG_nT</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>2e5407d0375201c805814d43874bb7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>eG_nT_to_ePG</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>68aa1a16fd5c5d5cb1ea177c11e5cbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; EdgeArray&lt; edge &gt; &gt;</type>
      <name>ePG_to_eG_nT</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>6d142c4d1a6e29c7bebfb0c5865a049f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; adjEntry &gt;</type>
      <name>Gamma_adjExt_nT</name>
      <anchorfile>classogdf_1_1_embedder_min_depth_pi_ta.html</anchorfile>
      <anchor>242561b3d8504a71620bb25ab1b854f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::DynamicBacktrack</name>
    <filename>classogdf_1_1_dynamic_backtrack.html</filename>
    <member kind="enumeration">
      <name>enumKuratowskiFlag</name>
      <anchor>8eb4bf6c65d0174caf22713db939476d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>externalPath</name>
      <anchor>8eb4bf6c65d0174caf22713db939476d0fdd8ec65f0d2c8367284a87332bf2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pertinentPath</name>
      <anchor>8eb4bf6c65d0174caf22713db939476d5a2a80ba90e955f0411d5cd42a07196f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>singlePath</name>
      <anchor>8eb4bf6c65d0174caf22713db939476d51da8c52cac555a48efc8ccc02e6da92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicBacktrack</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>b176bf0666b533c5e56bec283e0f8eab</anchor>
      <arglist>(const Graph &amp;g, const NodeArray&lt; int &gt; &amp;dfi, const EdgeArray&lt; int &gt; &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>1aa150ce78f62258edc3c399cd1bdfc0</anchor>
      <arglist>(const node start, const node end, const bool less, const int flag, const int startFlag, const edge startInclude, const edge startExlude)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNextPath</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>de3fc82ceba840f894d197f662ab03e4</anchor>
      <arglist>(SListPure&lt; edge &gt; &amp;list, node &amp;endnode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNextPathExclude</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>be49412680dc20175847ad19fe654d44</anchor>
      <arglist>(SListPure&lt; edge &gt; &amp;list, node &amp;endnode, const NodeArray&lt; int &gt; &amp;nodeflags, int exclude, int exceptOnEdge)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const EdgeArray&lt; int &gt; &amp;</type>
      <name>m_flags</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>b55509b6ff02a9966d994af7b2f0f515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>m_dfi</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>7c70773e195d9302d930edb33c9e3ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>node</type>
      <name>start</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>d7142d790ae13576f44d9a4563a7f416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>node</type>
      <name>end</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>e85fba0daca4878b3c92b3b261ebf853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>less</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>245f56b5b6da6c0da503a9213c1e872c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>flag</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>e0126fb65aebe92587474c36f7dfee9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; adjEntry &gt;</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>77f0bc7b95f206dd5bd38c8cca3e733f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StackPure&lt; adjEntry &gt;</type>
      <name>stack</name>
      <anchorfile>classogdf_1_1_dynamic_backtrack.html</anchorfile>
      <anchor>44ec906145f4d42763e7fb8c9c5ea8d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::KuratowskiWrapper</name>
    <filename>classogdf_1_1_kuratowski_wrapper.html</filename>
    <member kind="enumeration">
      <name>enumSubdivisionType</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A</name>
      <anchor>0a72cd5215e0f1771887ff99d9a044618192abb4856ac3c407dc7e2792f40c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AB</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461421b3b7d160019132be2f06fc5626b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AC</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461c58f6e1ea5d3ab5b00b500d187622e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AD</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461754050ebc9749409943bf05da0d148d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AE1</name>
      <anchor>0a72cd5215e0f1771887ff99d9a044614af075e56508e8110e4dec3075581d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AE2</name>
      <anchor>0a72cd5215e0f1771887ff99d9a044612e54d05a4b38961a4f67683c179e1e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AE3</name>
      <anchor>0a72cd5215e0f1771887ff99d9a044617a9ef27b6d9137a99d14f016fe5eeb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AE4</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461d09bed2302823e543014132a05a809a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>B</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461d5973950800fed374e0f4f44020d2ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461b18874f28e5fa36ce27e1cc93066418f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D</name>
      <anchor>0a72cd5215e0f1771887ff99d9a044612658e1863931df0d817d8124db4a31f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>E1</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461c6913b776d2e014b67baff5368c325a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>E2</name>
      <anchor>0a72cd5215e0f1771887ff99d9a0446144bcadecad7930d677f1db58b8b295a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>E3</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461811c2665dae9d1cf0d1cee8351afe77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>E4</name>
      <anchor>0a72cd5215e0f1771887ff99d9a04461b824e19024a6251df1d7aa23b2b835b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>E5</name>
      <anchor>0a72cd5215e0f1771887ff99d9a044616f3f7d8b717f2d63f2951fcfbb885694</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KuratowskiWrapper</name>
      <anchorfile>classogdf_1_1_kuratowski_wrapper.html</anchorfile>
      <anchor>ae79edbb9c036ffd9a007e1740465d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isK33</name>
      <anchorfile>classogdf_1_1_kuratowski_wrapper.html</anchorfile>
      <anchor>33b40d2c86928cf1c1a23a7cda554c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isK5</name>
      <anchorfile>classogdf_1_1_kuratowski_wrapper.html</anchorfile>
      <anchor>728c2dfe08f31c469ed58e53144b8ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>subdivisionType</name>
      <anchorfile>classogdf_1_1_kuratowski_wrapper.html</anchorfile>
      <anchor>375d3ffcb806182a8a61ef777a700654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>V</name>
      <anchorfile>classogdf_1_1_kuratowski_wrapper.html</anchorfile>
      <anchor>42843fb342023ccdfdb9d87e413ad09c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; edge &gt;</type>
      <name>edgeList</name>
      <anchorfile>classogdf_1_1_kuratowski_wrapper.html</anchorfile>
      <anchor>e5a2f1af798a64c6367cf3230634d95e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ExtractKuratowskis</name>
    <filename>classogdf_1_1_extract_kuratowskis.html</filename>
    <member kind="enumeration">
      <name>enumKuratowskiType</name>
      <anchor>7ff92743de6011f9d7a900c086781e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchor>7ff92743de6011f9d7a900c086781e75f7f5821b529defc3a6f372b6777536ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>K33</name>
      <anchor>7ff92743de6011f9d7a900c086781e755e0291f369f9ca9192f7601a9e19d088</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>K5</name>
      <anchor>7ff92743de6011f9d7a900c086781e75fa077456d82b2f6a88e508b30196d7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtractKuratowskis</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>9d20dba07b310e16b39d9de8cc13242f</anchor>
      <arglist>(BoyerMyrvoldPlanar &amp;bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExtractKuratowskis</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>ca278a1c2ad16ba50d0448701b7ac844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extract</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>2b4df2327aeb1149f6b07d490e5859ba</anchor>
      <arglist>(const SListPure&lt; KuratowskiStructure &gt; &amp;allKuratowskis, SList&lt; KuratowskiWrapper &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractBundles</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>97881d52db49c1ab9821dd85665be8d5</anchor>
      <arglist>(const SListPure&lt; KuratowskiStructure &gt; &amp;allKuratowskis, SList&lt; KuratowskiWrapper &gt; &amp;output)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>whichKuratowski</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>a03a52ef7eed733d7c7a281525b3895e</anchor>
      <arglist>(const Graph &amp;m_g, const NodeArray&lt; int &gt; &amp;m_dfi, const SListPure&lt; edge &gt; &amp;list)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>whichKuratowskiArray</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>8548463f17ea87924597b5559af88936</anchor>
      <arglist>(const Graph &amp;m_g, const NodeArray&lt; int &gt; &amp;m_dfi, EdgeArray&lt; int &gt; &amp;edgenumber)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isANewKuratowski</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>4d24c2935371bb5bb2ede80351cd31ae</anchor>
      <arglist>(const Graph &amp;g, const SListPure&lt; edge &gt; &amp;kuratowski, const SList&lt; KuratowskiWrapper &gt; &amp;output)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isANewKuratowski</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>7ffd8b172bfda2534041b66ab818e6af</anchor>
      <arglist>(const Graph &amp;g, const EdgeArray&lt; int &gt; &amp;test, const SList&lt; KuratowskiWrapper &gt; &amp;output)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addExternalFacePath</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>f7e973859754d143c637507a2248681a</anchor>
      <arglist>(SListPure&lt; edge &gt; &amp;list, const SListPure&lt; adjEntry &gt; &amp;externPath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>adjEntry</type>
      <name>adjToLowestNodeBelow</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>67a69423816a90ed568de0af1a721b38</anchor>
      <arglist>(node high, int low)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDFSPath</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>b3d8b5747c22dc9f62f55f40126a6888</anchor>
      <arglist>(SListPure&lt; edge &gt; &amp;list, node bottom, node top)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDFSPathReverse</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>11fc62ee8d16dad7f1dc70c71f8bc0b9</anchor>
      <arglist>(SListPure&lt; edge &gt; &amp;list, node bottom, node top)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>truncateEdgelist</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>ce50c68bf692b11abfae0149b467e38c</anchor>
      <arglist>(SListPure&lt; edge &gt; &amp;list1, const SListPure&lt; edge &gt; &amp;list2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorA</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>04975974da324a22aa97b0fc54842843</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorB</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>7d765f85e605b5640750039315f3ee8d</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, NodeArray&lt; int &gt; &amp;nodeflags, const int nodemarker, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorBBundles</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>3979358d237300092993bf9aab0c9322</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, NodeArray&lt; int &gt; &amp;nodeflags, const int nodemarker, const KuratowskiStructure &amp;k, EdgeArray&lt; int &gt; &amp;flags, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorC</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>f8ea1148dbbeae393ece1666e324050e</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorD</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>8e44a4d5c187c0f0b14dfee4ba1f1374</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorE</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>f6a5b03d4b948963e66eb231a9314162</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, bool firstXPath, bool firstPath, bool firstWPath, bool firstWOnHighestXY, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorEBundles</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>02c111987135ff10f83e115dce07a85b</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, bool firstXPath, bool firstPath, bool firstWPath, bool firstWOnHighestXY, NodeArray&lt; int &gt; &amp;nodeflags, const int nodemarker, const KuratowskiStructure &amp;k, EdgeArray&lt; int &gt; &amp;flags, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorE1</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>24dd3c16d7cf3e493f18a5eefd4972d4</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, int before, const node z, const node px, const node py, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW, const SListPure&lt; edge &gt; &amp;pathZ, const node endnodeZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorE2</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>b0bd36b931043cfbf7b7577f116aa707</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, int before, const node z, const node px, const node py, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW, const SListPure&lt; edge &gt; &amp;pathZ, const node endnodeZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorE3</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>d195a592778d43ac2e2e66677649b011</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, int before, const node z, const node px, const node py, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW, const SListPure&lt; edge &gt; &amp;pathZ, const node endnodeZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorE4</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>7afb025ed83f522b21e5a90c198fe2f2</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, int before, const node z, const node px, const node py, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW, const SListPure&lt; edge &gt; &amp;pathZ, const node endnodeZ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractMinorE5</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>b0f05c96d9cdc51ebc49a439a5ea108a</anchor>
      <arglist>(SList&lt; KuratowskiWrapper &gt; &amp;output, int before, const node z, const node px, const node py, const KuratowskiStructure &amp;k, const WInfo &amp;info, const SListPure&lt; edge &gt; &amp;pathX, const node endnodeX, const SListPure&lt; edge &gt; &amp;pathY, const node endnodeY, const SListPure&lt; edge &gt; &amp;pathW, const SListPure&lt; edge &gt; &amp;pathZ, const node endnodeZ)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoyerMyrvoldPlanar &amp;</type>
      <name>BMP</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>3713dabef8fe2f42395d069a479a3bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph &amp;</type>
      <name>m_g</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>b0960379c7153b88d28868c24d5a3586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_embeddingGrade</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>09f3578214f8e1d54064610466de7381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_avoidE2Minors</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>e00fa02ffff99999595cc41c6b81cc77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nodeMarker</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>952e8b1438d612c07ee1ac95d9ba3c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_wasHere</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>bbbb33211253984589311cefeedcc1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; int &gt; &amp;</type>
      <name>m_dfi</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>c2e35386a7421144fa6491b2f74f7cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Array&lt; node &gt; &amp;</type>
      <name>m_nodeFromDFI</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>1fc18408702a0c213c8f9b882a38404b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NodeArray&lt; adjEntry &gt; &amp;</type>
      <name>m_adjParent</name>
      <anchorfile>classogdf_1_1_extract_kuratowskis.html</anchorfile>
      <anchor>a124f5c13916b86922625cbe0a29544d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FastPlanarSubgraph</name>
    <filename>classogdf_1_1_fast_planar_subgraph.html</filename>
    <base>ogdf::PlanarSubgraphModule</base>
    <member kind="function">
      <type></type>
      <name>FastPlanarSubgraph</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>852ecb6377b077dc0ee60b2253a10f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FastPlanarSubgraph</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>548b3772b66fd17544ce915cf0415327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runs</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>ff6826a9db44d33f3e6e030ebfc29307</anchor>
      <arglist>(int nRuns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runs</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>edcf848f4d17193dfe67f87d9b81b1aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>43e3e89cec5d3e64967814d1af269d5a</anchor>
      <arglist>(const Graph &amp;G, const List&lt; edge &gt; &amp;preferedEdges, List&lt; edge &gt; &amp;delEdges, const EdgeArray&lt; int &gt; *pCost, bool preferedImplyPlanar)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeDelEdges</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>6c2bcbe84a60fc7097653d234f19974f</anchor>
      <arglist>(const Graph &amp;G, const EdgeArray&lt; int &gt; *pCost, const EdgeArray&lt; edge &gt; *backTableEdges, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>planarize</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>2818cc59445698fc4c12299198a1eb88</anchor>
      <arglist>(const Graph &amp;G, NodeArray&lt; int &gt; &amp;numbering, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nRuns</name>
      <anchorfile>classogdf_1_1_fast_planar_subgraph.html</anchorfile>
      <anchor>fedd4e1098f03c0a15b7825981ac2373</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FixedEmbeddingInserter</name>
    <filename>classogdf_1_1_fixed_embedding_inserter.html</filename>
    <base>ogdf::EdgeInsertionModule</base>
    <member kind="function">
      <type></type>
      <name>FixedEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>a63f67682519766340ccd47d9cc19b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FixedEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>69c631d0e452172518032c70b834ddde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>c9e0d65bb73f9d3df264df60f23d74c8</anchor>
      <arglist>(RemoveReinsertType rrOption)</arglist>
    </member>
    <member kind="function">
      <type>RemoveReinsertType</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>848ee631b273218e182923cf3ae1f842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>89e86224066bde738daafd64f8afa52a</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>7be1817f9e10b91f18713fb62227b9f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runsPostprocessing</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>e9b4df25bd7f23071682299b5de9a415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>e984f242b7f9236284b27970d79570c2</anchor>
      <arglist>(PlanRep &amp;PG, const List&lt; edge &gt; &amp;origEdges, bool forbidCrossinGens, const EdgeArray&lt; int &gt; *costOrig, const EdgeArray&lt; bool &gt; *forbiddenEdgeOrig=0, const EdgeArray&lt; unsigned int &gt; *edgeSubGraph=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>constructDualForbidCrossingGens</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>8aa8b8236aeeb334324dc632998f881a</anchor>
      <arglist>(const PlanRepUML &amp;PG, const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>constructDual</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>693d400352256270a523275599bf2d08</anchor>
      <arglist>(const GraphCopy &amp;GC, const CombinatorialEmbedding &amp;E, const EdgeArray&lt; bool &gt; *forbiddenEdgeOrig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findShortestPath</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>d2634655a6e21594938482c776a9b958</anchor>
      <arglist>(const CombinatorialEmbedding &amp;E, node s, node t, Graph::EdgeType eType, SList&lt; adjEntry &gt; &amp;crossed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findShortestPath</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>4269227bebf2360431e4aca4c827c7fd</anchor>
      <arglist>(const PlanRep &amp;PG, const CombinatorialEmbedding &amp;E, const EdgeArray&lt; int &gt; &amp;costOrig, node s, node t, Graph::EdgeType eType, SList&lt; adjEntry &gt; &amp;crossed, const EdgeArray&lt; unsigned int &gt; *edgeSubGraph, int eSubGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertEdge</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>1b129583486c4251512f35171e9096e1</anchor>
      <arglist>(PlanRep &amp;PG, CombinatorialEmbedding &amp;E, edge eOrig, const SList&lt; adjEntry &gt; &amp;crossed, bool forbidCrossingGens, const EdgeArray&lt; bool &gt; *forbiddenEdgeOrig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeEdge</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>ec0c78f57d984da0a4e98cbc6d091d95</anchor>
      <arglist>(PlanRep &amp;PG, CombinatorialEmbedding &amp;E, edge eOrig, bool forbidCrossingGens, const EdgeArray&lt; bool &gt; *forbiddenEdgeOrig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>crossedEdge</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>e1c94ac18e7422f744078a28db3c931f</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>costCrossed</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>3ffe2e3c98dbf4c8b787937a103e2a52</anchor>
      <arglist>(edge eOrig, const PlanRep &amp;PG, const EdgeArray&lt; int &gt; &amp;costOrig, const EdgeArray&lt; unsigned int &gt; *subgraphs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>m_dual</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>6a53de2dcd91a0c959530da249fc8662</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; adjEntry &gt;</type>
      <name>m_primalAdj</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>b6ef4519c19981b0e2e6dbe46a9f2c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceArray&lt; node &gt;</type>
      <name>m_nodeOf</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>f3346eba8421b2c619a62c5788095bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_primalIsGen</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>e716f5594b6c338f5bd9bce32ec505c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceSetSimple *</type>
      <name>m_delFaces</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>3d08f0727d90ffacaac7cf376ecaef49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceSetPure *</type>
      <name>m_newFaces</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>9e781364d5242a3c2456133a0c0b4ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_vS</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>51760bafa0d2a557df44d112de217a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_vT</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>375859ef2b580bd57acc09af166faa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RemoveReinsertType</type>
      <name>m_rrOption</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>03a4457045772618ec2c7717678d665b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_percentMostCrossed</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>f9317ec3a574a99a4fceece0d5cb496a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_runsPostprocessing</name>
      <anchorfile>classogdf_1_1_fixed_embedding_inserter.html</anchorfile>
      <anchor>21937340e841ccbaf2b8364602a536b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::KuratowskiSubdivision</name>
    <filename>classogdf_1_1_kuratowski_subdivision.html</filename>
    <base>ogdf::Array</base>
  </compound>
  <compound kind="class">
    <name>ogdf::MaximalPlanarSubgraphSimple</name>
    <filename>classogdf_1_1_maximal_planar_subgraph_simple.html</filename>
    <base>ogdf::PlanarSubgraphModule</base>
    <member kind="function">
      <type></type>
      <name>MaximalPlanarSubgraphSimple</name>
      <anchorfile>classogdf_1_1_maximal_planar_subgraph_simple.html</anchorfile>
      <anchor>e70846d86163ed18c8d1f4ac6c6d4d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaximalPlanarSubgraphSimple</name>
      <anchorfile>classogdf_1_1_maximal_planar_subgraph_simple.html</anchorfile>
      <anchor>5e5cf0c090f106bcc32b8302d10bd3bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_maximal_planar_subgraph_simple.html</anchorfile>
      <anchor>3e1e0165e5df72ef8d8eb7b8d0793b83</anchor>
      <arglist>(const Graph &amp;G, const List&lt; edge &gt; &amp;preferedEdges, List&lt; edge &gt; &amp;delEdges, const EdgeArray&lt; int &gt; *pCost, bool preferedImplyPlanar)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMFixedEmbeddingInserter</name>
    <filename>classogdf_1_1_m_m_fixed_embedding_inserter.html</filename>
    <base>ogdf::MMEdgeInsertionModule</base>
    <member kind="function">
      <type></type>
      <name>MMFixedEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>94c4b9c0a0d0afda5983fe9ade026d70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MMFixedEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>f763ad7d13b44dfbaa3bc96c3dfb0698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>3f4628fffb1d3d8e55a93fbd6ac2b8aa</anchor>
      <arglist>(RemoveReinsertType rrOption)</arglist>
    </member>
    <member kind="function">
      <type>RemoveReinsertType</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>0a2a372cedf49d819e63e5c3d1bef8e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>cd7f5fc9040dc1edb47c16362229be9e</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>27edb065c8931902e7fcca92f6711ba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>0dacd6e3484ab2af325d4e63de1f5f06</anchor>
      <arglist>(PlanRepExpansion &amp;PG, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>constructDual</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>78f353423be0e6c1d426ae6a1116596d</anchor>
      <arglist>(const PlanRepExpansion &amp;PG, const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findShortestPath</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>56f5a510eccec5996c9351c90777298d</anchor>
      <arglist>(const PlanRepExpansion &amp;PG, const CombinatorialEmbedding &amp;E, const List&lt; node &gt; &amp;sources, const List&lt; node &gt; &amp;targets, List&lt; Tuple2&lt; adjEntry, adjEntry &gt; &gt; &amp;crossed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareAnchorNode</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>bec8aa68398daf32f354de3a7d826571</anchor>
      <arglist>(PlanRepExpansion &amp;PG, CombinatorialEmbedding &amp;E, adjEntry &amp;adjStart, node srcOrig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>preprocessInsertionPath</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>a4838a69a7b1f466b55b194f22f5b228</anchor>
      <arglist>(PlanRepExpansion &amp;PG, CombinatorialEmbedding &amp;E, node srcOrig, node tgtOrig, PlanRepExpansion::nodeSplit ns, List&lt; Tuple2&lt; adjEntry, adjEntry &gt; &gt; &amp;crossed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertEdge</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>38d74d80231b5f362c79bfe3171357cf</anchor>
      <arglist>(PlanRepExpansion &amp;PG, CombinatorialEmbedding &amp;E, edge eOrig, node srcOrig, node tgtOrig, PlanRepExpansion::NodeSplit *nodeSplit, List&lt; Tuple2&lt; adjEntry, adjEntry &gt; &gt; &amp;crossed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeEdge</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>b0fb22e1edc10a77f5d1b1e2f956e31a</anchor>
      <arglist>(PlanRepExpansion &amp;PG, CombinatorialEmbedding &amp;E, edge eOrig, PlanRepExpansion::NodeSplit *nodeSplit, node &amp;oldSrc, node &amp;oldTgt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertDualEdge</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>5dae18e904548dcbbd0290df111e3311</anchor>
      <arglist>(node vDual, adjEntry adj, const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertDualEdges</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>d948d32c729a064a8c7efa6b5b0e83d7</anchor>
      <arglist>(node v, const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>contractSplit</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>ba6b199f626e7804e223c37cbeca6c41</anchor>
      <arglist>(PlanRepExpansion &amp;PG, CombinatorialEmbedding &amp;E, PlanRepExpansion::NodeSplit *nodeSplit)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>contractSplitIfReq</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>cfb0f896d70b7e0a1cf53baeada345c0</anchor>
      <arglist>(PlanRepExpansion &amp;PG, CombinatorialEmbedding &amp;E, node u, const PlanRepExpansion::nodeSplit nsCurrent=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>convertDummy</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>5a139392ae25287d5c422abeb32db911</anchor>
      <arglist>(PlanRepExpansion &amp;PG, CombinatorialEmbedding &amp;E, node u, node vOrig, PlanRepExpansion::nodeSplit ns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>collectAnchorNodes</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>7700910f1fa2b1f86e59bf5980bc83f4</anchor>
      <arglist>(node v, NodeSet &amp;nodes, const PlanRepExpansion::NodeSplit *nsParent, const PlanRepExpansion &amp;PG) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>anchorNodes</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>a8e23221eb4820f3007792c329fd5bde</anchor>
      <arglist>(node vOrig, NodeSet &amp;nodes, const PlanRepExpansion &amp;PG) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findSourcesAndTargets</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>4cf5c8f6d50d2b102e3e891efb3c7d9d</anchor>
      <arglist>(node src, node tgt, NodeSet &amp;sources, NodeSet &amp;targets, const PlanRepExpansion &amp;PG) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>commonDummy</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>f8d73fccafa05171af77976b66eac8ca</anchor>
      <arglist>(NodeSet &amp;sources, NodeSet &amp;targets)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkDualGraph</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>89f40e582a6833f38c04486d3ee4f920</anchor>
      <arglist>(PlanRepExpansion &amp;PG, const CombinatorialEmbedding &amp;E) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkSplitDeg</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>1071c3e86c851600f2ae9f39a4d32a25</anchor>
      <arglist>(PlanRepExpansion &amp;PG)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RemoveReinsertType</type>
      <name>m_rrOption</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>c40702aee765c001e406b7a3783a82d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_percentMostCrossed</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>11a310920feb596dca064bd8980f3152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>m_dual</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>f6be3a305ec0c500f845404f280c4fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceArray&lt; node &gt;</type>
      <name>m_dualOfFace</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>acc81254173f4f720452eb2de36ebace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_dualOfNode</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>4a1ee739c60f412b8a603d5bafca6293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_primalNode</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>ed728cd0d7f7eb981a4a55faf5e407eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; adjEntry &gt;</type>
      <name>m_primalAdj</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>090d8e2024638478049a875cc50fbbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AdjEntryArray&lt; edge &gt;</type>
      <name>m_dualEdge</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>0e08884854632d0181cc5f24478fced0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_dualCost</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>cf98903d6460abb368e3136f7731a3f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_vS</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>e9f0be1ec3a51b85965978cfb57898a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_vT</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>f48824977d0aa28e2c2fc518047d547c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxCost</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>b036ec979686bb295a92f29f324b4cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceSetSimple *</type>
      <name>m_delFaces</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>7d9b20c4d483ec00cbb3bb4fe10a8de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceSetPure *</type>
      <name>m_newFaces</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>1343193515faba7f3dbdf80d6a23acab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeSetPure *</type>
      <name>m_mergedNodes</name>
      <anchorfile>classogdf_1_1_m_m_fixed_embedding_inserter.html</anchorfile>
      <anchor>89559816cf97dd404c99124d12cf4730</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMSubgraphPlanarizer</name>
    <filename>classogdf_1_1_m_m_subgraph_planarizer.html</filename>
    <base>ogdf::MMCrossingMinimizationModule</base>
    <member kind="function">
      <type></type>
      <name>MMSubgraphPlanarizer</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>699b9deef70af214e0e9323c00d64f9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgraph</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>278656ef5623782571e0f0f086cfa6d2</anchor>
      <arglist>(PlanarSubgraphModule *pSubgraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInserter</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>730b2aae7746d7167c200b3b25072497</anchor>
      <arglist>(MMEdgeInsertionModule *pInserter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>permutations</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>003a481d6f22d86a72e3ba972dfe223b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permutations</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>0de36dccf020af00f714027fbb489b77</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>d5890bbd41b3a1496e96a03a63dc2dea</anchor>
      <arglist>(PlanRepExpansion &amp;PG, int cc, int &amp;crossingNumber, int &amp;numNS, int &amp;numSN)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; PlanarSubgraphModule &gt;</type>
      <name>m_subgraph</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>81ef6a5d81a365dad50cae5c5b7c55d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; MMEdgeInsertionModule &gt;</type>
      <name>m_inserter</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>8f19c355b5c2fe2bd122d397c0232905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_permutations</name>
      <anchorfile>classogdf_1_1_m_m_subgraph_planarizer.html</anchorfile>
      <anchor>63ae30a4c2c958f98457d1fe1acf8fa8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMVariableEmbeddingInserter</name>
    <filename>classogdf_1_1_m_m_variable_embedding_inserter.html</filename>
    <base>ogdf::MMEdgeInsertionModule</base>
    <member kind="function">
      <type></type>
      <name>MMVariableEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>a4bc713fc3e066b9850f244dadc9bf9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MMVariableEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>e7429795521529910e4b44351c706d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>df66585aa15ff93266669e89d6c2c93b</anchor>
      <arglist>(RemoveReinsertType rrOption)</arglist>
    </member>
    <member kind="function">
      <type>RemoveReinsertType</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>e366fdebc34be23b5586e8431f0ecaa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>06070ed4a72e5bc2fce7bad46e96d991</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>9ee343edc80d6ca10f0f92ee8583811e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>PathType</name>
      <anchor>47ef9346574f5f4b2d00040cb301e982</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pathToEdge</name>
      <anchor>47ef9346574f5f4b2d00040cb301e98262b52d965cdc01ed077d123988264212</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pathToSource</name>
      <anchor>47ef9346574f5f4b2d00040cb301e982bb85b3f100d84a3db03ff939ba1b8ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pathToTarget</name>
      <anchor>47ef9346574f5f4b2d00040cb301e98285a76899644bec8352068aa9f94b5852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PlanRepExpansion::Crossing</type>
      <name>Crossing</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>e050e0b751c9c14d4f12cc80f0bdbd4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>18c5775c249d33ccf1c10b4215dbb4d9</anchor>
      <arglist>(PlanRepExpansion &amp;PG, const List&lt; edge &gt; &amp;origEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>collectAnchorNodes</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>3e86774f716a0cc32d347d155db987b9</anchor>
      <arglist>(node v, NodeSet &amp;nodes, const PlanRepExpansion::NodeSplit *nsParent) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findSourcesAndTargets</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>95ab386972eee710f25187ae60d05826</anchor>
      <arglist>(node src, node tgt, NodeSet &amp;sources, NodeSet &amp;targets) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>anchorNodes</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>01deb1e28d6e2ed814e069b350c9ec7d</anchor>
      <arglist>(node vOrig, NodeSet &amp;nodes) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>db01a63ea1631f67cb8e4b570e9c11c9</anchor>
      <arglist>(List&lt; Crossing &gt; &amp;eip, AnchorNodeInfo &amp;vStart, AnchorNodeInfo &amp;vEnd)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>prepareAnchorNode</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>f69d3851632659f62a663ec29ccbeb6e</anchor>
      <arglist>(const AnchorNodeInfo &amp;anchor, node vOrig, bool isSrc, edge &amp;eExtra)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>preprocessInsertionPath</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>84f21b9147de783c1f557fd5b6f00d08</anchor>
      <arglist>(const AnchorNodeInfo &amp;srcInfo, const AnchorNodeInfo &amp;tgtInfo, node srcOrig, node tgtOrig, node &amp;src, node &amp;tgt, edge &amp;eSrc, edge &amp;eTgt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>preparePath</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>92e98e851ffcf4564aeab7b7ac62e2b8</anchor>
      <arglist>(node vAnchor, adjEntry adjPath, bool bOrigEdge, node vOrig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findPseudos</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>3f39505be413c07ce148170f3d96a356</anchor>
      <arglist>(node vDummy, adjEntry adjSrc, AnchorNodeInfo &amp;infoSrc, SListPure&lt; node &gt; &amp;pseudos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertWithCommonDummy</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>e41d19e7851b86d9ce2bc9b658e7a2d8</anchor>
      <arglist>(edge eOrig, node vDummy, node &amp;src, node &amp;tgt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dfsVertex</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>01da731aa127deb2c7fd003c672cd736</anchor>
      <arglist>(node v, int parent, List&lt; Crossing &gt; &amp;eip, AnchorNodeInfo &amp;vStart, AnchorNodeInfo &amp;vEnd)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dfsBlock</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>7b8e9af1d53fe9a0c256361914e90372</anchor>
      <arglist>(int i, node parent, node &amp;repS, List&lt; Crossing &gt; &amp;eip, AnchorNodeInfo &amp;vStart, AnchorNodeInfo &amp;vEnd)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>pathSearch</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>acfd224a4b3b4bf2d5295d0df29b8658</anchor>
      <arglist>(node v, edge parent, const Block &amp;BC, List&lt; edge &gt; &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>blockInsert</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>ac433271c7476dda218d895ef948f434</anchor>
      <arglist>(Block &amp;BC, List&lt; Crossing &gt; &amp;L, AnchorNodeInfo &amp;srcInfo, AnchorNodeInfo &amp;tgtInfo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildSubpath</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>449a4072b2fd60f50e61112dd3bd346c</anchor>
      <arglist>(node v, edge eIn, edge eOut, Paths &amp;paths, bool &amp;bPathToEdge, bool &amp;bPathToSrc, bool &amp;bPathToTgt, ExpandedSkeleton &amp;Exp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>contractSplitIfReq</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>e52377f0070ab17bc1e44ae89d53a6cf</anchor>
      <arglist>(node u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>convertDummy</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>c75a144188e51a056858190b7ee13c9a</anchor>
      <arglist>(node u, node vOrig, PlanRepExpansion::nodeSplit ns_0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeEip</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>db12b6e8d8ea63c40847820771868d00</anchor>
      <arglist>(const List&lt; Crossing &gt; &amp;eip)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static node</type>
      <name>commonDummy</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>3363dfaaff695306c3ae68eafb6effdc</anchor>
      <arglist>(NodeSet &amp;sources, NodeSet &amp;targets)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RemoveReinsertType</type>
      <name>m_rrOption</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>ee4d56449725217ba78bb2300935d438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_percentMostCrossed</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>a723799ce09cbd0b5509b16c33af948b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlanRepExpansion *</type>
      <name>m_pPG</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>880c32b9d49da17a3a38caa321f83714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeSet *</type>
      <name>m_pSources</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>a07feee1d0939b60e75c305aa1690757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeSet *</type>
      <name>m_pTargets</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>543a81697e76a120e33af88d4d883486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SList&lt; int &gt; &gt;</type>
      <name>m_compV</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>bd46c0643c67d24382c2c714c40ae450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; SList&lt; node &gt; &gt;</type>
      <name>m_nodeB</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>69977f57aa8c3e3ee84b26ffaa80461a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; SList&lt; edge &gt; &gt;</type>
      <name>m_edgeB</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>ced1a38e50c4614a95006ad60147615e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_GtoBC</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>39f946b86797a2ab6b015e85fbfba776</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_conFinished</name>
      <anchorfile>classogdf_1_1_m_m_variable_embedding_inserter.html</anchorfile>
      <anchor>dee519b920ca845b1f3e74529ba6e70f</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::MMVariableEmbeddingInserter::AnchorNodeInfo</class>
    <class kind="struct">ogdf::MMVariableEmbeddingInserter::Paths</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::MMVariableEmbeddingInserter::AnchorNodeInfo</name>
    <filename>structogdf_1_1_m_m_variable_embedding_inserter_1_1_anchor_node_info.html</filename>
    <member kind="function">
      <type></type>
      <name>AnchorNodeInfo</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_anchor_node_info.html</anchorfile>
      <anchor>1d8ba11031e260363515a0c453e976b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnchorNodeInfo</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_anchor_node_info.html</anchorfile>
      <anchor>a2266588c99c34f54b82d4553563053e</anchor>
      <arglist>(adjEntry adj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnchorNodeInfo</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_anchor_node_info.html</anchorfile>
      <anchor>13d3ff8f6555bf2fb77f68c3f11ba3a4</anchor>
      <arglist>(adjEntry adj_1, adjEntry adj_2)</arglist>
    </member>
    <member kind="variable">
      <type>adjEntry</type>
      <name>m_adj_1</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_anchor_node_info.html</anchorfile>
      <anchor>ed29b80a27464316f4f6d0899ebfa81a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>adjEntry</type>
      <name>m_adj_2</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_anchor_node_info.html</anchorfile>
      <anchor>e152d0a3084cb651ac35e28bc2a273b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogdf::MMVariableEmbeddingInserter::Paths</name>
    <filename>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</filename>
    <member kind="function">
      <type></type>
      <name>Paths</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</anchorfile>
      <anchor>6f34af7ba60f150cadb10dcfd6dd63bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; SList&lt; adjEntry &gt; &gt;</type>
      <name>m_addPartLeft</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</anchorfile>
      <anchor>ca3ec0606eb5509e610be2d23dc2ae65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; SList&lt; adjEntry &gt; &gt;</type>
      <name>m_addPartRight</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</anchorfile>
      <anchor>d43aadca81d83a1101fb3b174d593c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; List&lt; Crossing &gt; &gt;</type>
      <name>m_paths</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</anchorfile>
      <anchor>7c401602fddbb7b355930572440a88c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; AnchorNodeInfo &gt;</type>
      <name>m_src</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</anchorfile>
      <anchor>0ade04106d9bb8a3591d9377c195f66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; AnchorNodeInfo &gt;</type>
      <name>m_tgt</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</anchorfile>
      <anchor>f17239ee7fb89089194cd48c0b9d7ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; int &gt;</type>
      <name>m_pred</name>
      <anchorfile>structogdf_1_1_m_m_variable_embedding_inserter_1_1_paths.html</anchorfile>
      <anchor>a20cb7da20a380609e152d2cfe4d1e82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::NonPlanarCore</name>
    <filename>classogdf_1_1_non_planar_core.html</filename>
    <member kind="function">
      <type></type>
      <name>NonPlanarCore</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>676400706ddb8003a9576012096717c7</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>core</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>95d48c78e5fdb6fca87c475588a24942</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>originalGraph</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>6d2b2155f7525b33fbfa709c1280ac24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>56e99415620ee528526bfc2d581c1a36</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVirtual</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>5f58a506ea3cd0e4ad4ee3ff697cb074</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>realEdge</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>29a6ff09d4435ab3a6c33459cc16b9bc</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const EdgeArray&lt; int &gt; &amp;</type>
      <name>cost</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>3746b2296fcb6cd4ff27eb19fb163ed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cost</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>5422871743bb267f17167aa96c507808</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; edge &gt; &amp;</type>
      <name>mincut</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>ce1feb28da3308b724666aea2ef6c9f8</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>markCore</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>bde0f0cb7c2858966cd15c678683f672</anchor>
      <arglist>(const SPQRTree &amp;T, NodeArray&lt; bool &gt; &amp;mark)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traversingPath</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>788bca0cffed67c78b2803d12b02c11d</anchor>
      <arglist>(Skeleton &amp;S, edge eS, List&lt; edge &gt; &amp;path, NodeArray&lt; node &gt; &amp;mapV)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>m_graph</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>0e23ecb7ae5c0e886126e447e3761e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Graph *</type>
      <name>m_pOriginal</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>d9d3c42ca10379cdb81ea520c607cbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_orig</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>45eb2f50fbaa3b84d9230af4d27672f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_real</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>aabe35f60de0b3a9b618230fd9c64a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; List&lt; edge &gt; &gt;</type>
      <name>m_mincut</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>dc6b74936373e2ecbb472f6852cbdeea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_cost</name>
      <anchorfile>classogdf_1_1_non_planar_core.html</anchorfile>
      <anchor>f9383331ab2bdd8458907110ab9545cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarizationGridLayout</name>
    <filename>classogdf_1_1_planarization_grid_layout.html</filename>
    <base>ogdf::GridLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>PlanarizationGridLayout</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>af61d6c8ed5c79a5247b6841d68b6387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarizationGridLayout</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>a39e4805497ea8bdef74dbb62bccd5dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>7cbf5c90143aa7a0db208c76cc3562cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>595f32cbf9ed4bcb93d5fdbcbce0e256</anchor>
      <arglist>(double ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgraph</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>61d81504a8601625e230b76d9f23ce56</anchor>
      <arglist>(PlanarSubgraphModule *pSubgraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInserter</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>0c086ad4c55de2c5fa585506a632f116</anchor>
      <arglist>(EdgeInsertionModule *pInserter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanarLayouter</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>252ecba3e9fd4c761ebfda6e3c16902b</anchor>
      <arglist>(GridLayoutPlanRepModule *pPlanarLayouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacker</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>57a2e19c333730f80e133a5fe2bfe39c</anchor>
      <arglist>(CCLayoutPackModule *pPacker)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCrossings</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>c263e1bc4398d7999677b5236519fb6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>ca9157ee816d79c53326de65c7d494dd</anchor>
      <arglist>(const Graph &amp;G, GridLayout &amp;gridLayout, IPoint &amp;boundingBox)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; PlanarSubgraphModule &gt;</type>
      <name>m_subgraph</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>e84fa7f1f60fe624d8131c4e81209105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; EdgeInsertionModule &gt;</type>
      <name>m_inserter</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>335c09311b9f6d4926b9317c85ebc158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; GridLayoutPlanRepModule &gt;</type>
      <name>m_planarLayouter</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>87ad3194889736fa302f4c8e05dbd9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; CCLayoutPackModule &gt;</type>
      <name>m_packer</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>732dc52d06bfcb85ae8b338576d0b377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>9493b366d0e63b4de05d837d5d6d9006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nCrossings</name>
      <anchorfile>classogdf_1_1_planarization_grid_layout.html</anchorfile>
      <anchor>c40e24d630c7308929f2b10299a36452</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarizationLayout</name>
    <filename>classogdf_1_1_planarization_layout.html</filename>
    <base>ogdf::UMLLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>PlanarizationLayout</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>4c3f7c4da23b68ef6f3aaaf4b51ac916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanarizationLayout</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>97fcdb839776c8db9c1b3fe1c13d0dce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>a9c103dec92b0f5f54b540958634530a</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>39e7b66892183b8ed6b1a67b311869dd</anchor>
      <arglist>(UMLGraph &amp;umlGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simpleCall</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>bd1ed68eff53d77a8be8749805c7068e</anchor>
      <arglist>(UMLGraph &amp;umlGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callSimDraw</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>c54b4cdad6fbe5973276e346e9680fee</anchor>
      <arglist>(UMLGraph &amp;umlGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFixEmbed</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>3687f2a705e2b28f90aaa1e40a9cc14b</anchor>
      <arglist>(UMLGraph &amp;umlGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callIncremental</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>0d6294d7f456b7ca7e186dc45ab29c56</anchor>
      <arglist>(UMLGraph &amp;umlgraph, NodeArray&lt; bool &gt; &amp;fixedNodes, const EdgeArray&lt; bool &gt; &amp;fixedEdges)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>170ab207c25f8ed983cc88f10855cb89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pageRatio</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>78506757aba79915260a9065a0d9735a</anchor>
      <arglist>(double ratio)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preprocessCliques</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>571f524f6d81ff50af9af3f2e2fc8305</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessCliques</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>f6624fa240c385b9601e39f6eadf0876</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minCliqueSize</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>cad269c4ebad1e94517438d684f34cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCliqueSize</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>3d89ffa366824b347e7be3b32f523faa</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayouterOptions</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>fb8f32647a011e1f0a4ab9f9b50dc3ab</anchor>
      <arglist>(int ops)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alignSons</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>6880914b6b11d13778558831b83057d7</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgraph</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>f4dd62d7b0db0c1ac365b85134428cf9</anchor>
      <arglist>(PlanarSubgraphModule *pSubgraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInserter</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>ad235bd16aef2748791a70a72edf543c</anchor>
      <arglist>(EdgeInsertionModule *pInserter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmbedder</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>59ef0995183751e5ca2dc578bf580b37</anchor>
      <arglist>(EmbedderModule *pEmbedder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanarLayouter</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>7ec0e42b95dd0f6ed38a04b72e0a6f21</anchor>
      <arglist>(LayoutPlanRepModule *pPlanarLayouter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacker</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>5d67d3236f9a7f30d78c1ea2fdf02b77</anchor>
      <arglist>(CCLayoutPackModule *pPacker)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCrossings</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>1ea3cd1123bbf2e121fc785d84434401</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assureDrawability</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>0b9ee8ab4f9f5b0bc0e336187009595f</anchor>
      <arglist>(UMLGraph &amp;umlGraph)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSimpleCall</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>a9ade866e92a84140eecea7dd8fe8e6a</anchor>
      <arglist>(GraphAttributes *pGA, UMLGraph *pUmlGraph)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sortIncrementalNodes</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>cdf37e353808bf1944698c72789f969e</anchor>
      <arglist>(List&lt; node &gt; &amp;addNodes, const NodeArray&lt; bool &gt; &amp;fixedNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getFixationDistance</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>4d290bf6ed0782356517bdf28d3e0e21</anchor>
      <arglist>(node startNode, HashArray&lt; int, int &gt; &amp;distance, const NodeArray&lt; bool &gt; &amp;fixedNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reembed</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>ab016b7da2cf9cc6e349815acd72844d</anchor>
      <arglist>(PlanRepUML &amp;PG, int ccNumber, bool l_align=false, bool l_gensExist=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preProcess</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>627525623305fb79ec786d8801f932cb</anchor>
      <arglist>(UMLGraph &amp;UG)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postProcess</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>c8523f6f53188262e77613b46fe0a549</anchor>
      <arglist>(UMLGraph &amp;UG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillAdjNodes</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>4cc446160d599137eff49c8a198360ef</anchor>
      <arglist>(List&lt; node &gt; &amp;adjNodes, PlanRepUML &amp;PG, node centerNode, NodeArray&lt; bool &gt; &amp;isClique, Layout &amp;drawing)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>arrangeCCs</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>639c3c07cb1af19fe96e9e4ff336cb87</anchor>
      <arglist>(PlanRep &amp;PG, GraphAttributes &amp;GA, Array&lt; DPoint &gt; &amp;boundingBox)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>face</type>
      <name>findBestExternalFace</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>e5ff1b39cc1f2552cff974f158371bd8</anchor>
      <arglist>(const PlanRep &amp;PG, const CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; PlanarSubgraphModule &gt;</type>
      <name>m_subgraph</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>3154b5f2875b997e6f82653b5edf0f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; EdgeInsertionModule &gt;</type>
      <name>m_inserter</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>8cc90f0642777f6485b6e38846aba838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; EmbedderModule &gt;</type>
      <name>m_embedder</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>1189d3eadbd8a248b1190df838560b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; LayoutPlanRepModule &gt;</type>
      <name>m_planarLayouter</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>c8fdcf9767399d7916dcacce3fd22a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; CCLayoutPackModule &gt;</type>
      <name>m_packer</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>233968e97aafac0c5258f0d8b1d55ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_pageRatio</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>b91f497ea2ab062268e4b38d54ceb6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_nCrossings</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>3539ad9bfa3f3ceb23f2acb5ca71591e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_arrangeLabels</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>cd0756df32add81f91997ee5ec07a803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_processCliques</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>710791871fc6f1f0e0a2dbec0a990d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_cliqueSize</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>468c7d794f703ca1891c48fc2ee75057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; edge &gt;</type>
      <name>m_fakedGens</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>2f9c43cb028f7f1f496d402cb1e0eb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_fakeTree</name>
      <anchorfile>classogdf_1_1_planarization_layout.html</anchorfile>
      <anchor>6652577a0053172959595c32b8aa4aad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::AddNodeComparer</name>
    <filename>classogdf_1_1_add_node_comparer.html</filename>
    <base>ogdf::Comparer</base>
    <member kind="function">
      <type></type>
      <name>AddNodeComparer</name>
      <anchorfile>classogdf_1_1_add_node_comparer.html</anchorfile>
      <anchor>a232d6818c919bbdb71f4014405a6bbf</anchor>
      <arglist>(HashArray&lt; int, int &gt; &amp;ha)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_add_node_comparer.html</anchorfile>
      <anchor>638cd68fe1b9249f4c3e7c36d5c4b1ea</anchor>
      <arglist>(const node &amp;v1, const node &amp;v2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HashArray&lt; int, int &gt; *</type>
      <name>m_indToDeg</name>
      <anchorfile>classogdf_1_1_add_node_comparer.html</anchorfile>
      <anchor>94275886dc46ae8396ba1b3318c48c1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarModule</name>
    <filename>classogdf_1_1_planar_module.html</filename>
    <member kind="function">
      <type></type>
      <name>PlanarModule</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>d8d88372cf1128dcfff52b62dae6e874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarModule</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>f0431a8db1ef6a339444a575d34d3dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planarityTest</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>b92da33d986dd21eb1e42d59f4582108</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planarityTest</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>d361f93991b7c1d46b298b8740c864ee</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planarEmbed</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>f7fecae8577940eaa3e459c23e1ad6e8</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>preparation</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>27d2d394ee5844e76c6b0e7d37bd97eb</anchor>
      <arglist>(Graph &amp;G, bool embed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doTest</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>66233c5a0b43ccec1bc537e580b9443c</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; int &gt; &amp;numbering)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doEmbed</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>59b3ab95311e7917b3b26237b4e64246</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; int &gt; &amp;numbering, EdgeArray&lt; edge &gt; &amp;backTableEdges, EdgeArray&lt; edge &gt; &amp;forwardTableEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>entireEmbed</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>0cdffc68cbe2cde323b385ac186c1714</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;entireEmbedding, NodeArray&lt; SListIterator&lt; adjEntry &gt; &gt; &amp;adjMarker, NodeArray&lt; bool &gt; &amp;mark, node v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareParallelEdges</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>8ee64e47e7209004b08d0c165c3b9a56</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; ListPure&lt; edge &gt; &gt;</type>
      <name>m_parallelEdges</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>c09848f8a5b1b6d5e03e8d396dd0add7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_isParallel</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>ebb71e1f5e0fc3145198515a7c1b9d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_parallelCount</name>
      <anchorfile>classogdf_1_1_planar_module.html</anchorfile>
      <anchor>fae18eed9685f852b5749860a699f84f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanRep</name>
    <filename>classogdf_1_1_plan_rep.html</filename>
    <base>ogdf::GraphCopy</base>
    <member kind="function">
      <type></type>
      <name>PlanRep</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>92a669f27f896a387d429d20e59e193e</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanRep</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>c228bafee10089e595d0cc642d77373f</anchor>
      <arglist>(const GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlanRep</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>adfdad19c73b58fd968240fdb8456aeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCCs</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>cd761e4fee578f76d197c3052c38343c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>currentCC</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>31a42225f3278d13cd859b0d25edc744</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; node &gt; &amp;</type>
      <name>nodesInCC</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>0489134f0d1bf23f0a0b3a92f1cf4751</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; node &gt; &amp;</type>
      <name>nodesInCC</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>75375c2700a4d59d8f6131ad04dd44fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCC</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>903308fb97a06bcda61cbe4dfea69727</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>expandAdj</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>ab25aac3d75b3efa1c5fd66c2772bbc5</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry &amp;</type>
      <name>expandAdj</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>f75265e7be6dd80e68fb6072e302cd6a</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>boundaryAdj</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>ddf6f008788ddda1581257bf3c569842</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry &amp;</type>
      <name>boundaryAdj</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>75db130450ff7d8b3108b748bc35114c</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCliqueBoundary</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>cfe09fdfd9b62cbbb6704f920b2130c8</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCliqueBoundary</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>329ceae5013994d27d82ea53acea3456</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>Graph::NodeType</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>72d5c22dddf8063c73efe0898ab36c93</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>Graph::NodeType &amp;</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>aec6aed353c4c8c6d62d864fcbd0bb9f</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertex</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>10cf3a0869bb892e9da812ea9022c297</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>nodeType</type>
      <name>nodeTypeOf</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>e11645a2d30e666ab47cc8d353955cff</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCrossingType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>fa01c206fab63b907e28f1a9b9db0439</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCrossingType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>b03decc5dd026cd877206b913479b725</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>EdgeType</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>74bc26a3e21c0fd3e90c73b1ff254951</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeType &amp;</type>
      <name>typeOf</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>74a2d845cbfc24f21367974970bb1fa0</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edgeType &amp;</type>
      <name>oriEdgeTypes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>727d109f0d7d4e57849b68f2e86b18dd</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edgeType</type>
      <name>edgeTypeOf</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>3e2a252ff2730b02be0ddb68247ae554</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edgeType &amp;</type>
      <name>edgeTypes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>322e51bb5d2ecbdbf786aee2c2e1f3d3</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEdgeTypeOf</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>edd1907f24d91e51550452df6cd716f7</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>9d2e98fdb30d3177be56b5e8206edaa5</anchor>
      <arglist>(edge e, EdgeType et)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGeneralization</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>64bcf66a2b734612052aeaa9380f8452</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeneralization</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>b9da6aaa433b0e0f94e46e12b5634557</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDependency</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>367b2907f4423500de00f8a1d9974ec0</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDependency</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>1a03f0a46e955f107b9a4aec5e73b5e0</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssociation</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>ad8186ae4f61848e721a606ed6ecb0de</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpansion</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>896a599c27152da27c628cb9d04c8cf1</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExpansion</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>20e362423767fb9fa3c77154096b00f9</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBoundary</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>ce92b3681e1dfc7f091d344c61f9e3b3</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAssClass</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>bfab990d169735ec0f88f96057879c99</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAssClass</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>a83f2c8a5fa28b22a6710a8cf6f77475</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBrother</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>e7b2995dadf2b1a6f836439586be1156</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfBrother</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>bfed9f8f6d962d8091d22e7ad7a91167</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBrother</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>0cf3360da180da0e6b323551bd23c780</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHalfBrother</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>e60688cbb3b4ecbfa54154613d2de15b</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>edgeType</type>
      <name>edgeTypeAND</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>8c11e865f4738b3982bf0358b724b1a1</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>edgeType</type>
      <name>edgeTypeOR</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>d7baf0cadb19f779de6b6b596ce807c2</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimaryType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>51334eae39db9a150e7f77001c143de5</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecondaryType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>aff9b84ef6ac2a4df5d4e3f0c2cb657c</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>edgeType</type>
      <name>edgeTypePrimaryAND</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>0877987d1030f277a65fd8f659072241</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>edgeType</type>
      <name>edgeTypePrimaryOR</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>16f59766078ecdaa63315c3f44d22230</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>bd5d5bad5c1ebb7faf4d1f5ec99c0808</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUserType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>6799bdb48d9f4719343f82a1c69b5123</anchor>
      <arglist>(edge e, edgeType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpansionEdge</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>10fa262e203a9f2cb2c72a49efc4c5ff</anchor>
      <arglist>(edge e, int expType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExpansionEdge</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>5abd870e7930054df1bfa4b84e07eecd</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expansionType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>f64ce040fd33a01a1eb25a19366f1096</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegreeExpansionEdge</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>e42f75ef88bd9814a552c86a64437ad4</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>widthOrig</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>cf267db1457dc0cc021752930d65ba13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>widthOrig</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>df7a30066e006390f1d375178ef9eb2f</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>heightOrig</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>29998336022c5438edfdda58f145d3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>heightOrig</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>37a06c78054b64e7e30795976efd7359</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeType</type>
      <name>typeOrig</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>545732f2d1ec24b97c1524ca3b1ca323</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const GraphAttributes &amp;</type>
      <name>getGraphAttributes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>ea30efb8fcfc944153d6a68b723fcfaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>76a0d7a75458f6e685e08001dc31f402</anchor>
      <arglist>(bool lowDegreeExpand=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandLowDegreeVertices</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>81b4d9e17c6c31f864acf154741c760f</anchor>
      <arglist>(OrthoRep &amp;OR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collapseVertices</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>655e2e37165430b5e331b2c248ecf88f</anchor>
      <arglist>(const OrthoRep &amp;OR, Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCrossing</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>710817ff8e2994a2462f4561a56406ef</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBoundary</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>c563f79f54ee3f866c7473e9c834da2c</anchor>
      <arglist>(node center, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>bd681596c5bdb49ae7ebb85f7ba37f4a</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>expandedNode</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>3aff7de1386a5ecbf354f21b5c4d49cd</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpandedNode</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>fd60a368f6799f5438104fa5ab481c81</anchor>
      <arglist>(node v, node w)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>newCopy</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>160c1e4fb547ea9a00ae143ddd3f7645</anchor>
      <arglist>(node vOrig, Graph::NodeType vType)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newCopy</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>95ae98d541fa2d92b117af5ee0cfad16</anchor>
      <arglist>(node v, adjEntry adjAfter, edge eOrig)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>newCopy</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>f966dc09ce261c9c122fc9e641d563be</anchor>
      <arglist>(node v, adjEntry adjAfter, edge eOrig, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>51ab2dfbc06f99bb3dd0ddc02cdbd501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePseudoCrossings</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>c17db94350630af40cc0bfc341395140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdgePath</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>26b0fbb9b4d873b40b993083eafe58a9</anchor>
      <arglist>(edge eOrig, const SList&lt; adjEntry &gt; &amp;crossedEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdgePathEmbedded</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>7b1928eba473cce868ba91dffea8c3c5</anchor>
      <arglist>(edge eOrig, CombinatorialEmbedding &amp;E, const SList&lt; adjEntry &gt; &amp;crossedEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgePathEmbedded</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>c3b57ee5f1b5761e98b246612c33301d</anchor>
      <arglist>(CombinatorialEmbedding &amp;E, edge eOrig, FaceSetPure &amp;newFaces)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>insertCrossing</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>0c152fd644bdc1a9d2ff5ea1d5ef0265</anchor>
      <arglist>(edge &amp;crossingEdge, const edge crossedEdge, bool topDown)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeDeg1Nodes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>8d731c62d6a7ec2dd159e7d80e98cfe8</anchor>
      <arglist>(Stack&lt; Deg1RestoreInfo &gt; &amp;S, const NodeArray&lt; bool &gt; &amp;mark)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreDeg1Nodes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>dcf6e958221d0f806933b766da8c8e1a</anchor>
      <arglist>(Stack&lt; Deg1RestoreInfo &gt; &amp;S, List&lt; node &gt; &amp;deg1s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCopyType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>d1adbbd289898daa6817a6fb0994168e</anchor>
      <arglist>(edge eCopy, edge eOrig)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edgeType</type>
      <name>generalizationPattern</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>dc957f1f09d6872fbf1e61ad9528ea7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edgeType</type>
      <name>associationPattern</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>1830587cf1874f435f5b1dd8b27c2e90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edgeType</type>
      <name>expansionPattern</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>919fc7174fb36119eea24f76fc32d7d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edgeType</type>
      <name>assClassPattern</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>107fc77a33b1dc42ffb3c1e129a3db00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edgeType</type>
      <name>brotherPattern</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>463b5cc7b251f68d93835e5b357385e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edgeType</type>
      <name>halfBrotherPattern</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>c882fb251f7119a39acd26ce14644139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>edgeType</type>
      <name>cliquePattern</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>1719dcc7f14769729cce155c6d0f91e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeUnnecessaryCrossing</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>4b180b4fa89ee9f0c7b1e055619d8060</anchor>
      <arglist>(adjEntry adjA1, adjEntry adjA2, adjEntry adjB1, adjEntry adjB2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_currentCC</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>22c99588fe3751abcebbbd3cc9f4ae02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_numCC</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>5d1ee1a898a4ff140edad701cc1e70ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; List&lt; node &gt; &gt;</type>
      <name>m_nodesInCC</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>f683f1805038fb01e84d2de555e8e4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GraphAttributes *</type>
      <name>m_pGraphAttributes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>8c7b5e7c472aa210d31fe5d568cee696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; NodeType &gt;</type>
      <name>m_vType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>49e1f00ba9eefb359cea788b58291219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; nodeType &gt;</type>
      <name>m_nodeTypes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>701162e84d636e722ebda33842136580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_expandedNode</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>91cad7596c7f9b72faa26c09b5cf9596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; adjEntry &gt;</type>
      <name>m_expandAdj</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>d06aebaf629a26c5373674b97d9161e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeArray&lt; adjEntry &gt;</type>
      <name>m_boundaryAdj</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>90c1082e6b620e275472069ad4429c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_expansionEdge</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>30e6023942177cfb5d7404752d8bcb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; EdgeType &gt;</type>
      <name>m_eType</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>63b39ce6132e2d2f48fb69413f88fbaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edgeType &gt;</type>
      <name>m_edgeTypes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>0af2a967688e9f0c2ab658b8aca2b52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edgeType &gt;</type>
      <name>m_oriEdgeTypes</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>c98965d79a5776bdc867e7185297a1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eAuxCopy</name>
      <anchorfile>classogdf_1_1_plan_rep.html</anchorfile>
      <anchor>2af38a36c0bfb1d92bcadb253436f51b</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::PlanRep::Deg1RestoreInfo</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::PlanRep::Deg1RestoreInfo</name>
    <filename>structogdf_1_1_plan_rep_1_1_deg1_restore_info.html</filename>
    <member kind="function">
      <type></type>
      <name>Deg1RestoreInfo</name>
      <anchorfile>structogdf_1_1_plan_rep_1_1_deg1_restore_info.html</anchorfile>
      <anchor>c532a05c285de60e797ebb4d0c1eb682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Deg1RestoreInfo</name>
      <anchorfile>structogdf_1_1_plan_rep_1_1_deg1_restore_info.html</anchorfile>
      <anchor>177e9a92d3de62c7ad28f12ed17cbe38</anchor>
      <arglist>(edge eOrig, node deg1Orig, adjEntry adjRef)</arglist>
    </member>
    <member kind="variable">
      <type>edge</type>
      <name>m_eOriginal</name>
      <anchorfile>structogdf_1_1_plan_rep_1_1_deg1_restore_info.html</anchorfile>
      <anchor>557b251da369f01499675e05d7e5388f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node</type>
      <name>m_deg1Original</name>
      <anchorfile>structogdf_1_1_plan_rep_1_1_deg1_restore_info.html</anchorfile>
      <anchor>3c4e7e51a5dadce08a129672e0755325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>adjEntry</type>
      <name>m_adjRef</name>
      <anchorfile>structogdf_1_1_plan_rep_1_1_deg1_restore_info.html</anchorfile>
      <anchor>08918bd465fe67e33465c15506641b70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanRepExpansion</name>
    <filename>classogdf_1_1_plan_rep_expansion.html</filename>
    <base>ogdf::Graph</base>
    <member kind="typedef">
      <type>PlanRepExpansion::NodeSplit *</type>
      <name>nodeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>ad3dadb4aaf119ba1a25a25a7dfa9a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanRepExpansion</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>5ea30b348e41794c8fcab2bd45346d0c</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanRepExpansion</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>6b64750a6ab27d0a037054c10bdfdad2</anchor>
      <arglist>(const Graph &amp;G, const List&lt; node &gt; &amp;splittableNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanRepExpansion</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>6d656e9679023b6b828940413f2ddd2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>9b0c900dd4197a795b62846c66e5ea7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>db40e531ff1888e6d21c3ee879a05dc3</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; node &gt; &amp;</type>
      <name>expansion</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>b689c4a00960d3051c06ff5c6fab2c56</anchor>
      <arglist>(node vOrig) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>a124a42bf3e30ce24e393c1905368ef3</anchor>
      <arglist>(node vOrig) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>originalEdge</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>143e409e1e1a26fa48fbd68f8ffa055c</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; edge &gt; &amp;</type>
      <name>chain</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>2ddc4dc1a9570ed1d8885ddcd9bb6422</anchor>
      <arglist>(edge eOrig) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>f83fb93df2c14153e5d4d9916bf593e4</anchor>
      <arglist>(edge eOrig) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>splittable</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>63808ca392ecadfbdd7aab5e4250e760</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>splittableOrig</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>f71baf98167cb47fa99bf5f87f51551a</anchor>
      <arglist>(node vOrig) const </arglist>
    </member>
    <member kind="function">
      <type>NodeSplit *</type>
      <name>nodeSplitOf</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>f8137c29b4642b84bec36db13550050e</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfNodeSplits</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>761969a2a56f2b38c2f40d7106541645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfSplittedNodes</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>8483803434e1bb15055d6441d74fbeec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; NodeSplit &gt; &amp;</type>
      <name>nodeSplits</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>eca5152fe826732eee8a8e50dc3f7a4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>List&lt; edge &gt; &amp;</type>
      <name>setOrigs</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>ef05df1de05e48f0d477d8a10b2d38b8</anchor>
      <arglist>(edge e, edge &amp;eOrig, nodeSplit &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>ListConstIterator&lt; edge &gt;</type>
      <name>position</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>28ed7e11588e17f7cfdbd8b9d75c9d58</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPseudoCrossing</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>5763d2fae8814e4c0860102b8935e06a</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeNumberOfCrossings</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>eb5bbe0bc7bf2359210c10a6518bb265</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCCs</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>ae9b9bc49e074e7a77d78c2f49739ed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>currentCC</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>95cd0ba5aae83a6206258b628e092f4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; node &gt; &amp;</type>
      <name>nodesInCC</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>214d36e2b221d8af77a391d92418af72</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const List&lt; node &gt; &amp;</type>
      <name>nodesInCC</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>670def222cecf5f0a72a7c211843aae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCC</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>dce18936e21174ebb5b76331ff6e840c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>e2b79ec7c4232cc3efce92f2d6c1da60</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>7349b14f2b36296059a225bb68eea513</anchor>
      <arglist>(edge eIn, edge eOut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delCopy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>e7c8c76622cf5154d8ccea0b067cb059</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>embed</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>069b6ccb7d1a4ec6504b18fa664062ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdgePath</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>6f8fb9395378aeb8422b6b8de7155a0c</anchor>
      <arglist>(edge eOrig, nodeSplit ns, node vStart, node vEnd, List&lt; Crossing &gt; &amp;eip, edge eSrc, edge eTgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdgePathEmbedded</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>eca4d582dd3e53c4c61cd67bda38c0a9</anchor>
      <arglist>(edge eOrig, nodeSplit ns, CombinatorialEmbedding &amp;E, const List&lt; Tuple2&lt; adjEntry, adjEntry &gt; &gt; &amp;crossedEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgePathEmbedded</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>b9e1160f92e3d2b9660c9fe7214b5a6b</anchor>
      <arglist>(CombinatorialEmbedding &amp;E, edge eOrig, nodeSplit ns, FaceSetPure &amp;newFaces, NodeSetPure &amp;mergedNodes, node &amp;oldSrc, node &amp;oldTgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgePath</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>8074d4c72d10b8d81f57b694ab9eaa41</anchor>
      <arglist>(edge eOrig, nodeSplit ns, node &amp;oldSrc, node &amp;oldTgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contractSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>66082465501397bf253b6307d2ff34c1</anchor>
      <arglist>(nodeSplit ns, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contractSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>2a4673d9afc48453f21e3312f457b4a4</anchor>
      <arglist>(nodeSplit ns)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>unsplitExpandNode</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>3d593370d171fce2ed4ac9e935f7dfec</anchor>
      <arglist>(node u, edge eContract, edge eExpand, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>unsplitExpandNode</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>03840887859a81ac5e77286f0abf52c7</anchor>
      <arglist>(node u, edge eContract, edge eExpand)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>enlargeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>dd7bd990e8e02499b1f45dcf4d9c2bd8</anchor>
      <arglist>(node v, edge e, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>enlargeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>e5ed262864942b9b5d0ad3e0fc4205fc</anchor>
      <arglist>(node v, edge e)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>splitNodeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>3df0d860b8df169eb2c8a47c64f53716</anchor>
      <arglist>(edge e, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>splitNodeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>93b3f6d7ea7a585bd1f35f3c18e59ae1</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSelfLoop</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>f5ebb571d66999c21fee6192376b27dc</anchor>
      <arglist>(edge e, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSelfLoop</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>5b4df4fe041efbff99edd7724c1d9331</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>PlanRepExpansion::nodeSplit</type>
      <name>convertDummy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>627a428606f84d8d30c8aea2c8f7390d</anchor>
      <arglist>(node u, node vOrig, PlanRepExpansion::nodeSplit ns)</arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>separateDummy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>132bed6592dc9c0e5817ef764f34bc88</anchor>
      <arglist>(adjEntry adj_1, adjEntry adj_2, node vStraight, bool isSrc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolvePseudoCrossing</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>a73eaa26883cbe91e0ef51db935c0bf4</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>6a5988fc47e872c77e289c5df4b39e84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>513675127b1bac42ad67f5f03ebbefcc</anchor>
      <arglist>(const Graph &amp;G, const List&lt; node &gt; &amp;splittableNodes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareNodeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>bf3adee5b3255f6b01287f52076f14dd</anchor>
      <arglist>(const SList&lt; adjEntry &gt; &amp;partitionLeft, adjEntry &amp;adjLeft, adjEntry &amp;adjRight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>581fc263474a10e9197d9b0837ca9e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vOrig</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>ccd678627079276fcef4ffd766110297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eOrig</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>d7926b12eba17256c45f1cadd07b43fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; ListIterator&lt; edge &gt; &gt;</type>
      <name>m_eIterator</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>0a8cd184d08fe0cfbb322e25b909e37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; List&lt; edge &gt; &gt;</type>
      <name>m_eCopy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>fa1d21d2e040a34a0366d854bad3765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; ListIterator&lt; node &gt; &gt;</type>
      <name>m_vIterator</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>432298a8782e41cecdc2086baafab3ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; node &gt; &gt;</type>
      <name>m_vCopy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>3f782edd393ab4220534942b62983b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_splittable</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>0ddeb18df5a46dac4eb6026b22d7e9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_splittableOrig</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>463acaade3f1fc081b80b93ffd0b5d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; NodeSplit * &gt;</type>
      <name>m_eNodeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>4ba5a60472e6530cfceaaeae54cf1a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>List&lt; NodeSplit &gt;</type>
      <name>m_nodeSplits</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>d6ebc76dc7d3f9bd978b5323e709cfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_currentCC</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>3705c5ca0d20204f8da92efc797a64b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numCC</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>3851301071659ec7946ca0ba414cefdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; List&lt; node &gt; &gt;</type>
      <name>m_nodesInCC</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>3afa10a7d383b3f80be7012de95b3084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eAuxCopy</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion.html</anchorfile>
      <anchor>b23d923cf0dd3a88768aa3684eac9100</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::PlanRepExpansion::Crossing</class>
    <class kind="class">ogdf::PlanRepExpansion::NodeSplit</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::PlanRepExpansion::Crossing</name>
    <filename>structogdf_1_1_plan_rep_expansion_1_1_crossing.html</filename>
    <member kind="function">
      <type></type>
      <name>Crossing</name>
      <anchorfile>structogdf_1_1_plan_rep_expansion_1_1_crossing.html</anchorfile>
      <anchor>f83b2e545b01047044d9e631e5cb7072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Crossing</name>
      <anchorfile>structogdf_1_1_plan_rep_expansion_1_1_crossing.html</anchorfile>
      <anchor>cf3da2089d2bf5a66afb533e3a93949f</anchor>
      <arglist>(adjEntry adj)</arglist>
    </member>
    <member kind="variable">
      <type>adjEntry</type>
      <name>m_adj</name>
      <anchorfile>structogdf_1_1_plan_rep_expansion_1_1_crossing.html</anchorfile>
      <anchor>90209a31e0c74d7b7f0befa21eb39ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SList&lt; adjEntry &gt;</type>
      <name>m_partitionLeft</name>
      <anchorfile>structogdf_1_1_plan_rep_expansion_1_1_crossing.html</anchorfile>
      <anchor>a53e0cbaff36d5f1eb67ab525c158cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SList&lt; adjEntry &gt;</type>
      <name>m_partitionRight</name>
      <anchorfile>structogdf_1_1_plan_rep_expansion_1_1_crossing.html</anchorfile>
      <anchor>d4d74fb2d2829a86736b59dc77ef860f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanRepExpansion::NodeSplit</name>
    <filename>classogdf_1_1_plan_rep_expansion_1_1_node_split.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion_1_1_node_split.html</anchorfile>
      <anchor>bc1251043fe82955a6041d220bd7a846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeSplit</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion_1_1_node_split.html</anchorfile>
      <anchor>6d2d7a53a64ff15eb6ea81eeb4c44c37</anchor>
      <arglist>(ListIterator&lt; NodeSplit &gt; it)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>source</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion_1_1_node_split.html</anchorfile>
      <anchor>e01da3ee54fc9c2e780663e7b80e1f15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>target</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion_1_1_node_split.html</anchorfile>
      <anchor>b111a76be336ec92bb1a9de74dd2e8fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>List&lt; edge &gt;</type>
      <name>m_path</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion_1_1_node_split.html</anchorfile>
      <anchor>6947790acc1e7410d484961bde51cac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ListIterator&lt; NodeSplit &gt;</type>
      <name>m_nsIterator</name>
      <anchorfile>classogdf_1_1_plan_rep_expansion_1_1_node_split.html</anchorfile>
      <anchor>6ba5dd9dac1429c5fceaef2588c0e955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanRepInc</name>
    <filename>classogdf_1_1_plan_rep_inc.html</filename>
    <base>ogdf::PlanRepUML</base>
    <base>ogdf::GraphObserver</base>
    <member kind="function">
      <type></type>
      <name>PlanRepInc</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>d700f12671efeb24db464312602c9038</anchor>
      <arglist>(const UMLGraph &amp;UG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanRepInc</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>c81b98d1a58d455f85ff8931f79e5533</anchor>
      <arglist>(const UMLGraph &amp;UG, const NodeArray&lt; bool &gt; &amp;fixed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initActiveCC</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>7a2c220ed80ce807bc09377694ecef07</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>initMinActiveCC</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>2ab43ca12e567bf83e832258908a9be7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nodeDeleted</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>aa6e40445ca2eb51d00c1c9d135cbfa6</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nodeAdded</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>00448162f4ec558fd382ff5a3b0804cd</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>edgeDeleted</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>c5831e44c74870553b782a14a0cfe701</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>edgeAdded</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>6f94c5e6b3f44de871f3e0aa2f414d9d</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reInit</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>db25206bc4457b607ce374d437e98490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleared</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>eab4613c476b30f73658bb5850b49447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activateNode</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>f7a6ed5dbe905149072bacaeec243d8a</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activateEdge</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>54fae58bef844eebda847a4605069c18</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeTreeConnected</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>49e139e64e2f9cc72af92a55f36c85a6</anchor>
      <arglist>(adjEntry adjExternal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteTreeConnection</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>cbac8ee5dea72de57775747265a1fbc3</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteTreeConnection</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>f9f5c350e70fb7f52ac7250ff688aa37</anchor>
      <arglist>(int i, int j, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExtAdjs</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>f1830e7ad1863539550de43e21cfa6eb</anchor>
      <arglist>(List&lt; adjEntry &gt; &amp;extAdjs)</arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>getExtAdj</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>7de8ae66903d54d59eab8568ca97d045</anchor>
      <arglist>(GraphCopy &amp;GC, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>componentNumber</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>92e5ecb0941e276286236e7e68b8281c</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>treeEdge</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>a363dd6f3d5471a9162e6805159c953f</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const edge</type>
      <name>treeEdge</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>c7ddfe86ec202e888f2cdde2e1845591</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>treeInit</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>ff179447123adf2e1ceb22921d23ed73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>396ce13bcb132771e91401852832d924</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initMembers</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>c64c1aa339d7417579b0b91e5129a3fd</anchor>
      <arglist>(const UMLGraph &amp;UG)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>node</type>
      <name>initActiveCCGen</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>750f03c32a4b9544e2aaab4a593c6bbc</anchor>
      <arglist>(int i, bool minNode)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_activeNodes</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>d3c1f6df11480de5a831125ad7da8b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_treeEdge</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>f17d49f4ab1fdebce6db0c1064f5330d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_component</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>78c2ad8a335cc68552879f0316581904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array2D&lt; edge &gt;</type>
      <name>m_eTreeArray</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>4219d894bb8c2553b6c41b21d73ad1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_treeInit</name>
      <anchorfile>classogdf_1_1_plan_rep_inc.html</anchorfile>
      <anchor>a2cba719e5efd1b7a77a893c429711a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanRepUML</name>
    <filename>classogdf_1_1_plan_rep_u_m_l.html</filename>
    <base>ogdf::PlanRep</base>
    <member kind="function">
      <type></type>
      <name>PlanRepUML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>e4779e0a91d02d6817643661e67877ae</anchor>
      <arglist>(const UMLGraph &amp;umlGraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanRepUML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>68209437371f58ddaaccab6a45b1bec9</anchor>
      <arglist>(const GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanRepUML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>230a208f95da99001f216b3d2f581dcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initCC</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>b4b8b81942c4183a934874f5f1146a24</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>faceSplitter</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>a60baadcc4aada6f6ce1c8630c0c7b8b</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFaceSplitter</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>0bdbeef157718630398db2f58c393c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupIncremental</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>34a1a0cc86664b166326ae36e362c07e</anchor>
      <arglist>(int indexCC, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; node &gt; &amp;</type>
      <name>incrementalMergers</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>55f5d0a57f9f66f78acc40f2a68ad6fd</anchor>
      <arglist>(int indexCC) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alignUpward</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>ffbcae25287c84043cf0ae870c6b0de1</anchor>
      <arglist>(adjEntry ae)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alignUpward</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>189871010b7b5b23a7e8717ba0755ae2</anchor>
      <arglist>(adjEntry ae, bool b)</arglist>
    </member>
    <member kind="function">
      <type>const UMLGraph &amp;</type>
      <name>getUMLGraph</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>33db6258f90925368a41ac1f3f37a6ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>insertGenMerger</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>c0c05871ccbcc845df66aa6924447964</anchor>
      <arglist>(node v, const SList&lt; edge &gt; &amp;inGens, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>52b071c4a1d8907858fbf60366160ef7</anchor>
      <arglist>(bool lowDegreeExpand=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandLowDegreeVertices</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>d9b71966786ff85eb7779b4c1ffad845</anchor>
      <arglist>(OrthoRep &amp;OR, bool alignSmallDegree=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collapseVertices</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>67ce2c9ee5f9c280c191231d473cc7cf</anchor>
      <arglist>(const OrthoRep &amp;OR, Layout &amp;drawing)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual edge</type>
      <name>split</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>05988d4c70fcdbb219a81fa8932e5109</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>065cb2e46f8deb330e9bb5491bcbf28e</anchor>
      <arglist>(const char *fileName, const Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>59a813b1825d1b2dabf088104d378d6e</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>d0f79edab348125331952fcef0a30170</anchor>
      <arglist>(const char *fileName, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>bbfa6b8ba347671105a2e3d1b7351cb3</anchor>
      <arglist>(ostream &amp;os, const Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>fdf9b0c9b9650de66e526f0ffff4da7d</anchor>
      <arglist>(const char *fileName, const OrthoRep &amp;OR, const Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>ccb9c827b0edadf1c44df80a83fc6452</anchor>
      <arglist>(ostream &amp;os, const OrthoRep &amp;OR, const Layout &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>306cb3fbe1971d7fa62f27803f7a30d2</anchor>
      <arglist>(const char *fileName, const OrthoRep &amp;OR, const GridLayoutMapped &amp;drawing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>071114945105b56bed9433ff443e116b</anchor>
      <arglist>(ostream &amp;os, const OrthoRep &amp;OR, const GridLayoutMapped &amp;drawing)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepareIncrementalMergers</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>b60df0c9265ac46ca5311924299741d0</anchor>
      <arglist>(int indexCC, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AdjEntryArray&lt; bool &gt;</type>
      <name>m_alignUpward</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>aab0618bad06481e407bfcdccda06f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const UMLGraph *</type>
      <name>m_pUmlGraph</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>5a9fe61d789140850eca05da1f2d218b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_faceSplitter</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>6461a1d5ae48e254a65a14ef94b3ebeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; edge &gt;</type>
      <name>m_mergeEdges</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>a1dc3b1ec2a3bfce270179e116fd8de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; SList&lt; node &gt; &gt;</type>
      <name>m_incMergers</name>
      <anchorfile>classogdf_1_1_plan_rep_u_m_l.html</anchorfile>
      <anchor>5bb19a887d18e5ddb99d8c62e6206112</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimpleEmbedder</name>
    <filename>classogdf_1_1_simple_embedder.html</filename>
    <base>ogdf::EmbedderModule</base>
    <member kind="function">
      <type></type>
      <name>SimpleEmbedder</name>
      <anchorfile>classogdf_1_1_simple_embedder.html</anchorfile>
      <anchor>085e54cf84032971472c189166c1c4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleEmbedder</name>
      <anchorfile>classogdf_1_1_simple_embedder.html</anchorfile>
      <anchor>8ebcbd40301ad1eda14059789248305a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_simple_embedder.html</anchorfile>
      <anchor>d2760d2d3caa085b35f04c5f676157ce</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry &amp;adjExternal)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>face</type>
      <name>findBestExternalFace</name>
      <anchorfile>classogdf_1_1_simple_embedder.html</anchorfile>
      <anchor>056b8f715b24d88c1f3a2d24fedf9912</anchor>
      <arglist>(const PlanRep &amp;PG, const CombinatorialEmbedding &amp;E)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimpleIncNodeInserter</name>
    <filename>classogdf_1_1_simple_inc_node_inserter.html</filename>
    <base>ogdf::IncNodeInserter</base>
    <member kind="function">
      <type></type>
      <name>SimpleIncNodeInserter</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>6d52a3c72697d3b71e03dedf6da2ff47</anchor>
      <arglist>(PlanRepInc &amp;PG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleIncNodeInserter</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>7ea57b67856417174f381178a02756af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCopyNode</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>6930aff1b23584a0a98f74376e3a5337</anchor>
      <arglist>(node v, CombinatorialEmbedding &amp;E, Graph::NodeType vTyp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCopyNode</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>29863db8146f98d259d1070c748f24ac</anchor>
      <arglist>(node v, Graph::NodeType vTyp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>face</type>
      <name>getInsertionFace</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>b2d663dcf64fb8f9658bd3d45bc892ad</anchor>
      <arglist>(node v, CombinatorialEmbedding &amp;E)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructDual</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>dbec327d1ae4aa391a7bb30a44b894c9</anchor>
      <arglist>(const Graph &amp;G, const CombinatorialEmbedding &amp;E, bool forbidCrossings=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertFaceEdges</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>e53b179733b251501c4898d15e56436c</anchor>
      <arglist>(node v, node vCopy, face f, CombinatorialEmbedding &amp;E, adjEntry &amp;adExternal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertCrossingEdges</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>9d75d63691bb24081978d5f5e7449a07</anchor>
      <arglist>(node v, node vCopy, CombinatorialEmbedding &amp;E, adjEntry &amp;adExternal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findShortestPath</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>ae8d385abddf5efa14fd705d9dc6c000</anchor>
      <arglist>(const CombinatorialEmbedding &amp;E, node s, node t, Graph::EdgeType eType, SList&lt; adjEntry &gt; &amp;crossed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertEdge</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>3a923b14ddfa8f0bc6a871759d0e83b5</anchor>
      <arglist>(CombinatorialEmbedding &amp;E, edge eOrig, const SList&lt; adjEntry &gt; &amp;crossed, bool forbidCrossingGens)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>m_dual</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>1f42a289ecbe5c602ef078d71d5d2862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FaceArray&lt; node &gt;</type>
      <name>m_nodeOf</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>39541c4b994016dc0b511423aefc1a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_insertFaceNode</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>a326ca7dae541fcef7912a76ec1e9b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_vAdjNodes</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>4418fb3e59c3cff18f79b5256c76658f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; List&lt; edge &gt; * &gt;</type>
      <name>m_incidentEdges</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>1564284a2bb024729a8a04ed8d04ec90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; adjEntry &gt;</type>
      <name>m_primalAdj</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>9ca42dc8bf7630093a90f81f17082013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; bool &gt;</type>
      <name>m_primalIsGen</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>57310fc50f1f32b3510895c31febfed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_forbidCrossings</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>862b8e56ae9b8cd6fa3a958b0d477de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_vS</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>8e75a6b912a172e4c5dd0adda8037989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_vT</name>
      <anchorfile>classogdf_1_1_simple_inc_node_inserter.html</anchorfile>
      <anchor>669cd47dbf45be3052d9a1933921901c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SubgraphPlanarizer</name>
    <filename>classogdf_1_1_subgraph_planarizer.html</filename>
    <base>ogdf::CrossingMinimizationModule</base>
    <base>ogdf::Logger</base>
    <member kind="function">
      <type></type>
      <name>SubgraphPlanarizer</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>9c7ebf4857e61e807cc35e5bd26668ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubgraph</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>9281ab8c3753fd5fa36d7ec1d9c819c5</anchor>
      <arglist>(PlanarSubgraphModule *pSubgraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInserter</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>714570c8410e62e0ce641600b586ebb9</anchor>
      <arglist>(EdgeInsertionModule *pInserter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>permutations</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>33cd5aeaad8428ec7fa57913f7576139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permutations</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>e8b4fdb9635ece2d479ad9fca19dd661</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTimeout</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>784cb3eb37370bd610411fcb0827277a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>7d2d2908e30ae26b989afcabb1745f59</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>5a388256295faf3a95f1488f758ae0be</anchor>
      <arglist>(PlanRep &amp;PG, int cc, const EdgeArray&lt; int &gt; &amp;cost, const EdgeArray&lt; bool &gt; &amp;forbid, const EdgeArray&lt; unsigned int &gt; &amp;subgraphs, int &amp;crossingNumber)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; PlanarSubgraphModule &gt;</type>
      <name>m_subgraph</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>faeb52595597ee55ae58b224e8c67d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; EdgeInsertionModule &gt;</type>
      <name>m_inserter</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>ce0e206cef050879324087c7bb9e6f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_permutations</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>49388297b1d54f7e6ac76cb7e70aabfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_setTimeout</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer.html</anchorfile>
      <anchor>2f9710a7933c18fa79f0fd794eb709ba</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ogdf::SubgraphPlanarizer::CrossingStructure</class>
  </compound>
  <compound kind="class">
    <name>ogdf::SubgraphPlanarizer::CrossingStructure</name>
    <filename>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</filename>
    <member kind="function">
      <type></type>
      <name>CrossingStructure</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>331e380b76273bb63b9676a9f86b5930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>38e05b8fefcd51bc9dae66070c85e1f5</anchor>
      <arglist>(PlanRep &amp;PG, int weightedCrossingNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>f2697088fe25d99d59551375d76297c1</anchor>
      <arglist>(PlanRep &amp;PG, int cc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfCrossings</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>54f0dab0ac3e5faf24295fc05179f898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weightedCrossingNumber</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>c3f5884b0d6dbf5af92d7517b6609f0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; int &gt; &amp;</type>
      <name>crossings</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>03e83ad5d7201d693ee3b06309cf0688</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numCrossings</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>6690de5571eac1f46da34b895a34ff01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_weightedCrossingNumber</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>27c4e6f6ff1366de7364bde135338961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; SListPure&lt; int &gt; &gt;</type>
      <name>m_crossings</name>
      <anchorfile>classogdf_1_1_subgraph_planarizer_1_1_crossing_structure.html</anchorfile>
      <anchor>472f095faa72fe6f04fbf7c44a8a95d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::VariableEmbeddingInserter</name>
    <filename>classogdf_1_1_variable_embedding_inserter.html</filename>
    <base>ogdf::EdgeInsertionModule</base>
    <member kind="function">
      <type></type>
      <name>VariableEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>a51c945a0ab13f7f313c4cff4d952f18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariableEmbeddingInserter</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>c72a77fa8b6f8c55f32e4c8b885612af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>14a4faf86d07949d30516f64684468c3</anchor>
      <arglist>(RemoveReinsertType rrOption)</arglist>
    </member>
    <member kind="function">
      <type>RemoveReinsertType</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>17f803b0a6f07fe6f113b7130b816d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>70ea238e1e800d7afd6ff9cf1b049857</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>84e6b505222adac4d2fe9305f1923b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runsPostprocessing</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>efa87ede26d744a22475ab487acf06f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>671faa52c17276c069370a7b23141743</anchor>
      <arglist>(PlanRep &amp;PG, const List&lt; edge &gt; &amp;origEdges, bool forbidCrossingGens, const EdgeArray&lt; int &gt; *costOrig, const EdgeArray&lt; bool &gt; *forbiddenEdgeOrig, const EdgeArray&lt; unsigned int &gt; *edgeSubGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>crossedEdge</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>7b5f2a19844c7a3ef812de3c8734588c</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>costCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>9b36d45e49ce21b4347af56360fef720</anchor>
      <arglist>(edge eOrig) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>eec1b7c608b798ed9c3b561a49732610</anchor>
      <arglist>(node s, node t, SList&lt; adjEntry &gt; &amp;eip)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>blockInsert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>304de40e1fddd40d2f175c812ac83d97</anchor>
      <arglist>(const BiconnectedComponent &amp;G, node s, node t, List&lt; adjEntry &gt; &amp;L)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dfsVertex</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>91cda894884954cc43c4f9d1665dbe1b</anchor>
      <arglist>(node v, int parent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dfsComp</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>6b265d3c6b826ded10c8e76ad7537806</anchor>
      <arglist>(int i, node parent, node &amp;repT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>pathSearch</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>4aa1776a2888e888538320c4fd8252ef</anchor>
      <arglist>(node v, edge parent, List&lt; edge &gt; &amp;path)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildSubpath</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>02dc899d1fee7b318f91dbe951445237</anchor>
      <arglist>(node v, edge eIn, edge eOut, List&lt; adjEntry &gt; &amp;L, ExpandedGraph &amp;Exp, node s, node t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>insertEdge</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>d705a2777eb7c11794916a8baf34cda6</anchor>
      <arglist>(node v, node w, Graph &amp;Exp, NodeArray&lt; node &gt; &amp;GtoExp, List&lt; node &gt; &amp;nodesG)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_forbidCrossingGens</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>5a3115e382b7d8ca302bd015a8cb0ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const EdgeArray&lt; int &gt; *</type>
      <name>m_costOrig</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>85b763957997194bf2cfbfc1fe56f93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const EdgeArray&lt; bool &gt; *</type>
      <name>m_forbiddenEdgeOrig</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>557156078ddc827da314e2a9c48d8557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const EdgeArray&lt; unsigned int &gt; *</type>
      <name>m_edgeSubgraph</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>7c61d8234d6555a83d317740dc0752de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph::EdgeType</type>
      <name>m_typeOfCurrentEdge</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>d0e02a1673713c2a6e683184e51306df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlanRep *</type>
      <name>m_pPG</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>749110bbd3184224a6967c89b4a639c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_s</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>de2a64d9f27763804a6f938e8e7bdeb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_t</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>49062cd6412f85476c74125b27e60471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>edge</type>
      <name>m_st</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>fc24697efb05512fb8c36b40cd9b3f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SList&lt; adjEntry &gt; *</type>
      <name>m_pEip</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>5221c8d0cd894c33628f00250e1bb2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SList&lt; int &gt; &gt;</type>
      <name>m_compV</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>5318bc159ecfc4316aa3ac7939bb9226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; SList&lt; node &gt; &gt;</type>
      <name>m_nodeB</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>79b5fb41618d67a657537baec253813b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; SList&lt; edge &gt; &gt;</type>
      <name>m_edgeB</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>b8d6a241c5beb077da6ca85f82ac055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_GtoBC</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>54cbbddc97e9e878c987e4e3aadba118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_v1</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>3fb134bb507336188ac9ad641d8149bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_v2</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>1c37c24e6fa5f8e7d404b214cdf7426b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RemoveReinsertType</type>
      <name>m_rrOption</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>7394df982b168d560fdbc907fa7fa03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_percentMostCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>8a339f8129114af3e4c0e43e800d8371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_runsPostprocessing</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>7f3ffe230687f7b0ae5d94ca806d8da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>m_bigM</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter.html</anchorfile>
      <anchor>bd9e9d9063b163b6ba3448fc0ecd7a0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::VariableEmbeddingInserter2</name>
    <filename>classogdf_1_1_variable_embedding_inserter2.html</filename>
    <base>ogdf::EdgeInsertionModule</base>
    <member kind="function">
      <type></type>
      <name>VariableEmbeddingInserter2</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>d98dde8ddc8f166a05e4860712a90ec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VariableEmbeddingInserter2</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>f984ba4961ba365c242b75b10dda3237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>0bcc0ed6023900e43e8dca1afd368081</anchor>
      <arglist>(RemoveReinsertType rrOption)</arglist>
    </member>
    <member kind="function">
      <type>RemoveReinsertType</type>
      <name>removeReinsert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>838b6aa7ba537ecc5b54ee0791b8de1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>da88a90cd6cc5a4742ee9706991b428f</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>percentMostCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>c5ae4c0416e36c0e5031aeb68f9c59fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runsPostprocessing</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>c0170e77f8b236da53e41de5c9f314d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReturnType</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>b520ccdd48218e4a495183e2b5497da9</anchor>
      <arglist>(PlanRep &amp;PG, const List&lt; edge &gt; &amp;origEdges, bool forbidCrossingGens, const EdgeArray&lt; int &gt; *costOrig, const EdgeArray&lt; bool &gt; *forbiddenEdgeOrig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>crossedEdge</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>cfa4f013788c621dafaf376f270e9a2c</anchor>
      <arglist>(adjEntry adj) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>costCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>5500da6c3c7b38d3b875e198f25af8bd</anchor>
      <arglist>(edge eOrig) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>ca68c1a02225cc25c5eb9ab1edf95ba8</anchor>
      <arglist>(edge eOrig, SList&lt; adjEntry &gt; &amp;eip)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>blockInsert</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>cad3bdf96dae63482f8aea38775f6a25</anchor>
      <arglist>(node s, node t, List&lt; adjEntry &gt; &amp;L)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildSubpath</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>9c741ae55c1eeea9fc3a3c2215eff784</anchor>
      <arglist>(node v, node vPred, node vSucc, List&lt; adjEntry &gt; &amp;L, ExpandedGraph2 &amp;Exp, node s, node t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>insertEdge</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>e28e06f111fcfce28dfaa8f01c49edfa</anchor>
      <arglist>(node v, node w, Graph &amp;Exp, NodeArray&lt; node &gt; &amp;GtoExp, List&lt; node &gt; &amp;nodesG)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_forbidCrossingGens</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>ddcd7937dd28225a10f6659db02eb93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const EdgeArray&lt; int &gt; *</type>
      <name>m_costOrig</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>7fec030800d09a330c0c2e7ad85ea0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const EdgeArray&lt; bool &gt; *</type>
      <name>m_forbiddenEdgeOrig</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>e399ffbec88af3f021d48d976fa10d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph::EdgeType</type>
      <name>m_typeOfCurrentEdge</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>7291c75ccbf329bb16ae4f5381af3c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PlanRep *</type>
      <name>m_pPG</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>409564e2f6c73cae880a31ac0888844b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BCandSPQRtrees *</type>
      <name>m_pBC</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>3533d24485f4e7156ec834d49e649452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RemoveReinsertType</type>
      <name>m_rrOption</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>9e420d0d9bf4793343c158235e677f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_percentMostCrossed</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>aeba4d3ac0d223e7f99ea0a0e0509dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_runsPostprocessing</name>
      <anchorfile>classogdf_1_1_variable_embedding_inserter2.html</anchorfile>
      <anchor>0b66beb2809327d823ff8431b8d0973f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::BiconnectedShellingOrder</name>
    <filename>classogdf_1_1_biconnected_shelling_order.html</filename>
    <base>ogdf::ShellingOrderModule</base>
    <member kind="function">
      <type></type>
      <name>BiconnectedShellingOrder</name>
      <anchorfile>classogdf_1_1_biconnected_shelling_order.html</anchorfile>
      <anchor>7091642f8506026dfa00ae887519ab86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_biconnected_shelling_order.html</anchorfile>
      <anchor>f2d43470cb301de4889fb56f9ca96dfb</anchor>
      <arglist>(const Graph &amp;G, adjEntry adj, List&lt; ShellingOrderSet &gt; &amp;partition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MixedModelLayout</name>
    <filename>classogdf_1_1_mixed_model_layout.html</filename>
    <base>ogdf::GridLayoutPlanRepModule</base>
    <member kind="function">
      <type></type>
      <name>MixedModelLayout</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>725b783417b2ffca3ec4b7d72782df93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MixedModelLayout</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>fe8554d1b89f557e4b46dd2ec5feb977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAugmenter</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>bb80c79b222b301792c431f015f43fe4</anchor>
      <arglist>(AugmentationModule *pAugmenter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShellingOrder</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>4904c5f14f3033f9319cbb1590e7aa8d</anchor>
      <arglist>(ShellingOrderModule *pOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCrossingsBeautifier</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>96182c0cad0e4924402faf123a086b8b</anchor>
      <arglist>(MixedModelCrossingsBeautifierModule *pBeautifier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmbedder</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>edd132db5462fdf69af99b84539e5740</anchor>
      <arglist>(EmbedderModule *pEmbedder)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>004e1817e59f8e7034fef816df27e261</anchor>
      <arglist>(PlanRep &amp;PG, adjEntry adjExternal, GridLayout &amp;gridLayout, IPoint &amp;boundingBox, bool fixEmbedding)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; EmbedderModule &gt;</type>
      <name>m_embedder</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>80ba86e99164ac7ac14753a16af10081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; AugmentationModule &gt;</type>
      <name>m_augmenter</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>e94dea7885f6b5fd3550861d6d69c089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; ShellingOrderModule &gt;</type>
      <name>m_compOrder</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>33382d79c47b1f1964482d1558a29ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; MixedModelCrossingsBeautifierModule &gt;</type>
      <name>m_crossingsBeautifier</name>
      <anchorfile>classogdf_1_1_mixed_model_layout.html</anchorfile>
      <anchor>27378bcb483d123635ce6c00482b1355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMCBBase</name>
    <filename>classogdf_1_1_m_m_c_b_base.html</filename>
    <base>ogdf::MixedModelCrossingsBeautifierModule</base>
    <member kind="function">
      <type></type>
      <name>MMCBBase</name>
      <anchorfile>classogdf_1_1_m_m_c_b_base.html</anchorfile>
      <anchor>df1d5f6a3867687e83e3def62d338dcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MMCBBase</name>
      <anchorfile>classogdf_1_1_m_m_c_b_base.html</anchorfile>
      <anchor>732153e4feaf88ac30ce0da254eb26f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>insertBend</name>
      <anchorfile>classogdf_1_1_m_m_c_b_base.html</anchorfile>
      <anchor>1c4a49060873353a5c75a8b4ecb8f937</anchor>
      <arglist>(GridLayout &amp;gl, edge e, node v, int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>copyOn</name>
      <anchorfile>classogdf_1_1_m_m_c_b_base.html</anchorfile>
      <anchor>1c98a038640a1f12140929e55682369e</anchor>
      <arglist>(int old_a[], int new_a[])</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>workOn</name>
      <anchorfile>classogdf_1_1_m_m_c_b_base.html</anchorfile>
      <anchor>f804908a35c507a7c92fbcfd07f45daa</anchor>
      <arglist>(GridLayout &amp;gl, node v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMCBDoubleGrid</name>
    <filename>classogdf_1_1_m_m_c_b_double_grid.html</filename>
    <base>ogdf::MMCBBase</base>
    <member kind="function">
      <type></type>
      <name>MMCBDoubleGrid</name>
      <anchorfile>classogdf_1_1_m_m_c_b_double_grid.html</anchorfile>
      <anchor>5317e9944f36f3f27d9b5b17b2d882d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MMCBDoubleGrid</name>
      <anchorfile>classogdf_1_1_m_m_c_b_double_grid.html</anchorfile>
      <anchor>be1286ca9e82fe62fa55f0cc119f7fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_c_b_double_grid.html</anchorfile>
      <anchor>149fb8db0eec3caf379489dd8e304b74</anchor>
      <arglist>(const PlanRep &amp;PG, GridLayout &amp;gl, const List&lt; node &gt; &amp;L)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::MMCBLocalStretch</name>
    <filename>classogdf_1_1_m_m_c_b_local_stretch.html</filename>
    <base>ogdf::MMCBBase</base>
    <member kind="function">
      <type></type>
      <name>MMCBLocalStretch</name>
      <anchorfile>classogdf_1_1_m_m_c_b_local_stretch.html</anchorfile>
      <anchor>1a0c0345555a623cfb0e47c02d22f8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MMCBLocalStretch</name>
      <anchorfile>classogdf_1_1_m_m_c_b_local_stretch.html</anchorfile>
      <anchor>2e4329568b7427729157f3bf82706803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_m_m_c_b_local_stretch.html</anchorfile>
      <anchor>f402561cdc11495d7c8e08060c66390a</anchor>
      <arglist>(const PlanRep &amp;PG, GridLayout &amp;gl, const List&lt; node &gt; &amp;L)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarDrawLayout</name>
    <filename>classogdf_1_1_planar_draw_layout.html</filename>
    <base>ogdf::PlanarGridLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>PlanarDrawLayout</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>f3fb669ca7ff28633c49f8d2dbfd455a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarDrawLayout</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>9dbc03aa552f012ef049d89565e87455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sizeOptimization</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>ef31618d535abeb9e158d1bb3f598607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sizeOptimization</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>20bc741f610cb4c54e541ce59805bfb7</anchor>
      <arglist>(bool opt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sideOptimization</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>9c9e3400631116ddc19d187d06e23175</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sideOptimization</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>18a0cc98251d3fe748bcb5798f8374a7</anchor>
      <arglist>(bool opt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseRatio</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>69fc896fe5f79a5bded33e703e2121bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>baseRatio</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>077d40fbd247ef407d7371af7ac969eb</anchor>
      <arglist>(double ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAugmenter</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>59b079df6c1c33bbc9ce8fa5970848b2</anchor>
      <arglist>(AugmentationModule *pAugmenter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShellingOrder</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>7b6804941610d6d66e8bc182a280dc86</anchor>
      <arglist>(ShellingOrderModule *pOrder)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>a638a8c29c6af9c242cea4d2a6a2ec62</anchor>
      <arglist>(const Graph &amp;G, adjEntry adjExternal, GridLayout &amp;gridLayout, IPoint &amp;boundingBox, bool fixEmbedding)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeCoordinates</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>98e7d5af2ee8f38369ed0f71647f110f</anchor>
      <arglist>(const Graph &amp;G, ShellingOrder &amp;order, NodeArray&lt; int &gt; &amp;x, NodeArray&lt; int &gt; &amp;y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_sizeOptimization</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>255812bec55c1f510e097748b3333244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_sideOptimization</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>357a3b86cc064f8195a251f0f8de5792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_baseRatio</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>637c13dec9014baabb211030d89a2d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; AugmentationModule &gt;</type>
      <name>m_augmenter</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>3d1e75c998151c1f4436fb302601c52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; ShellingOrderModule &gt;</type>
      <name>m_computeOrder</name>
      <anchorfile>classogdf_1_1_planar_draw_layout.html</anchorfile>
      <anchor>c1f0d94a64687bea3502cccb483bb80e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::PlanarStraightLayout</name>
    <filename>classogdf_1_1_planar_straight_layout.html</filename>
    <base>ogdf::PlanarGridLayoutModule</base>
    <member kind="function">
      <type></type>
      <name>PlanarStraightLayout</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>ed5de6a5697173a94a87985eac7833bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarStraightLayout</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>5335cbf32746d599b8d188ca3376f3b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sizeOptimization</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>a7f2bc123dd9eb5e73126b39f894f004</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sizeOptimization</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>bb35a4322c95fe3b23f1a6d05382c275</anchor>
      <arglist>(bool opt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseRatio</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>2bd4be35e43756ead421e73b32116fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>baseRatio</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>9fc31e575ff9303a044c12bf920f3f26</anchor>
      <arglist>(double ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAugmenter</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>cc30825c5103406cbab09ddd77f51751</anchor>
      <arglist>(AugmentationModule *pAugmenter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShellingOrder</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>214bab33f8894098883fe338d135543b</anchor>
      <arglist>(ShellingOrderModule *pOrder)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>ce758a0e591c0108000ef89da70cd164</anchor>
      <arglist>(const Graph &amp;G, adjEntry adjExternal, GridLayout &amp;gridLayout, IPoint &amp;boundingBox, bool fixEmbedding)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeCoordinates</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>05166ae6b0a4dd9bbff9cfd0049910a0</anchor>
      <arglist>(const Graph &amp;G, ShellingOrder &amp;lmc, NodeArray&lt; int &gt; &amp;x, NodeArray&lt; int &gt; &amp;y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_sizeOptimization</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>a8422d209b6a1a2ae8ff7eb4166d6801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_baseRatio</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>10b8acc7e33ad0ca01332c5fe9149131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; AugmentationModule &gt;</type>
      <name>m_augmenter</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>82602f72da797480dc3d12f55f4818db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModuleOption&lt; ShellingOrderModule &gt;</type>
      <name>m_computeOrder</name>
      <anchorfile>classogdf_1_1_planar_straight_layout.html</anchorfile>
      <anchor>eebc3b8057c417507e1c396b2610118a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ShellingOrderSet</name>
    <filename>classogdf_1_1_shelling_order_set.html</filename>
    <base>ogdf::Array</base>
    <member kind="function">
      <type></type>
      <name>ShellingOrderSet</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>79854ac0b9ecd1eb69bcf1c03f2e7578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShellingOrderSet</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>73b16dd95b9441b62a2fd9e2a6f3e5eb</anchor>
      <arglist>(int l, adjEntry adjL=0, adjEntry adjR=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShellingOrderSet</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>c3b02035f42c593698ffa98ffcb7448e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>left</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>c4506b893761303cd43ac0d9f30e08b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>right</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>e00ef33b0dbc309f11b134feb7efc700</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>leftAdj</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>ea0acd327c184067b1656a3e9f76e0e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>adjEntry</type>
      <name>rightAdj</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>ef001b26074498dcf351b2a90f6e63a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLeft</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>23f221be0f9ad2ab7148ecfd62fcd75f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRight</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>1dc837f42369c8442336bbc571afb07e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>left</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>3ad463124ca89d9d559938658046c121</anchor>
      <arglist>(node cl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>right</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>d52cde459d2bb40bd811477db8f20894</anchor>
      <arglist>(node cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leftAdj</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>d41e82a195b0ca57841a61bbb110fc81</anchor>
      <arglist>(adjEntry adjL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightAdj</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>fee4fcd705fbe5ce1838f3cd98963387</anchor>
      <arglist>(adjEntry adjR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>len</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>dc4dc468a337850fdd9e85dc4f9aab0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>9cafab5019858115ed6d12b4a97f9d75</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>node &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>e1e1cb626ada63a95f2d2793c4af1857</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>c32da3fe44c9a962e92386db9f3bca8c</anchor>
      <arglist>(const ShellingOrderSet &amp;S)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_leftVertex</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>4a303d67a40ea0b1999a95903eec5c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_rightVertex</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>acf8e3da23c9ec295a1fb75c45d3cfb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_leftAdj</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>2c93ba7671639e94323e502ec8ea5573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>adjEntry</type>
      <name>m_rightAdj</name>
      <anchorfile>classogdf_1_1_shelling_order_set.html</anchorfile>
      <anchor>6a9590be259395ff074e332bc30abc26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ShellingOrder</name>
    <filename>classogdf_1_1_shelling_order.html</filename>
    <member kind="function">
      <type></type>
      <name>ShellingOrder</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>b48208e2f04bdfe4956410cf63214b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShellingOrder</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>86c45e6115a9213d0d10fa0383caacdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>2c4324c5c5933cd92219e29b1ef7ee44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>6c94d65cfc99253f92fb7c348716250c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>len</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>77a7e54ca242ce80f20f7528249c662d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>operator()</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>ed366965bb05fb4065ebb958fe459e36</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>const ShellingOrderSet &amp;</type>
      <name>operator[]</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>31cc22ef8d5dd6c466ccbca4aeb88439</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>left</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>2ddc8872d3591ede7ec69f7f2c2c92db</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>right</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>064042e3694427ddeadf4833ea297397</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>1c5939930282a92096a27472aae65095</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>468898f8ee217612a0a5ff3e286c2df8</anchor>
      <arglist>(const Graph &amp;G, const List&lt; ShellingOrderSet &gt; &amp;partition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initLeftmost</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>4aa431c9f0b3a1cd539e45131f1a4b9c</anchor>
      <arglist>(const Graph &amp;G, const List&lt; ShellingOrderSet &gt; &amp;partition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>6c2682f9d33e140c1ee5cda21b92ec09</anchor>
      <arglist>(int k, node v, node tgt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>7871df825d792fe83300a276c473635f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; ShellingOrderSet &gt;</type>
      <name>m_V</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>6cedf313ecd05880e5bc06a5833dfe95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_rank</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>3d617874271d9b500af884e181488be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CompOrderBic</name>
      <anchorfile>classogdf_1_1_shelling_order.html</anchorfile>
      <anchor>62fa55facc43fa363dd6412f0083690a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::TriconnectedShellingOrder</name>
    <filename>classogdf_1_1_triconnected_shelling_order.html</filename>
    <base>ogdf::ShellingOrderModule</base>
    <member kind="function">
      <type></type>
      <name>TriconnectedShellingOrder</name>
      <anchorfile>classogdf_1_1_triconnected_shelling_order.html</anchorfile>
      <anchor>5fd8f9d39380d7617bcf06e1de23d899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doCall</name>
      <anchorfile>classogdf_1_1_triconnected_shelling_order.html</anchorfile>
      <anchor>986ef0aed86e2460c31b0c6e45cec0eb</anchor>
      <arglist>(const Graph &amp;G, adjEntry adj, List&lt; ShellingOrderSet &gt; &amp;partition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimDraw</name>
    <filename>classogdf_1_1_sim_draw.html</filename>
    <member kind="enumeration">
      <name>CompareBy</name>
      <anchor>1d84262f951cddce0880cb7223c89b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>index</name>
      <anchor>1d84262f951cddce0880cb7223c89b21c58a9215fac298d84f1b1db287ced672</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>label</name>
      <anchor>1d84262f951cddce0880cb7223c89b21bc5bdce1b95d66ebaf5f99be5d1172be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimDraw</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>cad0a8ff875c8d5756573d766a2af83b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>constGraph</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>5765792236ce7d67add2bed1b69957c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>constGraph</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>788c18abadf42899bffa6788cfc2b372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GraphAttributes &amp;</type>
      <name>constGraphAttributes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>6d8f8f46bd1240f68231eb7c0ce0b524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GraphAttributes &amp;</type>
      <name>constGraphAttributes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>6e2f11c4979ff27f7bec45bb8e001c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>eca977392f4b96d97d6ecbf16e4454cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompareBy &amp;</type>
      <name>compareBy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>2f5f8b72cf110a934164943e58237852</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompareBy &amp;</type>
      <name>compareBy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>6616638ee40c5224b1cf66927f4c6372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>isDummy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>1986e237a1dfe6bcb547dc0e2c5f61bf</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>isDummy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>05edb059e8cf22bc6896fe972581b1d1</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPhantomDummy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>f5ffc9ae31ae94b1cfd91de19adaea73</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProperDummy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>e234ef90f984f636ca007c7f08ae78c1</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfNodes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>185f37a64f834e4e809c7c4e28283b0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfDummyNodes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>35487ea93a1925495d70b86106c3164d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfPhantomDummyNodes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>07a8e78e82e8ea966a9412c6a6433c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfProperDummyNodes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>b747f9b4abc3fb7a065093425eb106a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consistencyCheck</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>be60e5d39c34d7ef14877868ab5fa1a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxSubGraph</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>9782c949e442ec457a7e7f6c556d3a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfBasicGraphs</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>9e8bb2a2a099ca0e57851e8b00b8dee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readGML</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>1352383f4ec72fed613e64e3ce2d9374</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGML</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>434576edc504facef7fc3579f52b837f</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function">
      <type>const Graph</type>
      <name>getBasicGraph</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>654ec510f55dd4afc5773f0aa99f270c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBasicGraphAttributes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>9eda5487fbbbcf6dd9c83e0215762823</anchor>
      <arglist>(int i, GraphAttributes &amp;GA, Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGraphAttributes</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>b79a6eb08376e75a2da7be1aec11f26f</anchor>
      <arglist>(const GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGraph</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>2141c95289599abfd09fc3f858b65c6f</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAttribute</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>288a855bb431363a1082e378b55ef436</anchor>
      <arglist>(long attr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>compareById</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>b5251d083362bf696e8ce4d386c988ff</anchor>
      <arglist>(node v, node w) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>compareByLabel</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>8ed0ded1a4dde6d8913206642fc22256</anchor>
      <arglist>(const GraphAttributes &amp;vGA, node v, const GraphAttributes &amp;wGA, node w) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>compare</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>090da43ada4bbff2742c2f5e2d24a8a5</anchor>
      <arglist>(const GraphAttributes &amp;vGA, node v, const GraphAttributes &amp;wGA, node w) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph</type>
      <name>m_G</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>59fe26d770ef2b12971e0a85f9f6d031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GraphAttributes</type>
      <name>m_GA</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>b3ab423ddece06ebe06087048662e43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompareBy</type>
      <name>m_compareBy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>1abf75dffd03172945cd4e27fc01d4e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_isDummy</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>bb33bf0756be75e9f65eabaaa5ab6e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimDrawManipulatorModule</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>0a8a0704d0cdd702345f61b947f2a2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimDrawCaller</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>ef602f8eb02b88e92b9819ff2e9792b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimDrawColorizer</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>3dabd2cce01be60e6e4dc4c4e40f688c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimDrawCreator</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>aa8099db4ecbb80b2ad724907044ad43</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimDrawCreatorSimple</name>
      <anchorfile>classogdf_1_1_sim_draw.html</anchorfile>
      <anchor>53d39f610840498d9d58c7f0866fc8b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimDrawCaller</name>
    <filename>classogdf_1_1_sim_draw_caller.html</filename>
    <base>ogdf::SimDrawManipulatorModule</base>
    <member kind="function">
      <type></type>
      <name>SimDrawCaller</name>
      <anchorfile>classogdf_1_1_sim_draw_caller.html</anchorfile>
      <anchor>f5c9ac7afda24167603666840a5b7904</anchor>
      <arglist>(SimDraw &amp;SD)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callSugiyamaLayout</name>
      <anchorfile>classogdf_1_1_sim_draw_caller.html</anchorfile>
      <anchor>5417b66113036cf02d5e36a63f027765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callUMLPlanarizationLayout</name>
      <anchorfile>classogdf_1_1_sim_draw_caller.html</anchorfile>
      <anchor>f62caaf7701a413b6372414cbb35e53e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>callSubgraphPlanarizer</name>
      <anchorfile>classogdf_1_1_sim_draw_caller.html</anchorfile>
      <anchor>91fbac9dd4111c60f57894efc3dc148b</anchor>
      <arglist>(int cc=0, int numberOfPermutations=1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateESG</name>
      <anchorfile>classogdf_1_1_sim_draw_caller.html</anchorfile>
      <anchor>fad363a488b14e47621a1660ffe24d5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; unsigned int &gt; *</type>
      <name>m_esg</name>
      <anchorfile>classogdf_1_1_sim_draw_caller.html</anchorfile>
      <anchor>1f30fe99b7e72b2a2f68e8b667cd1543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimDrawColorizer</name>
    <filename>classogdf_1_1_sim_draw_colorizer.html</filename>
    <base>ogdf::SimDrawManipulatorModule</base>
    <member kind="enumeration">
      <name>colorScheme</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed403014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed4030142d1bfdaaaa38fe2fa35f17a179b5a6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bluYel</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed4030144d0972ad78f2ad7d493c1006084fe2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>redGre</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed4030145f360ad3ffc39a9a72eb88bb1b9ea9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bluOra</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed403014aeb9e2af6d4c4bba33efc6dfed2230af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>teaLil</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed4030147a3855209244660ac8203c13c9552d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>redBluYel</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed4030140528e09c43bfb4066639f924c7af5cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>greLilOra</name>
      <anchor>f12ee9bab1f534abdcfcecd1ed403014053ec3d45fc56ea2e846daa128fc82a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimDrawColorizer</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer.html</anchorfile>
      <anchor>d8cb077049bb1ec5d9e3a5ec21182a85</anchor>
      <arglist>(SimDraw &amp;SD)</arglist>
    </member>
    <member kind="function">
      <type>const colorScheme &amp;</type>
      <name>ColorScheme</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer.html</anchorfile>
      <anchor>e37f21b78ff1fb0ae5761e71c827467e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>colorScheme &amp;</type>
      <name>ColorScheme</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer.html</anchorfile>
      <anchor>611a99c2e754cf09d4ba3c50fc76b0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColorNodeVersion</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer.html</anchorfile>
      <anchor>5b5045b5ff465378a72f99668b9c30d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColor</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer.html</anchorfile>
      <anchor>f3b174488dc0ca025869d92778b07854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>colorScheme</type>
      <name>m_colorScheme</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer.html</anchorfile>
      <anchor>fb573e46f0fe52701fd072d3bdb478d6</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">ogdf::SimDrawColorizer::SimDrawColorScheme</class>
  </compound>
  <compound kind="class">
    <name>ogdf::SimDrawColorizer::SimDrawColorScheme</name>
    <filename>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</filename>
    <member kind="function">
      <type></type>
      <name>SimDrawColorScheme</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>3069b4390f04c4a3c649e70b71115a38</anchor>
      <arglist>(enum colorScheme colorScm, int numberOfGraphs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimDrawColorScheme</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>d38407ba3a322a51e2ee4b4d2b918494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getColor</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>d5e2a9675139be38bad10be376f77720</anchor>
      <arglist>(int subGraphBits, int numberOfGraphs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignColScm</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>3245569d79cfd8001924be05b4de7bf5</anchor>
      <arglist>(int numberOfGraphs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>colorScheme</type>
      <name>m_intScheme</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>94e73374ef4f47262c5073674b292458</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>red</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>dcf95a3304f9410da86041fa75761675</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>green</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>9b5851c486d5113e4e796bb53da4ab3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>blue</name>
      <anchorfile>classogdf_1_1_sim_draw_colorizer_1_1_sim_draw_color_scheme.html</anchorfile>
      <anchor>15b38f8f96333ad7fdd04017a812b789</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimDrawCreator</name>
    <filename>classogdf_1_1_sim_draw_creator.html</filename>
    <base>ogdf::SimDrawManipulatorModule</base>
    <member kind="function">
      <type></type>
      <name>SimDrawCreator</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>e0602894bb1d8d1f25c7bd30e43fdc94</anchor>
      <arglist>(SimDraw &amp;SD)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>SubGraphBits</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>f493ca5153b634fbc37a4c05b5d2ce41</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int &amp;</type>
      <name>SubGraphBits</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>0b58e7e5ab44c43939c24c7b39a6dfb3</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readGraph</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>387b0516b778a55f0c043d183e22f0f7</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomESG2</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>afbb36182983961d2b4737d18ce2eee4</anchor>
      <arglist>(int doubleESGProbability=50)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomESG3</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>6f033d75173878002a0cd4e012ec7a4b</anchor>
      <arglist>(int doubleESGProbability=50, int tripleESGProbability=25)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomESG</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>907f2663a50731864bf76a5e64d24bb1</anchor>
      <arglist>(int graphNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearESG</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>1c9bb583b43d37df56d3565625e12ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRandom</name>
      <anchorfile>classogdf_1_1_sim_draw_creator.html</anchorfile>
      <anchor>436b781538ac44ed2dfdded3fb9e306f</anchor>
      <arglist>(int numberOfNodes, int numberOfEdges, int numberOfBasicGraphs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimDrawCreatorSimple</name>
    <filename>classogdf_1_1_sim_draw_creator_simple.html</filename>
    <base>ogdf::SimDrawCreator</base>
    <member kind="function">
      <type></type>
      <name>SimDrawCreatorSimple</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>39b83447c2086a812b6c2c63898de012</anchor>
      <arglist>(SimDraw &amp;SD)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createTrees_GKV05</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>80243e186099bf241da1c8f1719047cd</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPathPlanar_EK04</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>0f9be3ad752e8268ac1ab968b0c8effa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createK5_EK04</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>6837651ca5618432b8f36697aa3f05a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createK5_GJPSS06</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>bf7867c00c5dc76986e24542c8b64307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createOuterplanar_BCDEEIKLM03</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>89c553bdc6479dd8a284c8940cf3294c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createKrat98</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>7a883b460ce03fef33ebbe092ba73243</anchor>
      <arglist>(int N, int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createWheel</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>4f3c7ced40326ca5b1080db46793f151</anchor>
      <arglist>(int numberOfParallels, int numberOfbasic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createExpo</name>
      <anchorfile>classogdf_1_1_sim_draw_creator_simple.html</anchorfile>
      <anchor>31fb7bd42eee7888a482a0e9c39f37a5</anchor>
      <arglist>(int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::SimDrawManipulatorModule</name>
    <filename>classogdf_1_1_sim_draw_manipulator_module.html</filename>
    <member kind="function">
      <type></type>
      <name>SimDrawManipulatorModule</name>
      <anchorfile>classogdf_1_1_sim_draw_manipulator_module.html</anchorfile>
      <anchor>a45b972017f7c6480d00881221995b6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimDrawManipulatorModule</name>
      <anchorfile>classogdf_1_1_sim_draw_manipulator_module.html</anchorfile>
      <anchor>6ea6a3c27c9f5e26a9d9d2bb72c3a9c0</anchor>
      <arglist>(SimDraw &amp;SD)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_sim_draw_manipulator_module.html</anchorfile>
      <anchor>6580beee46b89e2c1713b0e8a2b535bf</anchor>
      <arglist>(SimDraw &amp;SD)</arglist>
    </member>
    <member kind="function">
      <type>const SimDraw &amp;</type>
      <name>constSimDraw</name>
      <anchorfile>classogdf_1_1_sim_draw_manipulator_module.html</anchorfile>
      <anchor>3a728a9b0b36f571933fb1763b6297bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimDraw *</type>
      <name>m_SD</name>
      <anchorfile>classogdf_1_1_sim_draw_manipulator_module.html</anchorfile>
      <anchor>251600f76029b70f773c7cbfca021c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph *</type>
      <name>m_G</name>
      <anchorfile>classogdf_1_1_sim_draw_manipulator_module.html</anchorfile>
      <anchor>da75cc714f142c2759deb88ecfd0553e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GraphAttributes *</type>
      <name>m_GA</name>
      <anchorfile>classogdf_1_1_sim_draw_manipulator_module.html</anchorfile>
      <anchor>ea5dfee50b8c87ce222c1df71943de8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::TwoLayerCrossMinSimDraw</name>
    <filename>classogdf_1_1_two_layer_cross_min_sim_draw.html</filename>
    <base>ogdf::TwoLayerCrossMin</base>
    <member kind="function">
      <type></type>
      <name>TwoLayerCrossMinSimDraw</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min_sim_draw.html</anchorfile>
      <anchor>5406e9e217dfea9ce93eddbf1aaf798d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_two_layer_cross_min_sim_draw.html</anchorfile>
      <anchor>59fe357446ae9391e44001fa4f2c7cc6</anchor>
      <arglist>(Level &amp;L, const EdgeArray&lt; unsigned int &gt; *esg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::RadialTreeLayout</name>
    <filename>classogdf_1_1_radial_tree_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="enumeration">
      <name>RootSelectionType</name>
      <anchor>f6a923bca433c50f04456badf68eef0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootIsSource</name>
      <anchor>f6a923bca433c50f04456badf68eef0df4cb08a5c09b9245cbc4de499d3b387b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootIsSink</name>
      <anchor>f6a923bca433c50f04456badf68eef0debda7d3c1eb0c4566596243fd929a6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootIsCenter</name>
      <anchor>f6a923bca433c50f04456badf68eef0d399325a0c902be39152f89c1c67adf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialTreeLayout</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>bc2864529af6f294a27de65ecdf5628c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialTreeLayout</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>7afa51525b4e4fea3c691184971c829b</anchor>
      <arglist>(const RadialTreeLayout &amp;tl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RadialTreeLayout</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>6fdc57e1acea6a83879b295123b03ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RadialTreeLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>3ac9374c75e4301e1c9815fe9fd2f925</anchor>
      <arglist>(const RadialTreeLayout &amp;tl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>aba450a8b2e07f7ffadc3939bca18c2b</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>levelDistance</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>16ece202e8eb05ba4aff5e2143d98f9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>levelDistance</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>ef04f75dc265a19190d69df38b142c90</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>connectedComponentDistance</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>080e162c3fa2264f15e29849d9e02812</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectedComponentDistance</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>11461de52badbfed8080162d899ec741</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>RootSelectionType</type>
      <name>rootSelection</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>dcad08da695f5437c5980016da053643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rootSelection</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>5c29f894ea6e25f38a8681fb99f25026</anchor>
      <arglist>(RootSelectionType sel)</arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>diameter</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>d52adc9a6a0ae74d103622dfce9ce0db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeArray&lt; double &gt; &amp;</type>
      <name>leaves</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>f519d7f6a3a55767724e14ee4a323988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>d0844b8340ccdb0b15cb062395c66739</anchor>
      <arglist>(size_t nBytes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>7fcfc2e3fe6898a747ce04cd21ee68cc</anchor>
      <arglist>(size_t, void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>715806ad134d4af4238ca8ee4f7b8f3e</anchor>
      <arglist>(void *p, size_t nBytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>FindRoot</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>4667a1cc56dfe1391d4fcb779d2b4fdb</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ComputeLevels</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>6db7c8bab5147bd721850ae6ba317799</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ComputeDiameters</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>2f1611444ac960de851fe78cc6a28185</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ComputeAngles</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>11c9bb2a669a2b044d6f0b13c9b8aeb3</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ComputeCoordinates</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>1b622535f08b6d97057b61b3a528e5dc</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ComputeGrouping</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>4165586576185e85e5aa0759996ff05c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_levelDistance</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>b125bceff9350103cae79be8c88ff641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_connectedComponentDistance</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>438c8402871aa971ed6a9a1666d556ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RootSelectionType</type>
      <name>m_selectRoot</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>2d2abd0e4a32ae6e8da31db67c814826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_root</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>f5caad00573884896339d2608ec3e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numLevels</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>0a4b92408672c1c4161654ec3a905cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_level</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>e55f03c87fa2529878d3fac0923e9786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>adc8fbbcbd8df76a1c204bb6edef49d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_leaves</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>36905debcb1609c9fb70b286b544a2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; SListPure&lt; node &gt; &gt;</type>
      <name>m_nodes</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>8171f8e5f113e370425b08e75ff5e55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_angle</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>4cc439c48f8823939564f7c190858c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_wedge</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>ee03961e73ebd99b9480b94a00dedab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_diameter</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>ceda12a17d5a5bc595dedf66df892973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; double &gt;</type>
      <name>m_width</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>36459782fe667b61a4d910ea7d6df5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; double &gt;</type>
      <name>m_radius</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>a2530d068f4d8b88e418a4118cc98b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_outerRadius</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>1856babe2e361c3e131371474d8ff867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; Grouping &gt;</type>
      <name>m_grouping</name>
      <anchorfile>classogdf_1_1_radial_tree_layout.html</anchorfile>
      <anchor>dfb4fa18e75d0a57f6ea4129109c70ad</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ogdf::RadialTreeLayout::Group</class>
    <class kind="class">ogdf::RadialTreeLayout::Grouping</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::RadialTreeLayout::Group</name>
    <filename>structogdf_1_1_radial_tree_layout_1_1_group.html</filename>
    <member kind="function">
      <type></type>
      <name>Group</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>9e964dd24ffb2d24d1ae3d92f0e299e7</anchor>
      <arglist>(RadialTreeLayout *data, node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameType</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>b291033f190eff05c943c6e3068f0de1</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>993abb4f6d2b51cbcd0589520dfe829d</anchor>
      <arglist>(node v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>add</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>4ff75c6c2bdeb9e24982ffd16fc46935</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>leftVertex</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>bea15d636258c1a1f89281aca1aa6a88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>rightVertex</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>7e97afb10be8a83269468cc6e228ab60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>RadialTreeLayout *</type>
      <name>m_data</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>6824a64e4629929eb5e3c8402cdab2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_leafGroup</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>def28c55189c4d9f240a2b80bdc976de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SListPure&lt; node &gt;</type>
      <name>m_nodes</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>a1da9c2f7405648c65d4ad0b0322362c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_sumD</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>c5a795c03d00e9d71c623547e787a9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_sumW</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>00b291cb894ff26121e7636eea223f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_leftAdd</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>103a176014984de65a70031200c7a76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_rightAdd</name>
      <anchorfile>structogdf_1_1_radial_tree_layout_1_1_group.html</anchorfile>
      <anchor>cd2b886e6937e5d341cba67bfc93a2b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::RadialTreeLayout::Grouping</name>
    <filename>classogdf_1_1_radial_tree_layout_1_1_grouping.html</filename>
    <base>ogdf::List</base>
    <member kind="function">
      <type>void</type>
      <name>computeAdd</name>
      <anchorfile>classogdf_1_1_radial_tree_layout_1_1_grouping.html</anchorfile>
      <anchor>0e2ef1db556b8195547ecd3d28b2f153</anchor>
      <arglist>(double &amp;D, double &amp;W)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::TreeLayout</name>
    <filename>classogdf_1_1_tree_layout.html</filename>
    <base>ogdf::LayoutModule</base>
    <member kind="enumeration">
      <name>RootSelectionType</name>
      <anchor>10d11779f3777dccc1568952b1183b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootIsSource</name>
      <anchor>10d11779f3777dccc1568952b1183b01e655cd4c0bb6eedd8c85f3faf65c9bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootIsSink</name>
      <anchor>10d11779f3777dccc1568952b1183b01df2f9cae2c05145f7dd1eb9081d0cdb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rootByCoord</name>
      <anchor>10d11779f3777dccc1568952b1183b01ab396c1db5725cc086014e2fd5144357</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeLayout</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>a905911cfd5abe7c7555cfac81fcb60d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeLayout</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>7f45cbcfd5da3f47756619c5960338d3</anchor>
      <arglist>(const TreeLayout &amp;tl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TreeLayout</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>653a7a08ee220db54020b8baf35ab90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>b5ff2b95b66a34960d9685a025b7dd5a</anchor>
      <arglist>(GraphAttributes &amp;GA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callSortByPositions</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>4a28e991b963e428c916e5fb733eb17c</anchor>
      <arglist>(GraphAttributes &amp;AG, Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>siblingDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>280b70b713ba220009c7e69bab441e7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>siblingDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>394e111a723fb3f6c8f4cab8b69609f7</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>subtreeDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>24a4ea91c982283d4b6a887787cae0b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtreeDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>f105797f88fb00b2f17e4120a8e18a69</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>levelDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>dc81f4655e048527ddce2aaae6a7ed8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>levelDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>6742a14bfade1235e6557e77b5b14f8f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>treeDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>06b2159bb53dcf279389e65fac22ee0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>treeDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>1b835067bf9a48f9e2c9ac1462f2dcc6</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>orthogonalLayout</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>a6bf46834a4821f1a72d483805deb595</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orthogonalLayout</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>f7c8d568884d46e8b9feeaed75ea1e89</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>4f7038e00b1f3058418f0a89bf1cdb98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>d1d3e8f5709c8173bc38e2e4a5f8d441</anchor>
      <arglist>(Orientation orientation)</arglist>
    </member>
    <member kind="function">
      <type>RootSelectionType</type>
      <name>rootSelection</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>b11fdb786e829ff07256a39592f3e241</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rootSelection</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>c4bd7bf46bb42d495c7b029c4ea89682</anchor>
      <arglist>(RootSelectionType rootSelection)</arglist>
    </member>
    <member kind="function">
      <type>TreeLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>311819af958ea566afa62b45cafa036c</anchor>
      <arglist>(const TreeLayout &amp;tl)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>adjustEdgeDirections</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>c89d495e82194c7c4c017bbca5aa42ba</anchor>
      <arglist>(Graph &amp;G, node v, node parent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setRoot</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>c7372e0568aa3cfd8ca54c59eb1626cd</anchor>
      <arglist>(GraphAttributes &amp;AG, Graph &amp;tree)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>undoReverseEdges</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>bc23556c973c4c42bc0d4e91cea7b487</anchor>
      <arglist>(GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeTreeStructure</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>071b2fd0f9c819c0ed0c52c5b09d030c</anchor>
      <arglist>(const Graph &amp;tree, List&lt; node &gt; &amp;roots)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteTreeStructure</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>d1b353f33a583e4b1a0a61919b7fdeed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>isLeaf</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>25f97d7ffb331ebb732f5ed2eeba847a</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>nextOnLeftContour</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>c58d4d2bade429a128f1b72325e75247</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>nextOnRightContour</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>24dfb9817f6d82ad7626e96db8f31786</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>firstWalk</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>17dbef8354dfa1447764fec7d17856b6</anchor>
      <arglist>(node subtree, const GraphAttributes &amp;AG, bool upDown)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apportion</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>f6ea1b1c71ecee3859d5b2314dc22e1c</anchor>
      <arglist>(node subtree, node &amp;defaultAncestor, const GraphAttributes &amp;AG, bool upDown)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>secondWalkX</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>1d9ae92f8d4ed5b6966c5541835c0488</anchor>
      <arglist>(node subtree, double modifierSum, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>secondWalkY</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>45893efa070f9fe2a9f6b91f0dcb4548</anchor>
      <arglist>(node subtree, double modifierSum, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeYCoordinatesAndEdgeShapes</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>e4e9803b7bc8502c5dd967188058cb47</anchor>
      <arglist>(node root, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeXCoordinatesAndEdgeShapes</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>b8ac85edf40e73ff558d864c482eacf6</anchor>
      <arglist>(node root, GraphAttributes &amp;AG)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findMinX</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>7d2f981ad98cba43ff8d3dfc8a178d0c</anchor>
      <arglist>(GraphAttributes &amp;AG, node root, double &amp;minX)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findMinY</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>89e08b8684a8f1edc08079daa18f23c6</anchor>
      <arglist>(GraphAttributes &amp;AG, node root, double &amp;minY)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findMaxX</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>a7923dcfdf1382ef70ce7da27e2745c5</anchor>
      <arglist>(GraphAttributes &amp;AG, node root, double &amp;maxX)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findMaxY</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>7be33106e0d605136fa353406a690f3c</anchor>
      <arglist>(GraphAttributes &amp;AG, node root, double &amp;maxY)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>shiftTreeX</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>09c85cde8aa9fc4bbf31c400afc8e9cd</anchor>
      <arglist>(GraphAttributes &amp;AG, node root, double shift)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>shiftTreeY</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>165fcaf0c9c47c6b93df745ad559e62d</anchor>
      <arglist>(GraphAttributes &amp;AG, node root, double shift)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_siblingDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>02f0d4b8b0792fe1bfca321706d2dd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_subtreeDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>d4cb4d94a3f9c0afba81de24d2d85fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_levelDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>516b911fd06c375f1397d65c7dc42f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_treeDistance</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>8a6057488b17b503d863974ddc40966d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_orthogonalLayout</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>c48b662de7b77a2174d2b2c96ffbb994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Orientation</type>
      <name>m_orientation</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>afcb659f6d8b86b0318ce3799ba3c5ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RootSelectionType</type>
      <name>m_selectRoot</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>844e6d8aa24a747751115d731ba93541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; int &gt;</type>
      <name>m_number</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>fdc28ce511f99c8fe84c1e1c9db51c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_parent</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>d39ac65668bae81b1d4ec4c6bb1e5f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_leftSibling</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>91d00f522142a72f5bc2609a5a3ab808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_firstChild</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>e828dc22246e369ea6b98b73fc8a9c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_lastChild</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>2379bfbd36a4d91ba24d9e5f6bc94bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_thread</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>f8f2c2052f52785f62c1d95cd03f4cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_ancestor</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>e4701bcdcb1bd339ee012049888f8572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_preliminary</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>130caab183d17defcede757d7778f27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_modifier</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>824e17e6abb9a2726a063009976c6ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_change</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>2fbdc4e310e8084a76dd63c83a2f33b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; double &gt;</type>
      <name>m_shift</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>f7911c89a587820316d3e237b64e822e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SListPure&lt; edge &gt;</type>
      <name>m_reversedEdges</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>9303df44e51ae15ad5c8689e9f9cadf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Graph *</type>
      <name>m_pGraph</name>
      <anchorfile>classogdf_1_1_tree_layout.html</anchorfile>
      <anchor>354a0f33b47bd31b7f1f4f87c0a83354</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::ExpansionGraph</name>
    <filename>classogdf_1_1_expansion_graph.html</filename>
    <base>ogdf::Graph</base>
    <member kind="function">
      <type></type>
      <name>ExpansionGraph</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>3b166cdb64359830b85b0710165259b2</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfBCs</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>51b309f30c1dc2d47d1e724ca35ec290</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>componentNumber</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>0668b523e43e0b9978e80aa572a395f0</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponentNumber</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>9674487a87e0087e77341a652c6237c7</anchor>
      <arglist>(edge e, int i)</arglist>
    </member>
    <member kind="function">
      <type>const SListPure&lt; edge &gt; &amp;</type>
      <name>component</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>285659cb5eb01795518de70b67559acb</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const SList&lt; int &gt; &amp;</type>
      <name>adjacentComponents</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>d56b0844d75215e9a0af3a179583535c</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>43b44ef04af68e92cddbac284b77ce96</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>representative</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>163df1bdfeedee47fd417c6b250b7b95</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>copy</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>c2f2dc41465242df769efadc023d3836</anchor>
      <arglist>(node vG) const </arglist>
    </member>
    <member kind="function">
      <type>edge</type>
      <name>original</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>a552d2c1a5a6cdacdd9da795bddc9f35</anchor>
      <arglist>(edge e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOriginal</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>04d760dc40b60ff207d649f134854cf2</anchor>
      <arglist>(node vCopy, node vOriginal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>d83db24b381a0b1dce3fc39dfb942bac</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>92449cd68ff0d276af9b4073729a9dc7</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>getCopy</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>8119afc08998d6abb758a22dce0e2033</anchor>
      <arglist>(node vOrig)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; int &gt;</type>
      <name>m_compNum</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>7bf2623cc281a4772bdc91864422f211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; SListPure&lt; edge &gt; &gt;</type>
      <name>m_component</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>1c94f52f793e84cfe056152309703e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; SList&lt; int &gt; &gt;</type>
      <name>m_adjComponents</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>a397d7a59640e41591d7f1be5da39587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vCopy</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>e4479e06b63972f1b6e8ddb1beaa222e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vOrig</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>d00c05f75201f86b7e572f42c53abc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_vRep</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>ef4777778a10fe1cbbd62728865c308a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EdgeArray&lt; edge &gt;</type>
      <name>m_eOrig</name>
      <anchorfile>classogdf_1_1_expansion_graph.html</anchorfile>
      <anchor>9651819f275051132ce10d50b3312c0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::FaceSinkGraph</name>
    <filename>classogdf_1_1_face_sink_graph.html</filename>
    <base>ogdf::Graph</base>
    <member kind="function">
      <type></type>
      <name>FaceSinkGraph</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>58860820e5ad8a7dc4dee6af19073887</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;E, node s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceSinkGraph</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>7a55acc321371d2a13c5e2394551465a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>0d53cbc5a8f5350bd515676eab40e8a8</anchor>
      <arglist>(const ConstCombinatorialEmbedding &amp;E, node s)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>originalGraph</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>432cdf485e79761ab7417c600b3084d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstCombinatorialEmbedding &amp;</type>
      <name>originalEmbedding</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>4a0e5cd100bab9d79551e01b4cd6a44d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>originalNode</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>51a9b88ec36130a2f724864271e5bf25</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>face</type>
      <name>originalFace</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>22be2463c1be35939c446dbb9e3a06f3</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsSource</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>f6f94ea7a2ae2f74c53b85d15af20b16</anchor>
      <arglist>(node v) const </arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>checkForest</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>4878e8f8f04b103317bbf186ab6dd85b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>possibleExternalFaces</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>e40dc3be0822fb5cb329a624716d295e</anchor>
      <arglist>(SList&lt; face &gt; &amp;externalFaces)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>faceNodeOf</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>477fdf009c4fb6b461a10b94d2ba79cc</anchor>
      <arglist>(edge e)</arglist>
    </member>
    <member kind="function">
      <type>node</type>
      <name>faceNodeOf</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>1a73d13bc6b513f84e80dd63e2811fe2</anchor>
      <arglist>(face f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stAugmentation</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>3037ea2c8dc1cd9ac6c91f4d7680e67d</anchor>
      <arglist>(node h, Graph &amp;G, SList&lt; node &gt; &amp;augmentedNodes, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stAugmentation</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>44ce8fdf2230043ce6a79f14a3f59057</anchor>
      <arglist>(node h, Graph &amp;G, node &amp;superSink, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doInit</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>9002bc7b4460e7cd271765c25cc818a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dfsCheckForest</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>382e91523f954587012ea1228a125c8f</anchor>
      <arglist>(node v, node parent, NodeArray&lt; bool &gt; &amp;visited, int &amp;nInternalVertices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>gatherExternalFaces</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>a562ff30afcae729139a3af7f032ccff</anchor>
      <arglist>(node v, node parent, SList&lt; face &gt; &amp;externalFaces)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>dfsFaceNodeOf</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>4e7ba4da12dac3a35ed564996905b718</anchor>
      <arglist>(node v, node parent, face f1, face f2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>dfsStAugmentation</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>35e0536332957324837812ba5a6fa430</anchor>
      <arglist>(node v, node parent, Graph &amp;G, SList&lt; node &gt; &amp;augmentedNodes, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>dfsStAugmentation</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>bdf9ca964cd0a79a92e05886125c02ef</anchor>
      <arglist>(node v, node parent, Graph &amp;G, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ConstCombinatorialEmbedding *</type>
      <name>m_pE</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>ef32a8c93da63ea34d1ad0baaaf3cd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_source</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>64ff0a987afd9fc40b7f96bab64914cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>node</type>
      <name>m_T</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>bb601c6d7ab08e364747fd08c6b20af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; node &gt;</type>
      <name>m_originalNode</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>9fbddb2e30252b8f4122ade4a1becbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; face &gt;</type>
      <name>m_originalFace</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>87397bb7130d42971c69a85221765134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeArray&lt; bool &gt;</type>
      <name>m_containsSource</name>
      <anchorfile>classogdf_1_1_face_sink_graph.html</anchorfile>
      <anchor>f06bee7e4b3a75c254060fde34cba21d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::UpwardPlanarModule</name>
    <filename>classogdf_1_1_upward_planar_module.html</filename>
    <member kind="function">
      <type></type>
      <name>UpwardPlanarModule</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>22cbddddc615483b335f2115858bad2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upwardPlanarityTest</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>d132ed278320ecd50bb4cbb428a6c6cd</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upwardPlanarEmbed</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>cf3a7e1a11ba50aaf0381ae3768a2d06</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upwardPlanarAugment</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>af3615838fc3fc86d1cedbaf37eee515</anchor>
      <arglist>(Graph &amp;G, SList&lt; node &gt; &amp;augmentedNodes, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upwardPlanarAugment</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>441e74f3131ff17f53ee7253d69cdce8</anchor>
      <arglist>(Graph &amp;G, node &amp;superSink, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upwardPlanarAugment</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>b22d29907f7e30c017b684cd8c16172a</anchor>
      <arglist>(Graph &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testEmbeddedBiconnected</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>47e012707835844eaab93ec6a4a182b1</anchor>
      <arglist>(const Graph &amp;G, const ConstCombinatorialEmbedding &amp;E, SList&lt; face &gt; &amp;externalFaces)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testAndAugmentEmbedded</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>582a1fa7a8c4352f123a99d4188f178c</anchor>
      <arglist>(Graph &amp;G, SList&lt; node &gt; &amp;augmentedNodes, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testAndAugmentEmbedded</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>f32072d2be54b0f487dd65557dca59fe</anchor>
      <arglist>(Graph &amp;G, node &amp;superSink, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>getSingleSource</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>73e89d0b2ac989aadfb3b2d0699003be</anchor>
      <arglist>(const Graph &amp;G)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doUpwardPlanarityTest</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>a2615f63983c0753f4c3c1bec08fa2cd</anchor>
      <arglist>(Graph &amp;G, bool embed, NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;adjacentEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doUpwardPlanarityEmbed</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>cc813b95e05176cb98e6c49df1091106</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;adjacentEdges, bool augment, SList&lt; node &gt; &amp;augmentedNodes, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doUpwardPlanarityEmbed</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>fb13bddd252186c6b73db4332160264d</anchor>
      <arglist>(Graph &amp;G, NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;adjacentEdges, bool augment, node &amp;superSink, SList&lt; edge &gt; &amp;augmentedEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>testBiconnectedComponent</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>42ed5bf61b3dc26256e51eb68dba3787</anchor>
      <arglist>(ExpansionGraph &amp;exp, node sG, int parentBlock, bool embed, NodeArray&lt; SListPure&lt; adjEntry &gt; &gt; &amp;adjacentEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>edge</type>
      <name>directSkeletons</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>048aa6d6f9a14ffde60a02a01819d40e</anchor>
      <arglist>(SPQRTree &amp;T, node s, NodeArray&lt; SkeletonInfo &gt; &amp;skInfo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeDegreesInPertinent</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>9babdc09d2628bc22662b93f3553968a</anchor>
      <arglist>(const SPQRTree &amp;T, node s, NodeArray&lt; SkeletonInfo &gt; &amp;skInfo, node vT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>initFaceSinkGraph</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>4b00f760cf9bd056cafaf4e15adde0ed</anchor>
      <arglist>(const Graph &amp;M, SkeletonInfo &amp;skInfo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>embedSkeleton</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>7178fa052c2314882110604671a00ea8</anchor>
      <arglist>(Graph &amp;G, StaticPlanarSPQRTree &amp;T, NodeArray&lt; SkeletonInfo &gt; &amp;skInfo, node vT, bool extFaceIsLeft)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assignSinks</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>672cdf62128c1a643a8d98bd09900e4a</anchor>
      <arglist>(FaceSinkGraph &amp;F, face extFace, NodeArray&lt; face &gt; &amp;assignedFace)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>node</type>
      <name>dfsAssignSinks</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>b0e17417b28053e1bb22e97a75f90d5b</anchor>
      <arglist>(FaceSinkGraph &amp;F, node v, node parent, NodeArray&lt; face &gt; &amp;assignedFace)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkDegrees</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>bb447081114cc07a331aea456616cc10</anchor>
      <arglist>(SPQRTree &amp;T, node s, NodeArray&lt; SkeletonInfo &gt; &amp;skInfo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>virtualEdgesDirectedEqually</name>
      <anchorfile>classogdf_1_1_upward_planar_module.html</anchorfile>
      <anchor>5cf6b31381958c9e7c16fb94874d3d14</anchor>
      <arglist>(const SPQRTree &amp;T)</arglist>
    </member>
    <class kind="struct">ogdf::UpwardPlanarModule::DegreeInfo</class>
  </compound>
  <compound kind="struct">
    <name>ogdf::UpwardPlanarModule::DegreeInfo</name>
    <filename>structogdf_1_1_upward_planar_module_1_1_degree_info.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>m_indegSrc</name>
      <anchorfile>structogdf_1_1_upward_planar_module_1_1_degree_info.html</anchorfile>
      <anchor>90f2f3d873426ed2f1051cfb078c0816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_outdegSrc</name>
      <anchorfile>structogdf_1_1_upward_planar_module_1_1_degree_info.html</anchorfile>
      <anchor>a7f57171858eaa5214208a026891d175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_indegTgt</name>
      <anchorfile>structogdf_1_1_upward_planar_module_1_1_degree_info.html</anchorfile>
      <anchor>ad880a50149dd51aba7344fcb7760ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_outdegTgt</name>
      <anchorfile>structogdf_1_1_upward_planar_module_1_1_degree_info.html</anchorfile>
      <anchor>c2b198a3448a219618044cea7f6e9351</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ogdf::UpwardPlanarSubgraphSimple</name>
    <filename>classogdf_1_1_upward_planar_subgraph_simple.html</filename>
    <base>ogdf::UpwardPlanarSubgraphModule</base>
    <member kind="function">
      <type></type>
      <name>UpwardPlanarSubgraphSimple</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_simple.html</anchorfile>
      <anchor>85a2adbbe4d644254b43b98168bce03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UpwardPlanarSubgraphSimple</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_simple.html</anchorfile>
      <anchor>6fb3f552a585bc48e083c6ef89a323f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_simple.html</anchorfile>
      <anchor>cde87453dbac950b249772cf051826dd</anchor>
      <arglist>(const Graph &amp;G, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_simple.html</anchorfile>
      <anchor>925aca3c998663f42290d028335d6fbc</anchor>
      <arglist>(GraphCopy &amp;GC, List&lt; edge &gt; &amp;delEdges)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkAcyclic</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_simple.html</anchorfile>
      <anchor>ac13973ce8c787a4467fc3d4b773e42c</anchor>
      <arglist>(GraphCopySimple &amp;graphAcyclicTest, SList&lt; Tuple2&lt; node, node &gt; &gt; &amp;tmpAugmented)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dfsBuildSpanningTree</name>
      <anchorfile>classogdf_1_1_upward_planar_subgraph_simple.html</anchorfile>
      <anchor>2d30841a25220d07ff418a410795f105</anchor>
      <arglist>(node v, SListPure&lt; edge &gt; &amp;treeEdges, NodeArray&lt; bool &gt; &amp;visited)</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>ogdf/augmentation/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/augmentation/</path>
    <filename>dir_79bd1075d39ec347dedc11ac4414e8e6.html</filename>
    <file>DfsMakeBiconnected.h</file>
    <file>PlanarAugmentation.h</file>
    <file>PlanarAugmentationFix.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/internal/basic/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/basic/</path>
    <filename>dir_55372523883b10f49c84d8fdca595119.html</filename>
    <file>list_templates.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/basic/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/basic/</path>
    <filename>dir_1c1d807ced021c267d7aa52396f3fcd9.html</filename>
    <file>AdjEntryArray.h</file>
    <file>Array.h</file>
    <file>Array2D.h</file>
    <file>ArrayBuffer.h</file>
    <file>basic.h</file>
    <file>BinaryHeap.h</file>
    <file>BoundedQueue.h</file>
    <file>BoundedStack.h</file>
    <file>CombinatorialEmbedding.h</file>
    <file>DualGraph.h</file>
    <file>EdgeArray.h</file>
    <file>EdgeComparer.h</file>
    <file>exceptions.h</file>
    <file>extended_graph_alg.h</file>
    <file>FaceArray.h</file>
    <file>FaceSet.h</file>
    <file>geometry.h</file>
    <file>Graph.h</file>
    <file>Graph_d.h</file>
    <file>graph_generators.h</file>
    <file>GraphAttributes.h</file>
    <file>GraphCopy.h</file>
    <file>GraphCopyAttributes.h</file>
    <file>GraphObserver.h</file>
    <file>GridLayout.h</file>
    <file>GridLayoutMapped.h</file>
    <file>HashArray.h</file>
    <file>HashArray2D.h</file>
    <file>Hashing.h</file>
    <file>HashIterator2D.h</file>
    <file>HeapBase.h</file>
    <file>IncNodeInserter.h</file>
    <file>Layout.h</file>
    <file>List.h</file>
    <file>Logger.h</file>
    <file>math.h</file>
    <file>memory.h</file>
    <file>MinHeap.h</file>
    <file>Module.h</file>
    <file>ModuleOption.h</file>
    <file>NearestRectangleFinder.h</file>
    <file>NodeArray.h</file>
    <file>NodeComparer.h</file>
    <file>NodeSet.h</file>
    <file>precondition.h</file>
    <file>Queue.h</file>
    <file>simple_graph_alg.h</file>
    <file>Skiplist.h</file>
    <file>SList.h</file>
    <file>Stack.h</file>
    <file>String.h</file>
    <file>Timeouter.h</file>
    <file>TopologyModule.h</file>
    <file>tuples.h</file>
    <file>UMLGraph.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/internal/cluster/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/cluster/</path>
    <filename>dir_1091c65dc53154192ba61bf5b9695ea5.html</filename>
    <file>ClusterPQContainer.h</file>
    <file>CPlanarSubClusteredST.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/cluster/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/cluster/</path>
    <filename>dir_cf18826e2db45d380ad104e1710eceab.html</filename>
    <file>CconnectClusterPlanar.h</file>
    <file>CconnectClusterPlanarEmbed.h</file>
    <file>ClusterArray.h</file>
    <file>ClusterGraph.h</file>
    <file>ClusterGraphAttributes.h</file>
    <file>ClusterGraphCopyAttributes.h</file>
    <file>ClusterGraphObserver.h</file>
    <file>ClusterOrthoLayout.h</file>
    <file>ClusterOrthoShaper.h</file>
    <file>ClusterPlanarizationLayout.h</file>
    <file>ClusterPlanRep.h</file>
    <file>ClusterSet.h</file>
    <file>CPlanarEdgeInserter.h</file>
    <file>CPlanarSubClusteredGraph.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/decomposition/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/decomposition/</path>
    <filename>dir_dd34c1f7b94ab9c7ff940ab959823552.html</filename>
    <file>BCTree.h</file>
    <file>DynamicBCTree.h</file>
    <file>DynamicPlanarSPQRTree.h</file>
    <file>DynamicSkeleton.h</file>
    <file>DynamicSPQRForest.h</file>
    <file>DynamicSPQRTree.h</file>
    <file>PertinentGraph.h</file>
    <file>PlanarSPQRTree.h</file>
    <file>Skeleton.h</file>
    <file>SPQRTree.h</file>
    <file>StaticPlanarSPQRTree.h</file>
    <file>StaticSkeleton.h</file>
    <file>StaticSPQRTree.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/internal/energybased/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/energybased/</path>
    <filename>dir_b2c91071aa35ddefd031d0b366fac67a.html</filename>
    <file>AdjacencyOracle.h</file>
    <file>Attraction.h</file>
    <file>EdgeAttributes.h</file>
    <file>EnergyFunction.h</file>
    <file>FruchtermanReingold.h</file>
    <file>IntersectionRectangle.h</file>
    <file>NMM.h</file>
    <file>NodeAttributes.h</file>
    <file>NodePairEnergy.h</file>
    <file>Overlap.h</file>
    <file>ParticleInfo.h</file>
    <file>Planarity.h</file>
    <file>PlanarityGrid.h</file>
    <file>QuadTreeNM.h</file>
    <file>QuadTreeNodeNM.h</file>
    <file>Repulsion.h</file>
    <file>UniformGrid.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/energybased/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/energybased/</path>
    <filename>dir_a4716bcf68ce84fa4dd98d9780da603c.html</filename>
    <file>CoinTutteLayout.h</file>
    <file>DavidsonHarel.h</file>
    <file>DavidsonHarelLayout.h</file>
    <file>FMMMLayout.h</file>
    <file>GEMLayout.h</file>
    <file>SpringEmbedderFR.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/external/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/external/</path>
    <filename>dir_b17fcd4fe2697a59c80e00fa6f6cb831.html</filename>
    <file>abacus.h</file>
    <file>coin.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/fileformats/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/fileformats/</path>
    <filename>dir_c57e711e3bb659db3984c203ebef603b.html</filename>
    <file>DinoLineBuffer.h</file>
    <file>DinoTools.h</file>
    <file>DinoUmlDiagramGraph.h</file>
    <file>DinoUmlModelGraph.h</file>
    <file>DinoUmlToGraphConverter.h</file>
    <file>DinoXmlParser.h</file>
    <file>DinoXmlScanner.h</file>
    <file>GmlParser.h</file>
    <file>simple_graph_load.h</file>
    <file>XmlObject.h</file>
    <file>XmlParser.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/graphalg/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/graphalg/</path>
    <filename>dir_d2fcecafb061f77eacc2466d07ed14d2.html</filename>
    <file>CliqueFinder.h</file>
    <file>Clusterer.h</file>
    <file>GraphReduction.h</file>
    <file>MinCostFlowReinelt.h</file>
    <file>MinimumCut.h</file>
    <file>ShortestPathWithBFM.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/internal/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/</path>
    <filename>dir_a1a6f11ae26f6ded34e4409174c0e998.html</filename>
    <dir>ogdf/internal/basic/</dir>
    <dir>ogdf/internal/cluster/</dir>
    <dir>ogdf/internal/energybased/</dir>
    <dir>ogdf/internal/lpsolver/</dir>
    <dir>ogdf/internal/orthogonal/</dir>
    <dir>ogdf/internal/planarity/</dir>
  </compound>
  <compound kind="dir">
    <name>ogdf/labeling/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/labeling/</path>
    <filename>dir_7c79fb32bbc9867477a3849e1e998d4c.html</filename>
    <file>EdgeLabel.h</file>
    <file>ELabelInterface.h</file>
    <file>ELabelPosSimple.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/layered/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/layered/</path>
    <filename>dir_dbca04df9907b2693227a77b06383da3.html</filename>
    <file>BarycenterHeuristic.h</file>
    <file>CrossingsMatrix.h</file>
    <file>DfsAcyclicSubgraph.h</file>
    <file>ExtendedNestingGraph.h</file>
    <file>FastHierarchyLayout.h</file>
    <file>GreedyCycleRemoval.h</file>
    <file>Hierarchy.h</file>
    <file>Level.h</file>
    <file>LongestPathRanking.h</file>
    <file>MedianHeuristic.h</file>
    <file>OptimalHierarchyClusterLayout.h</file>
    <file>OptimalHierarchyLayout.h</file>
    <file>OptimalRanking.h</file>
    <file>SplitHeuristic.h</file>
    <file>SugiyamaLayout.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/lpsolver/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/lpsolver/</path>
    <filename>dir_22ceb08089b74b8dc674f877c23542ca.html</filename>
    <file>LPSolver.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/internal/lpsolver/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/lpsolver/</path>
    <filename>dir_7ce9368cf5f651539787c5d5473f40f0.html</filename>
    <file>LPSolver_coin.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/misclayout/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/misclayout/</path>
    <filename>dir_9907e6768839df3094a1760f15fb2157.html</filename>
    <file>BalloonLayout.h</file>
    <file>CircularLayout.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/module/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/module/</path>
    <filename>dir_f40737bbdf90691b52cbd04db8afa9b0.html</filename>
    <file>AcyclicSubgraphModule.h</file>
    <file>AugmentationModule.h</file>
    <file>CCLayoutPackModule.h</file>
    <file>ClustererModule.h</file>
    <file>CrossingMinimizationModule.h</file>
    <file>EdgeInsertionModule.h</file>
    <file>EmbedderModule.h</file>
    <file>GridLayoutModule.h</file>
    <file>HierarchyClusterLayoutModule.h</file>
    <file>HierarchyLayoutModule.h</file>
    <file>LayoutClusterPlanRepModule.h</file>
    <file>LayoutModule.h</file>
    <file>LayoutPlanRepModule.h</file>
    <file>MinCostFlowModule.h</file>
    <file>MixedModelCrossingsBeautifierModule.h</file>
    <file>MMCrossingMinimizationModule.h</file>
    <file>MMEdgeInsertionModule.h</file>
    <file>PlanarSubgraphModule.h</file>
    <file>RankingModule.h</file>
    <file>ShellingOrderModule.h</file>
    <file>ShortestPathModule.h</file>
    <file>TwoLayerCrossMin.h</file>
    <file>UMLLayoutModule.h</file>
    <file>UpwardPlanarSubgraphModule.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/</path>
    <filename>dir_6729ad2821e476f8828ee18fb0b38351.html</filename>
    <dir>ogdf/augmentation/</dir>
    <dir>ogdf/basic/</dir>
    <dir>ogdf/cluster/</dir>
    <dir>ogdf/decomposition/</dir>
    <dir>ogdf/energybased/</dir>
    <dir>ogdf/external/</dir>
    <dir>ogdf/fileformats/</dir>
    <dir>ogdf/graphalg/</dir>
    <dir>ogdf/internal/</dir>
    <dir>ogdf/labeling/</dir>
    <dir>ogdf/layered/</dir>
    <dir>ogdf/lpsolver/</dir>
    <dir>ogdf/misclayout/</dir>
    <dir>ogdf/module/</dir>
    <dir>ogdf/orthogonal/</dir>
    <dir>ogdf/packing/</dir>
    <dir>ogdf/planarity/</dir>
    <dir>ogdf/planarlayout/</dir>
    <dir>ogdf/simultaneous/</dir>
    <dir>ogdf/tree/</dir>
    <dir>ogdf/upward/</dir>
  </compound>
  <compound kind="dir">
    <name>ogdf/orthogonal/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/orthogonal/</path>
    <filename>dir_f7781158d846ee7257903f3bd63698c5.html</filename>
    <file>CompactionConstraintGraph.h</file>
    <file>EdgeRouter.h</file>
    <file>FlowCompaction.h</file>
    <file>LongestPathCompaction.h</file>
    <file>MinimumEdgeDistances.h</file>
    <file>OrthoLayout.h</file>
    <file>OrthoRep.h</file>
    <file>OrthoShaper.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/internal/orthogonal/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/orthogonal/</path>
    <filename>dir_4b37d1d3009664651e5cfd8cd1c45331.html</filename>
    <file>NodeInfo.h</file>
    <file>RoutingChannel.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/packing/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/packing/</path>
    <filename>dir_ca21b9a9b7f87bfeda9f2264d2a0e264.html</filename>
    <file>TileToRowsCCPacker.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/planarity/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarity/</path>
    <filename>dir_e72c104885ead16fa016ad301377fd56.html</filename>
    <file>BoyerMyrvold.h</file>
    <file>EdgeTypePatterns.h</file>
    <file>EmbedderMaxFace.h</file>
    <file>EmbedderMaxFaceLayers.h</file>
    <file>EmbedderMinDepth.h</file>
    <file>EmbedderMinDepthMaxFace.h</file>
    <file>EmbedderMinDepthMaxFaceLayers.h</file>
    <file>EmbedderMinDepthPiTa.h</file>
    <file>ExtractKuratowskis.h</file>
    <file>FastPlanarSubgraph.h</file>
    <file>FixedEmbeddingInserter.h</file>
    <file>KuratowskiSubdivision.h</file>
    <file>MaximalPlanarSubgraphSimple.h</file>
    <file>MMFixedEmbeddingInserter.h</file>
    <file>MMSubgraphPlanarizer.h</file>
    <file>MMVariableEmbeddingInserter.h</file>
    <file>NodeTypePatterns.h</file>
    <file>NonPlanarCore.h</file>
    <file>PlanarizationGridLayout.h</file>
    <file>PlanarizationLayout.h</file>
    <file>PlanarModule.h</file>
    <file>PlanRep.h</file>
    <file>PlanRepExpansion.h</file>
    <file>PlanRepInc.h</file>
    <file>PlanRepUML.h</file>
    <file>SimpleEmbedder.h</file>
    <file>SimpleIncNodeInserter.h</file>
    <file>SubgraphPlanarizer.h</file>
    <file>VariableEmbeddingInserter.h</file>
    <file>VariableEmbeddingInserter2.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/internal/planarity/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/internal/planarity/</path>
    <filename>dir_5402cba4a10bc1bb3daae52fde1a4878.html</filename>
    <file>BoyerMyrvoldInit.h</file>
    <file>BoyerMyrvoldPlanar.h</file>
    <file>ConnectedSubgraph.h</file>
    <file>EmbedderMaxFaceBiconnectedGraphs.h</file>
    <file>EmbedderMaxFaceBiconnectedGraphsLayers.h</file>
    <file>EmbedderMDMFLengthAttribute.h</file>
    <file>EmbedIndicator.h</file>
    <file>EmbedKey.h</file>
    <file>EmbedPQTree.h</file>
    <file>FindKuratowskis.h</file>
    <file>MaxSequencePQTree.h</file>
    <file>PlanarLeafKey.h</file>
    <file>PlanarPQTree.h</file>
    <file>PlanarSubgraphPQTree.h</file>
    <file>PQBasicKey.h</file>
    <file>PQBasicKeyRoot.h</file>
    <file>PQInternalKey.h</file>
    <file>PQInternalNode.h</file>
    <file>PQLeaf.h</file>
    <file>PQLeafKey.h</file>
    <file>PQNode.h</file>
    <file>PQNodeKey.h</file>
    <file>PQNodeRoot.h</file>
    <file>PQTree.h</file>
    <file>PQTreeRoot.h</file>
    <file>whaInfo.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/planarlayout/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/planarlayout/</path>
    <filename>dir_baa7fc1bb225b0d49bfb354efc512c78.html</filename>
    <file>BiconnectedShellingOrder.h</file>
    <file>MixedModelLayout.h</file>
    <file>MMCBBase.h</file>
    <file>MMCBDoubleGrid.h</file>
    <file>MMCBLocalStretch.h</file>
    <file>PlanarDrawLayout.h</file>
    <file>PlanarStraightLayout.h</file>
    <file>ShellingOrder.h</file>
    <file>TriconnectedShellingOrder.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/simultaneous/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/simultaneous/</path>
    <filename>dir_830b8d6cc9dc2088290471b80ffa21b5.html</filename>
    <file>SimDraw.h</file>
    <file>SimDrawCaller.h</file>
    <file>SimDrawColorizer.h</file>
    <file>SimDrawCreator.h</file>
    <file>SimDrawCreatorSimple.h</file>
    <file>SimDrawManipulatorModule.h</file>
    <file>TwoLayerCrossMinSimDraw.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/tree/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/tree/</path>
    <filename>dir_b7a1e3ac4ffca467f118d4e56a124e44.html</filename>
    <file>RadialTreeLayout.h</file>
    <file>TreeLayout.h</file>
  </compound>
  <compound kind="dir">
    <name>ogdf/upward/</name>
    <path>/home/dwyer/devel/ogdf/OGDF/ogdf/upward/</path>
    <filename>dir_8c742fa82a8786d075137574ad5a071f.html</filename>
    <file>ExpansionGraph.h</file>
    <file>FaceSinkGraph.h</file>
    <file>UpwardPlanarModule.h</file>
    <file>UpwardPlanarSubgraphSimple.h</file>
  </compound>
</tagfile>
